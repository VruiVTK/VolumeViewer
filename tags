!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AIsosurface	ExampleVTKReader.h	/^  bool AIsosurface;$/;"	m	class:ExampleVTKReader	access:private
AIsosurfacesSlider	Isosurfaces.cpp	/^    GLMotif::Slider * AIsosurfacesSlider = new GLMotif::Slider("AIsosurfaceSlider", abcIsosurfacesRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
AIsosurfacesValue	Isosurfaces.h	/^    GLMotif::TextField* AIsosurfacesValue;$/;"	m	class:Isosurfaces	access:private
ALPHA_COMPONENT	ScalarWidget.h	19;"	d
AddPoint	ExampleVTKReader.cpp	/^    dataItem->opacityFunction->AddPoint($/;"	p	file:	signature:( this->DataScalarRange[0] + (double)(i*step), this->VolumeColormap[4*i + 3])
AddPoint	ExampleVTKReader.cpp	/^  dataItem->opacityFunction->AddPoint(this->DataScalarRange[0], 0.0);$/;"	p	file:	signature:(this->DataScalarRange[0], 0.0)
AddPoint	ExampleVTKReader.cpp	/^  dataItem->opacityFunction->AddPoint(this->DataScalarRange[1], 1.0);$/;"	p	file:	signature:(this->DataScalarRange[1], 1.0)
AddRGBPoint	ExampleVTKReader.cpp	/^    dataItem->colorFunction->AddRGBPoint($/;"	p	file:	signature:( this->DataScalarRange[0] + (double)(i*step), this->VolumeColormap[4*i + 0], this->VolumeColormap[4*i + 1], this->VolumeColormap[4*i + 2])
AddRGBPoint	ExampleVTKReader.cpp	/^  dataItem->colorFunction->AddRGBPoint(this->DataScalarRange[0], 1.0, 1.0, 1.0);$/;"	p	file:	signature:(this->DataScalarRange[0], 1.0, 1.0, 1.0)
AddRGBPoint	ExampleVTKReader.cpp	/^  dataItem->colorFunction->AddRGBPoint(this->DataScalarRange[1], 0.0, 0.0, 0.0);$/;"	p	file:	signature:(this->DataScalarRange[1], 0.0, 0.0, 0.0)
AllocateScalars	ExampleVTKReader.cpp	/^    imageData->AllocateScalars(VTK_UNSIGNED_CHAR, 1);$/;"	p	file:	signature:(VTK_UNSIGNED_CHAR, 1)
BASELOCATOR_H_	BaseLocator.h	2;"	d
BIsosurface	ExampleVTKReader.h	/^  bool BIsosurface;$/;"	m	class:ExampleVTKReader	access:private
BIsosurfacesSlider	Isosurfaces.cpp	/^    GLMotif::Slider * BIsosurfacesSlider = new GLMotif::Slider("BIsosurfaceSlider", abcIsosurfacesRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
BIsosurfacesValue	Isosurfaces.h	/^    GLMotif::TextField* BIsosurfacesValue;$/;"	m	class:Isosurfaces	access:private
BLACK_TO_WHITE	ColorMap.h	/^static float BLACK_TO_WHITE[2][4] = {$/;"	v
BLUE_COMPONENT	ScalarWidget.h	18;"	d
BaseLocator	BaseLocator.cpp	/^BaseLocator::BaseLocator(Vrui::LocatorTool* _locatorTool, ExampleVTKReader* _application) :$/;"	f	class:BaseLocator	signature:(Vrui::LocatorTool* _locatorTool, ExampleVTKReader* _application)
BaseLocator	BaseLocator.h	/^	BaseLocator(Vrui::LocatorTool* _locatorTool, ExampleVTKReader* _application);$/;"	p	class:BaseLocator	access:public	signature:(Vrui::LocatorTool* _locatorTool, ExampleVTKReader* _application)
BaseLocator	BaseLocator.h	/^class BaseLocator : public Vrui::LocatorToolAdapter {$/;"	c	inherits:Vrui::LocatorToolAdapter
BaseLocator::BaseLocator	BaseLocator.cpp	/^BaseLocator::BaseLocator(Vrui::LocatorTool* _locatorTool, ExampleVTKReader* _application) :$/;"	f	class:BaseLocator	signature:(Vrui::LocatorTool* _locatorTool, ExampleVTKReader* _application)
BaseLocator::BaseLocator	BaseLocator.h	/^	BaseLocator(Vrui::LocatorTool* _locatorTool, ExampleVTKReader* _application);$/;"	p	class:BaseLocator	access:public	signature:(Vrui::LocatorTool* _locatorTool, ExampleVTKReader* _application)
BaseLocator::application	BaseLocator.h	/^	ExampleVTKReader* application;$/;"	m	class:BaseLocator	access:private
BaseLocator::glRenderAction	BaseLocator.cpp	/^void BaseLocator::glRenderAction(GLContextData& glContextData) const {$/;"	f	class:BaseLocator	signature:(GLContextData& glContextData) const
BaseLocator::glRenderAction	BaseLocator.h	/^	virtual void glRenderAction(GLContextData& contextData) const;$/;"	p	class:BaseLocator	access:public	signature:(GLContextData& contextData) const
BaseLocator::glRenderActionTransparent	BaseLocator.cpp	/^void BaseLocator::glRenderActionTransparent(GLContextData& glContextData) const {$/;"	f	class:BaseLocator	signature:(GLContextData& glContextData) const
BaseLocator::glRenderActionTransparent	BaseLocator.h	/^	virtual void glRenderActionTransparent(GLContextData& contextData) const;$/;"	p	class:BaseLocator	access:public	signature:(GLContextData& contextData) const
BaseLocator::highlightLocator	BaseLocator.cpp	/^void BaseLocator::highlightLocator(GLContextData& glContextData) const {$/;"	f	class:BaseLocator	signature:(GLContextData& glContextData) const
BaseLocator::highlightLocator	BaseLocator.h	/^	virtual void highlightLocator(GLContextData& contextData) const;$/;"	p	class:BaseLocator	access:public	signature:(GLContextData& contextData) const
BaseLocator::~BaseLocator	BaseLocator.cpp	/^BaseLocator::~BaseLocator(void) {$/;"	f	class:BaseLocator	signature:(void)
BaseLocator::~BaseLocator	BaseLocator.h	/^	~BaseLocator();$/;"	p	class:BaseLocator	access:public	signature:()
BaseLocatorList	ExampleVTKReader.h	/^  typedef std::vector<BaseLocator*> BaseLocatorList;$/;"	t	class:ExampleVTKReader	access:private
Build	DataItem.cpp	/^  this->isosurfaceLUT->Build();$/;"	p	file:	signature:()
Build	DataItem.cpp	/^  this->modelLUT->Build();$/;"	p	file:	signature:()
Build	DataItem.cpp	/^  this->sliceLUT->Build();$/;"	p	file:	signature:()
CBLACK_TO_WHITE	ColorMap.h	146;"	d
CCOLD_TO_HOT	ColorMap.h	144;"	d
CDAVINCI	ColorMap.h	150;"	d
CFULL_RAINBOW	ColorMap.h	140;"	d
CHOT_TO_COLD	ColorMap.h	145;"	d
CHSB_HUES	ColorMap.h	148;"	d
CINVERSE_DAVINCI	ColorMap.h	151;"	d
CINVERSE_FULL_RAINBOW	ColorMap.h	141;"	d
CINVERSE_HSB_HUES	ColorMap.h	149;"	d
CINVERSE_RAINBOW	ColorMap.h	143;"	d
CINVERSE_SEISMIC	ColorMap.h	153;"	d
CIsosurface	ExampleVTKReader.h	/^  bool CIsosurface;$/;"	m	class:ExampleVTKReader	access:private
CIsosurfacesSlider	Isosurfaces.cpp	/^    GLMotif::Slider * CIsosurfacesSlider = new GLMotif::Slider("CIsosurfaceSlider", abcIsosurfacesRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
CIsosurfacesValue	Isosurfaces.h	/^    GLMotif::TextField* CIsosurfacesValue;$/;"	m	class:Isosurfaces	access:private
CLIPPINGPLANELOCATOR_H_	ClippingPlaneLocator.h	2;"	d
CLIPPINGPLANE_H_	ClippingPlane.h	2;"	d
COLD_TO_HOT	ColorMap.h	/^static float COLD_TO_HOT[3][4] = {$/;"	v
COLORMAPCALLBACKDATA_H_	ColorMapCallbackData.h	2;"	d
COLORMAPCHANGEDCALLBACKDATA_H_	ColorMapChangedCallbackData.h	2;"	d
COLORMAP_INCLUDED	ColorMap.h	2;"	d
CONSTANT_RAMP	ScalarWidget.h	23;"	d
CONTOURS_INCLUDED	Contours.h	9;"	d
CONTROLPOINTCHANGEDCALLBACKDATA_H_	ControlPointChangedCallbackData.h	2;"	d
CONTROLPOINT_H_	ControlPoint.h	2;"	d
CRAINBOW	ColorMap.h	142;"	d
CSEISMIC	ColorMap.h	152;"	d
CWHITE_TO_BLACK	ColorMap.h	147;"	d
Center	ExampleVTKReader.h	/^  Vrui::Point Center;$/;"	m	class:ExampleVTKReader	access:private
ClippingPlane	ClippingPlane.cpp	/^ClippingPlane::ClippingPlane(void) {$/;"	f	class:ClippingPlane	signature:(void)
ClippingPlane	ClippingPlane.h	/^	ClippingPlane(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
ClippingPlane	ClippingPlane.h	/^class ClippingPlane {$/;"	c
ClippingPlane::ClippingPlane	ClippingPlane.cpp	/^ClippingPlane::ClippingPlane(void) {$/;"	f	class:ClippingPlane	signature:(void)
ClippingPlane::ClippingPlane	ClippingPlane.h	/^	ClippingPlane(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
ClippingPlane::active	ClippingPlane.h	/^	bool active;$/;"	m	class:ClippingPlane	access:private
ClippingPlane::allocated	ClippingPlane.h	/^	bool allocated;$/;"	m	class:ClippingPlane	access:private
ClippingPlane::getPlane	ClippingPlane.cpp	/^Vrui::Plane ClippingPlane::getPlane(void) {$/;"	f	class:ClippingPlane	signature:(void)
ClippingPlane::getPlane	ClippingPlane.h	/^	Vrui::Plane getPlane(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
ClippingPlane::isActive	ClippingPlane.cpp	/^bool ClippingPlane::isActive(void) {$/;"	f	class:ClippingPlane	signature:(void)
ClippingPlane::isActive	ClippingPlane.h	/^	bool isActive(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
ClippingPlane::isAllocated	ClippingPlane.cpp	/^bool ClippingPlane::isAllocated(void) {$/;"	f	class:ClippingPlane	signature:(void)
ClippingPlane::isAllocated	ClippingPlane.h	/^	bool isAllocated(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
ClippingPlane::plane	ClippingPlane.h	/^	Vrui::Plane plane;$/;"	m	class:ClippingPlane	access:private
ClippingPlane::setActive	ClippingPlane.cpp	/^void ClippingPlane::setActive(bool _active) {$/;"	f	class:ClippingPlane	signature:(bool _active)
ClippingPlane::setActive	ClippingPlane.h	/^	void setActive(bool _active);$/;"	p	class:ClippingPlane	access:public	signature:(bool _active)
ClippingPlane::setAllocated	ClippingPlane.cpp	/^void ClippingPlane::setAllocated(bool _allocated) {$/;"	f	class:ClippingPlane	signature:(bool _allocated)
ClippingPlane::setAllocated	ClippingPlane.h	/^	void setAllocated(bool _allocated);$/;"	p	class:ClippingPlane	access:public	signature:(bool _allocated)
ClippingPlane::setPlane	ClippingPlane.cpp	/^void ClippingPlane::setPlane(Vrui::Plane _plane) {$/;"	f	class:ClippingPlane	signature:(Vrui::Plane _plane)
ClippingPlane::setPlane	ClippingPlane.h	/^	void setPlane(Vrui::Plane plane);$/;"	p	class:ClippingPlane	access:public	signature:(Vrui::Plane plane)
ClippingPlane::~ClippingPlane	ClippingPlane.cpp	/^ClippingPlane::~ClippingPlane(void) {$/;"	f	class:ClippingPlane	signature:(void)
ClippingPlane::~ClippingPlane	ClippingPlane.h	/^	~ClippingPlane(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
ClippingPlaneLocator	ClippingPlaneLocator.cpp	/^ClippingPlaneLocator::ClippingPlaneLocator(Vrui::LocatorTool * locatorTool,$/;"	f	class:ClippingPlaneLocator	signature:(Vrui::LocatorTool * locatorTool, ExampleVTKReader* ExampleVTKReader)
ClippingPlaneLocator	ClippingPlaneLocator.h	/^	ClippingPlaneLocator(Vrui::LocatorTool* locatorTool,$/;"	p	class:ClippingPlaneLocator	access:public	signature:(Vrui::LocatorTool* locatorTool, ExampleVTKReader * ExampleVTKReader)
ClippingPlaneLocator	ClippingPlaneLocator.h	/^class ClippingPlaneLocator : public BaseLocator {$/;"	c	inherits:BaseLocator
ClippingPlaneLocator::ClippingPlaneLocator	ClippingPlaneLocator.cpp	/^ClippingPlaneLocator::ClippingPlaneLocator(Vrui::LocatorTool * locatorTool,$/;"	f	class:ClippingPlaneLocator	signature:(Vrui::LocatorTool * locatorTool, ExampleVTKReader* ExampleVTKReader)
ClippingPlaneLocator::ClippingPlaneLocator	ClippingPlaneLocator.h	/^	ClippingPlaneLocator(Vrui::LocatorTool* locatorTool,$/;"	p	class:ClippingPlaneLocator	access:public	signature:(Vrui::LocatorTool* locatorTool, ExampleVTKReader * ExampleVTKReader)
ClippingPlaneLocator::buttonPressCallback	ClippingPlaneLocator.cpp	/^void ClippingPlaneLocator::buttonPressCallback($/;"	f	class:ClippingPlaneLocator	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
ClippingPlaneLocator::buttonPressCallback	ClippingPlaneLocator.h	/^	virtual void buttonPressCallback($/;"	p	class:ClippingPlaneLocator	access:public	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
ClippingPlaneLocator::buttonReleaseCallback	ClippingPlaneLocator.cpp	/^void ClippingPlaneLocator::buttonReleaseCallback($/;"	f	class:ClippingPlaneLocator	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
ClippingPlaneLocator::buttonReleaseCallback	ClippingPlaneLocator.h	/^	virtual void buttonReleaseCallback($/;"	p	class:ClippingPlaneLocator	access:public	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
ClippingPlaneLocator::clippingPlane	ClippingPlaneLocator.h	/^	ClippingPlane * clippingPlane;$/;"	m	class:ClippingPlaneLocator	access:private
ClippingPlaneLocator::motionCallback	ClippingPlaneLocator.cpp	/^void ClippingPlaneLocator::motionCallback($/;"	f	class:ClippingPlaneLocator	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
ClippingPlaneLocator::motionCallback	ClippingPlaneLocator.h	/^	virtual void motionCallback($/;"	p	class:ClippingPlaneLocator	access:public	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
ClippingPlaneLocator::~ClippingPlaneLocator	ClippingPlaneLocator.cpp	/^ClippingPlaneLocator::~ClippingPlaneLocator(void) {$/;"	f	class:ClippingPlaneLocator	signature:(void)
ClippingPlaneLocator::~ClippingPlaneLocator	ClippingPlaneLocator.h	/^	~ClippingPlaneLocator(void);$/;"	p	class:ClippingPlaneLocator	access:public	signature:(void)
ClippingPlanes	ExampleVTKReader.h	/^  ClippingPlane * ClippingPlanes;$/;"	m	class:ExampleVTKReader	access:private
ColorMap	ColorMap.cpp	/^ColorMap::ColorMap(const char* _name, GLMotif::Container* _parent, bool _manageChild) :$/;"	f	class:ColorMap	signature:(const char* _name, GLMotif::Container* _parent, bool _manageChild)
ColorMap	ColorMap.h	/^	ColorMap(const char* _name, GLMotif::Container* _parent, bool _manageChild=true);$/;"	p	class:ColorMap	access:public	signature:(const char* _name, GLMotif::Container* _parent, bool _manageChild=true)
ColorMap	ColorMap.h	/^class ColorMap : public GLMotif::Widget {$/;"	c	inherits:GLMotif::Widget
ColorMap::ColorMap	ColorMap.cpp	/^ColorMap::ColorMap(const char* _name, GLMotif::Container* _parent, bool _manageChild) :$/;"	f	class:ColorMap	signature:(const char* _name, GLMotif::Container* _parent, bool _manageChild)
ColorMap::ColorMap	ColorMap.h	/^	ColorMap(const char* _name, GLMotif::Container* _parent, bool _manageChild=true);$/;"	p	class:ColorMap	access:public	signature:(const char* _name, GLMotif::Container* _parent, bool _manageChild=true)
ColorMap::Scalar	ColorMap.h	/^	typedef float Scalar;$/;"	t	class:ColorMap	access:public
ColorMap::calcNaturalSize	ColorMap.cpp	/^GLMotif::Vector ColorMap::calcNaturalSize(void) const {$/;"	f	class:ColorMap	signature:(void) const
ColorMap::calcNaturalSize	ColorMap.h	/^	virtual GLMotif::Vector calcNaturalSize(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
ColorMap::colorMapAreaBox	ColorMap.h	/^	GLMotif::Box colorMapAreaBox;$/;"	m	class:ColorMap	access:private
ColorMap::colorMapChangedCallbacks	ColorMap.h	/^	Misc::CallbackList colorMapChangedCallbacks;$/;"	m	class:ColorMap	access:private
ColorMap::controlPoint	ColorMap.h	/^	ControlPoint* controlPoint;$/;"	m	class:ColorMap	access:private
ColorMap::controlPointChangedCallbacks	ColorMap.h	/^	Misc::CallbackList controlPointChangedCallbacks;$/;"	m	class:ColorMap	access:private
ColorMap::controlPointColor	ColorMap.h	/^	RGBAColor* controlPointColor;$/;"	m	class:ColorMap	access:private
ColorMap::controlPointSize	ColorMap.h	/^	GLfloat controlPointSize;$/;"	m	class:ColorMap	access:private
ColorMap::createColorMap	ColorMap.cpp	/^void ColorMap::createColorMap(int colorMapCreationType, double _minimum, double _maximum) {$/;"	f	class:ColorMap	signature:(int colorMapCreationType, double _minimum, double _maximum)
ColorMap::createColorMap	ColorMap.cpp	/^void ColorMap::createColorMap(int colormap) {$/;"	f	class:ColorMap	signature:(int colormap)
ColorMap::createColorMap	ColorMap.h	/^	void createColorMap(int colorMapCreationType, double _minimum, double _maximum);$/;"	p	class:ColorMap	access:public	signature:(int colorMapCreationType, double _minimum, double _maximum)
ColorMap::createColorMap	ColorMap.h	/^	void createColorMap(int colormap);$/;"	p	class:ColorMap	access:public	signature:(int colormap)
ColorMap::deleteColorMap	ColorMap.cpp	/^void ColorMap::deleteColorMap(void) {$/;"	f	class:ColorMap	signature:(void)
ColorMap::deleteColorMap	ColorMap.h	/^	void deleteColorMap(void);$/;"	p	class:ColorMap	access:private	signature:(void)
ColorMap::deleteControlPoint	ColorMap.cpp	/^void ColorMap::deleteControlPoint(void) {$/;"	f	class:ColorMap	signature:(void)
ColorMap::deleteControlPoint	ColorMap.h	/^	void deleteControlPoint(void);$/;"	p	class:ColorMap	access:public	signature:(void)
ColorMap::determineControlPoint	ColorMap.cpp	/^ControlPoint* ColorMap::determineControlPoint(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
ColorMap::determineControlPoint	ColorMap.h	/^	ControlPoint* determineControlPoint(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
ColorMap::dragOffset	ColorMap.h	/^	GLMotif::Point::Vector dragOffset;$/;"	m	class:ColorMap	access:private
ColorMap::draw	ColorMap.cpp	/^void ColorMap::draw(GLContextData& contextData) const {$/;"	f	class:ColorMap	signature:(GLContextData& contextData) const
ColorMap::draw	ColorMap.h	/^	virtual void draw(GLContextData& contextData) const;$/;"	p	class:ColorMap	access:public	signature:(GLContextData& contextData) const
ColorMap::drawColorMap	ColorMap.cpp	/^void ColorMap::drawColorMap(void) const {$/;"	f	class:ColorMap	signature:(void) const
ColorMap::drawColorMap	ColorMap.h	/^	void drawColorMap(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
ColorMap::drawControlPoints	ColorMap.cpp	/^void ColorMap::drawControlPoints(void) const {$/;"	f	class:ColorMap	signature:(void) const
ColorMap::drawControlPoints	ColorMap.h	/^	void drawControlPoints(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
ColorMap::drawMargin	ColorMap.cpp	/^void ColorMap::drawMargin(void) const {$/;"	f	class:ColorMap	signature:(void) const
ColorMap::drawMargin	ColorMap.h	/^	void drawMargin(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
ColorMap::exportColorMap	ColorMap.cpp	/^void ColorMap::exportColorMap(double* colormap) const {$/;"	f	class:ColorMap	signature:(double* colormap) const
ColorMap::exportColorMap	ColorMap.h	/^	void exportColorMap(double* colormap) const;$/;"	p	class:ColorMap	access:public	signature:(double* colormap) const
ColorMap::findRecipient	ColorMap.cpp	/^bool ColorMap::findRecipient(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
ColorMap::findRecipient	ColorMap.h	/^	virtual bool findRecipient(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
ColorMap::first	ColorMap.h	/^	ControlPoint* first;$/;"	m	class:ColorMap	access:private
ColorMap::getColorMap	ColorMap.cpp	/^Storage* ColorMap::getColorMap(void) const {$/;"	f	class:ColorMap	signature:(void) const
ColorMap::getColorMap	ColorMap.h	/^	Storage* getColorMap(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
ColorMap::getColorMapChangedCallbacks	ColorMap.cpp	/^Misc::CallbackList& ColorMap::getColorMapChangedCallbacks(void) {$/;"	f	class:ColorMap	signature:(void)
ColorMap::getColorMapChangedCallbacks	ColorMap.h	/^	Misc::CallbackList& getColorMapChangedCallbacks(void);$/;"	p	class:ColorMap	access:public	signature:(void)
ColorMap::getControlPointChangedCallbacks	ColorMap.cpp	/^Misc::CallbackList& ColorMap::getControlPointChangedCallbacks(void) {$/;"	f	class:ColorMap	signature:(void)
ColorMap::getControlPointChangedCallbacks	ColorMap.h	/^	Misc::CallbackList& getControlPointChangedCallbacks(void);$/;"	p	class:ColorMap	access:public	signature:(void)
ColorMap::getControlPointColor	ColorMap.cpp	/^RGBAColor* ColorMap::getControlPointColor(void) {$/;"	f	class:ColorMap	signature:(void)
ColorMap::getControlPointColor	ColorMap.h	/^	RGBAColor* getControlPointColor(void);$/;"	p	class:ColorMap	access:public	signature:(void)
ColorMap::getNumberOfControlPoints	ColorMap.cpp	/^int ColorMap::getNumberOfControlPoints(void) const {$/;"	f	class:ColorMap	signature:(void) const
ColorMap::getNumberOfControlPoints	ColorMap.h	/^	int getNumberOfControlPoints(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
ColorMap::getValueRange	ColorMap.cpp	/^const std::pair<double,double>& ColorMap::getValueRange(void) const {$/;"	f	class:ColorMap	signature:(void) const
ColorMap::getValueRange	ColorMap.h	/^	const std::pair<double,double>& getValueRange(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
ColorMap::insertControlPoint	ColorMap.cpp	/^void ColorMap::insertControlPoint(double _value) {$/;"	f	class:ColorMap	signature:(double _value)
ColorMap::insertControlPoint	ColorMap.h	/^	void insertControlPoint(double _value);$/;"	p	class:ColorMap	access:public	signature:(double _value)
ColorMap::isDragging	ColorMap.h	/^	bool isDragging;$/;"	m	class:ColorMap	access:private
ColorMap::last	ColorMap.h	/^	ControlPoint* last;$/;"	m	class:ColorMap	access:private
ColorMap::marginWidth	ColorMap.h	/^	GLfloat marginWidth;$/;"	m	class:ColorMap	access:private
ColorMap::pointerButtonDown	ColorMap.cpp	/^void ColorMap::pointerButtonDown(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
ColorMap::pointerButtonDown	ColorMap.h	/^	virtual void pointerButtonDown(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
ColorMap::pointerButtonUp	ColorMap.cpp	/^void ColorMap::pointerButtonUp(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
ColorMap::pointerButtonUp	ColorMap.h	/^	virtual void pointerButtonUp(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
ColorMap::pointerMotion	ColorMap.cpp	/^void ColorMap::pointerMotion(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
ColorMap::pointerMotion	ColorMap.h	/^	virtual void pointerMotion(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
ColorMap::preferredSize	ColorMap.h	/^	GLMotif::Vector preferredSize;$/;"	m	class:ColorMap	access:private
ColorMap::resize	ColorMap.cpp	/^void ColorMap::resize(const GLMotif::Box& _exterior) {$/;"	f	class:ColorMap	signature:(const GLMotif::Box& _exterior)
ColorMap::resize	ColorMap.h	/^	virtual void resize(const GLMotif::Box& _exterior);$/;"	p	class:ColorMap	access:public	signature:(const GLMotif::Box& _exterior)
ColorMap::selectControlPoint	ColorMap.cpp	/^void ColorMap::selectControlPoint(int i) {$/;"	f	class:ColorMap	signature:(int i)
ColorMap::selectControlPoint	ColorMap.h	/^	void selectControlPoint(int i);$/;"	p	class:ColorMap	access:public	signature:(int i)
ColorMap::setColorMap	ColorMap.cpp	/^void ColorMap::setColorMap(Storage* _storage) {$/;"	f	class:ColorMap	signature:(Storage* _storage)
ColorMap::setColorMap	ColorMap.h	/^	void setColorMap(Storage* _colorMap);$/;"	p	class:ColorMap	access:public	signature:(Storage* _colorMap)
ColorMap::setControlPointColor	ColorMap.cpp	/^void ColorMap::setControlPointColor(RGBAColor rgbaColor) {$/;"	f	class:ColorMap	signature:(RGBAColor rgbaColor)
ColorMap::setControlPointColor	ColorMap.cpp	/^void ColorMap::setControlPointColor(RGBAColor* _rgbaColor) {$/;"	f	class:ColorMap	signature:(RGBAColor* _rgbaColor)
ColorMap::setControlPointColor	ColorMap.h	/^	void setControlPointColor(RGBAColor _rgbaColor);$/;"	p	class:ColorMap	access:public	signature:(RGBAColor _rgbaColor)
ColorMap::setControlPointColor	ColorMap.h	/^	void setControlPointColor(RGBAColor* _rgbaColor);$/;"	p	class:ColorMap	access:public	signature:(RGBAColor* _rgbaColor)
ColorMap::setControlPointSize	ColorMap.cpp	/^void ColorMap::setControlPointSize(GLfloat _controlPointSize) {$/;"	f	class:ColorMap	signature:(GLfloat _controlPointSize)
ColorMap::setControlPointSize	ColorMap.h	/^	void setControlPointSize(GLfloat _controlPointSize);$/;"	p	class:ColorMap	access:public	signature:(GLfloat _controlPointSize)
ColorMap::setControlPointValue	ColorMap.cpp	/^void ColorMap::setControlPointValue(double _value) {$/;"	f	class:ColorMap	signature:(double _value)
ColorMap::setControlPointValue	ColorMap.h	/^	void setControlPointValue(double _value);$/;"	p	class:ColorMap	access:public	signature:(double _value)
ColorMap::setMarginWidth	ColorMap.cpp	/^void ColorMap::setMarginWidth(GLfloat _marginWidth) {$/;"	f	class:ColorMap	signature:(GLfloat _marginWidth)
ColorMap::setMarginWidth	ColorMap.h	/^	void setMarginWidth(GLfloat _marginWidth);$/;"	p	class:ColorMap	access:public	signature:(GLfloat _marginWidth)
ColorMap::setPreferredSize	ColorMap.cpp	/^void ColorMap::setPreferredSize(const GLMotif::Vector& _preferredSize) {$/;"	f	class:ColorMap	signature:(const GLMotif::Vector& _preferredSize)
ColorMap::setPreferredSize	ColorMap.h	/^	void setPreferredSize(const GLMotif::Vector& _preferredSize);$/;"	p	class:ColorMap	access:public	signature:(const GLMotif::Vector& _preferredSize)
ColorMap::updateControlPoints	ColorMap.cpp	/^void ColorMap::updateControlPoints(void) {$/;"	f	class:ColorMap	signature:(void)
ColorMap::updateControlPoints	ColorMap.h	/^	void updateControlPoints(void);$/;"	p	class:ColorMap	access:private	signature:(void)
ColorMap::valueRange	ColorMap.h	/^	std::pair<double,double> valueRange;$/;"	m	class:ColorMap	access:private
ColorMap::~ColorMap	ColorMap.cpp	/^ColorMap::~ColorMap(void) {$/;"	f	class:ColorMap	signature:(void)
ColorMap::~ColorMap	ColorMap.h	/^	virtual ~ColorMap(void);$/;"	p	class:ColorMap	access:public	signature:(void)
ColorMapCallbackData	ColorMapCallbackData.cpp	/^ColorMapCallbackData::ColorMapCallbackData() {$/;"	f	class:ColorMapCallbackData	signature:()
ColorMapCallbackData	ColorMapCallbackData.cpp	/^ColorMapCallbackData::ColorMapCallbackData(ColorMap* _colorMap) {$/;"	f	class:ColorMapCallbackData	signature:(ColorMap* _colorMap)
ColorMapCallbackData	ColorMapCallbackData.h	/^	ColorMapCallbackData();$/;"	p	class:ColorMapCallbackData	access:public	signature:()
ColorMapCallbackData	ColorMapCallbackData.h	/^	ColorMapCallbackData(ColorMap* _colorMap);$/;"	p	class:ColorMapCallbackData	access:public	signature:(ColorMap* _colorMap)
ColorMapCallbackData	ColorMapCallbackData.h	/^class ColorMapCallbackData : public Misc::CallbackData {$/;"	c	inherits:Misc::CallbackData
ColorMapCallbackData::ColorMapCallbackData	ColorMapCallbackData.cpp	/^ColorMapCallbackData::ColorMapCallbackData() {$/;"	f	class:ColorMapCallbackData	signature:()
ColorMapCallbackData::ColorMapCallbackData	ColorMapCallbackData.cpp	/^ColorMapCallbackData::ColorMapCallbackData(ColorMap* _colorMap) {$/;"	f	class:ColorMapCallbackData	signature:(ColorMap* _colorMap)
ColorMapCallbackData::ColorMapCallbackData	ColorMapCallbackData.h	/^	ColorMapCallbackData();$/;"	p	class:ColorMapCallbackData	access:public	signature:()
ColorMapCallbackData::ColorMapCallbackData	ColorMapCallbackData.h	/^	ColorMapCallbackData(ColorMap* _colorMap);$/;"	p	class:ColorMapCallbackData	access:public	signature:(ColorMap* _colorMap)
ColorMapCallbackData::colorMap	ColorMapCallbackData.h	/^	ColorMap* colorMap;$/;"	m	class:ColorMapCallbackData	access:public
ColorMapCallbackData::~ColorMapCallbackData	ColorMapCallbackData.cpp	/^ColorMapCallbackData::~ColorMapCallbackData() {$/;"	f	class:ColorMapCallbackData	signature:()
ColorMapCallbackData::~ColorMapCallbackData	ColorMapCallbackData.h	/^	~ColorMapCallbackData();$/;"	p	class:ColorMapCallbackData	access:public	signature:()
ColorMapChangedCallbackData	ColorMapChangedCallbackData.cpp	/^ColorMapChangedCallbackData::ColorMapChangedCallbackData() {$/;"	f	class:ColorMapChangedCallbackData	signature:()
ColorMapChangedCallbackData	ColorMapChangedCallbackData.cpp	/^ColorMapChangedCallbackData::ColorMapChangedCallbackData(ColorMap* colorMap) :$/;"	f	class:ColorMapChangedCallbackData	signature:(ColorMap* colorMap)
ColorMapChangedCallbackData	ColorMapChangedCallbackData.h	/^	ColorMapChangedCallbackData();$/;"	p	class:ColorMapChangedCallbackData	access:public	signature:()
ColorMapChangedCallbackData	ColorMapChangedCallbackData.h	/^	ColorMapChangedCallbackData(ColorMap* colorMap);$/;"	p	class:ColorMapChangedCallbackData	access:public	signature:(ColorMap* colorMap)
ColorMapChangedCallbackData	ColorMapChangedCallbackData.h	/^class ColorMapChangedCallbackData : public ColorMapCallbackData {$/;"	c	inherits:ColorMapCallbackData
ColorMapChangedCallbackData::ColorMapChangedCallbackData	ColorMapChangedCallbackData.cpp	/^ColorMapChangedCallbackData::ColorMapChangedCallbackData() {$/;"	f	class:ColorMapChangedCallbackData	signature:()
ColorMapChangedCallbackData::ColorMapChangedCallbackData	ColorMapChangedCallbackData.cpp	/^ColorMapChangedCallbackData::ColorMapChangedCallbackData(ColorMap* colorMap) :$/;"	f	class:ColorMapChangedCallbackData	signature:(ColorMap* colorMap)
ColorMapChangedCallbackData::ColorMapChangedCallbackData	ColorMapChangedCallbackData.h	/^	ColorMapChangedCallbackData();$/;"	p	class:ColorMapChangedCallbackData	access:public	signature:()
ColorMapChangedCallbackData::ColorMapChangedCallbackData	ColorMapChangedCallbackData.h	/^	ColorMapChangedCallbackData(ColorMap* colorMap);$/;"	p	class:ColorMapChangedCallbackData	access:public	signature:(ColorMap* colorMap)
ColorMapChangedCallbackData::~ColorMapChangedCallbackData	ColorMapChangedCallbackData.cpp	/^ColorMapChangedCallbackData::~ColorMapChangedCallbackData() {$/;"	f	class:ColorMapChangedCallbackData	signature:()
ColorMapChangedCallbackData::~ColorMapChangedCallbackData	ColorMapChangedCallbackData.h	/^	~ColorMapChangedCallbackData();$/;"	p	class:ColorMapChangedCallbackData	access:public	signature:()
ContourValues	ExampleVTKReader.h	/^  std::vector<double> ContourValues;$/;"	m	class:ExampleVTKReader	access:private
ContourVisible	ExampleVTKReader.h	/^  bool ContourVisible;$/;"	m	class:ExampleVTKReader	access:private
Contours	Contours.cpp	/^Contours::Contours(ExampleVTKReader * _ExampleVTKReader) :$/;"	f	class:Contours	signature:(ExampleVTKReader * _ExampleVTKReader)
Contours	Contours.h	/^    Contours(ExampleVTKReader * _ExampleVTKReader);$/;"	p	class:Contours	access:public	signature:(ExampleVTKReader * _ExampleVTKReader)
Contours	Contours.h	/^class Contours: public GLMotif::PopupWindow {$/;"	c	inherits:GLMotif::PopupWindow
Contours::Contours	Contours.cpp	/^Contours::Contours(ExampleVTKReader * _ExampleVTKReader) :$/;"	f	class:Contours	signature:(ExampleVTKReader * _ExampleVTKReader)
Contours::Contours	Contours.h	/^    Contours(ExampleVTKReader * _ExampleVTKReader);$/;"	p	class:Contours	access:public	signature:(ExampleVTKReader * _ExampleVTKReader)
Contours::alphaComponent	Contours.h	/^    ScalarWidget* alphaComponent;$/;"	m	class:Contours	access:private
Contours::alphaControlPointChangedCallback	Contours.cpp	/^void Contours::alphaControlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Contours	signature:(Misc::CallbackData* _callbackData)
Contours::alphaControlPointChangedCallback	Contours.h	/^    void alphaControlPointChangedCallback(Misc::CallbackData* _callbackData);$/;"	p	class:Contours	access:private	signature:(Misc::CallbackData* _callbackData)
Contours::colorPane	Contours.h	/^    GLMotif::Blind * colorPane;$/;"	m	class:Contours	access:private
Contours::colorSliders	Contours.h	/^    GLMotif::Slider * colorSliders[3];$/;"	m	class:Contours	access:private
Contours::controlPointChangedCallback	Contours.cpp	/^void Contours::controlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Contours	signature:(Misc::CallbackData* _callbackData)
Contours::controlPointChangedCallback	Contours.h	/^    void controlPointChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Contours	access:private	signature:(Misc::CallbackData * callbackData)
Contours::createAlphaComponent	Contours.cpp	/^void Contours::createAlphaComponent(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& contoursDialog) {$/;"	f	class:Contours	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& contoursDialog)
Contours::createAlphaComponent	Contours.h	/^    void createAlphaComponent(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:Contours	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Contours::createButtonBox	Contours.cpp	/^GLMotif::RowColumn * Contours::createButtonBox(GLMotif::RowColumn * & colorMapDialog) {$/;"	f	class:Contours	signature:(GLMotif::RowColumn * & colorMapDialog)
Contours::createButtonBox	Contours.h	/^    GLMotif::RowColumn * createButtonBox(GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Contours	access:private	signature:(GLMotif::RowColumn * & colorMapDialog)
Contours::createContoursDialog	Contours.cpp	/^void Contours::createContoursDialog(const GLMotif::StyleSheet& styleSheet) {$/;"	f	class:Contours	signature:(const GLMotif::StyleSheet& styleSheet)
Contours::createContoursDialog	Contours.h	/^    void createContoursDialog(const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Contours	access:private	signature:(const GLMotif::StyleSheet & styleSheet)
Contours::createXContours	Contours.cpp	/^void Contours::createXContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Contours	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
Contours::createXContours	Contours.h	/^    void createXContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Contours	access:private	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
Contours::createXYZContours	Contours.cpp	/^void Contours::createXYZContours(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Contours	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Contours::createXYZContours	Contours.h	/^    void createXYZContours(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Contours	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Contours::createYContours	Contours.cpp	/^void Contours::createYContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Contours	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
Contours::createYContours	Contours.h	/^    void createYContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Contours	access:private	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
Contours::createZContours	Contours.cpp	/^void Contours::createZContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Contours	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
Contours::createZContours	Contours.h	/^    void createZContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Contours	access:private	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
Contours::exampleVTKReader	Contours.h	/^    ExampleVTKReader * exampleVTKReader;$/;"	m	class:Contours	access:public
Contours::getAlphaChangedCallbacks	Contours.cpp	/^Misc::CallbackList& Contours::getAlphaChangedCallbacks(void) {$/;"	f	class:Contours	signature:(void)
Contours::getAlphaChangedCallbacks	Contours.h	/^    Misc::CallbackList& getAlphaChangedCallbacks(void);$/;"	p	class:Contours	access:public	signature:(void)
Contours::getContourValues	Contours.cpp	/^std::vector<double> Contours::getContourValues(void)$/;"	f	class:Contours	signature:(void)
Contours::getContourValues	Contours.h	/^    std::vector<double> getContourValues(void);$/;"	p	class:Contours	access:public	signature:(void)
Contours::initialize	Contours.cpp	/^void Contours::initialize(void) {$/;"	f	class:Contours	signature:(void)
Contours::initialize	Contours.h	/^    void initialize(void);$/;"	p	class:Contours	access:private	signature:(void)
Contours::removeControlPointCallback	Contours.cpp	/^void Contours::removeControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Contours	signature:(Misc::CallbackData* _callbackData)
Contours::removeControlPointCallback	Contours.h	/^    void removeControlPointCallback(Misc::CallbackData * callbackData);$/;"	p	class:Contours	access:private	signature:(Misc::CallbackData * callbackData)
Contours::sliderCallback	Contours.cpp	/^void Contours::sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData) {$/;"	f	class:Contours	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
Contours::sliderCallback	Contours.h	/^    void sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData);$/;"	p	class:Contours	access:public	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
Contours::toggleSelectCallback	Contours.cpp	/^void Contours::toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:Contours	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
Contours::toggleSelectCallback	Contours.h	/^    void toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData);$/;"	p	class:Contours	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData)
Contours::xSliceValue	Contours.h	/^    GLMotif::TextField* xSliceValue;$/;"	m	class:Contours	access:private
Contours::ySliceValue	Contours.h	/^    GLMotif::TextField* ySliceValue;$/;"	m	class:Contours	access:private
Contours::zSliceValue	Contours.h	/^    GLMotif::TextField* zSliceValue;$/;"	m	class:Contours	access:private
Contours::~Contours	Contours.cpp	/^Contours::~Contours(void) {$/;"	f	class:Contours	signature:(void)
Contours::~Contours	Contours.h	/^    virtual ~Contours(void);$/;"	p	class:Contours	access:public	signature:(void)
ContoursDialog	ExampleVTKReader.h	/^  Contours* ContoursDialog;$/;"	m	class:ExampleVTKReader	access:private
ControlPoint	ControlPoint.cpp	/^ControlPoint::ControlPoint() {$/;"	f	class:ControlPoint	signature:()
ControlPoint	ControlPoint.cpp	/^ControlPoint::ControlPoint(double _value, RGBAColor* _rgbaColor) {$/;"	f	class:ControlPoint	signature:(double _value, RGBAColor* _rgbaColor)
ControlPoint	ControlPoint.h	/^	ControlPoint();$/;"	p	class:ControlPoint	access:public	signature:()
ControlPoint	ControlPoint.h	/^	ControlPoint(double _value, RGBAColor* _rgbaColor);$/;"	p	class:ControlPoint	access:public	signature:(double _value, RGBAColor* _rgbaColor)
ControlPoint	ControlPoint.h	/^class ControlPoint {$/;"	c
ControlPoint::ControlPoint	ControlPoint.cpp	/^ControlPoint::ControlPoint() {$/;"	f	class:ControlPoint	signature:()
ControlPoint::ControlPoint	ControlPoint.cpp	/^ControlPoint::ControlPoint(double _value, RGBAColor* _rgbaColor) {$/;"	f	class:ControlPoint	signature:(double _value, RGBAColor* _rgbaColor)
ControlPoint::ControlPoint	ControlPoint.h	/^	ControlPoint();$/;"	p	class:ControlPoint	access:public	signature:()
ControlPoint::ControlPoint	ControlPoint.h	/^	ControlPoint(double _value, RGBAColor* _rgbaColor);$/;"	p	class:ControlPoint	access:public	signature:(double _value, RGBAColor* _rgbaColor)
ControlPoint::left	ControlPoint.h	/^	ControlPoint* left;$/;"	m	class:ControlPoint	access:public
ControlPoint::rgbaColor	ControlPoint.h	/^	RGBAColor* rgbaColor;$/;"	m	class:ControlPoint	access:public
ControlPoint::right	ControlPoint.h	/^	ControlPoint* right;$/;"	m	class:ControlPoint	access:public
ControlPoint::value	ControlPoint.h	/^	double value;$/;"	m	class:ControlPoint	access:public
ControlPoint::x	ControlPoint.h	/^	GLfloat x, y;$/;"	m	class:ControlPoint	access:public
ControlPoint::y	ControlPoint.h	/^	GLfloat x, y;$/;"	m	class:ControlPoint	access:public
ControlPoint::~ControlPoint	ControlPoint.cpp	/^ControlPoint::~ControlPoint() {$/;"	f	class:ControlPoint	signature:()
ControlPoint::~ControlPoint	ControlPoint.h	/^	~ControlPoint();$/;"	p	class:ControlPoint	access:public	signature:()
ControlPointChangedCallbackData	ControlPointChangedCallbackData.cpp	/^ControlPointChangedCallbackData::ControlPointChangedCallbackData() {$/;"	f	class:ControlPointChangedCallbackData	signature:()
ControlPointChangedCallbackData	ControlPointChangedCallbackData.cpp	/^ControlPointChangedCallbackData::ControlPointChangedCallbackData(ColorMap* _colorMap, ControlPoint* _previousControlPoint,$/;"	f	class:ControlPointChangedCallbackData	signature:(ColorMap* _colorMap, ControlPoint* _previousControlPoint, ControlPoint* _currentControlPoint)
ControlPointChangedCallbackData	ControlPointChangedCallbackData.h	/^	ControlPointChangedCallbackData();$/;"	p	class:ControlPointChangedCallbackData	access:public	signature:()
ControlPointChangedCallbackData	ControlPointChangedCallbackData.h	/^	ControlPointChangedCallbackData(ColorMap* _colorMap, ControlPoint* _previousControlPoint, ControlPoint* _currentControlPoint);$/;"	p	class:ControlPointChangedCallbackData	access:public	signature:(ColorMap* _colorMap, ControlPoint* _previousControlPoint, ControlPoint* _currentControlPoint)
ControlPointChangedCallbackData	ControlPointChangedCallbackData.h	/^class ControlPointChangedCallbackData : public ColorMapCallbackData {$/;"	c	inherits:ColorMapCallbackData
ControlPointChangedCallbackData::ControlPointChangedCallbackData	ControlPointChangedCallbackData.cpp	/^ControlPointChangedCallbackData::ControlPointChangedCallbackData() {$/;"	f	class:ControlPointChangedCallbackData	signature:()
ControlPointChangedCallbackData::ControlPointChangedCallbackData	ControlPointChangedCallbackData.cpp	/^ControlPointChangedCallbackData::ControlPointChangedCallbackData(ColorMap* _colorMap, ControlPoint* _previousControlPoint,$/;"	f	class:ControlPointChangedCallbackData	signature:(ColorMap* _colorMap, ControlPoint* _previousControlPoint, ControlPoint* _currentControlPoint)
ControlPointChangedCallbackData::ControlPointChangedCallbackData	ControlPointChangedCallbackData.h	/^	ControlPointChangedCallbackData();$/;"	p	class:ControlPointChangedCallbackData	access:public	signature:()
ControlPointChangedCallbackData::ControlPointChangedCallbackData	ControlPointChangedCallbackData.h	/^	ControlPointChangedCallbackData(ColorMap* _colorMap, ControlPoint* _previousControlPoint, ControlPoint* _currentControlPoint);$/;"	p	class:ControlPointChangedCallbackData	access:public	signature:(ColorMap* _colorMap, ControlPoint* _previousControlPoint, ControlPoint* _currentControlPoint)
ControlPointChangedCallbackData::currentControlPoint	ControlPointChangedCallbackData.h	/^	ControlPoint* currentControlPoint;$/;"	m	class:ControlPointChangedCallbackData	access:private
ControlPointChangedCallbackData::getCurrentControlPoint	ControlPointChangedCallbackData.cpp	/^ControlPoint* ControlPointChangedCallbackData::getCurrentControlPoint(void) {$/;"	f	class:ControlPointChangedCallbackData	signature:(void)
ControlPointChangedCallbackData::getCurrentControlPoint	ControlPointChangedCallbackData.h	/^	ControlPoint* getCurrentControlPoint(void);$/;"	p	class:ControlPointChangedCallbackData	access:public	signature:(void)
ControlPointChangedCallbackData::previousControlPoint	ControlPointChangedCallbackData.h	/^	ControlPoint* previousControlPoint;$/;"	m	class:ControlPointChangedCallbackData	access:private
ControlPointChangedCallbackData::~ControlPointChangedCallbackData	ControlPointChangedCallbackData.cpp	/^ControlPointChangedCallbackData::~ControlPointChangedCallbackData() {$/;"	f	class:ControlPointChangedCallbackData	signature:()
ControlPointChangedCallbackData::~ControlPointChangedCallbackData	ControlPointChangedCallbackData.h	/^	~ControlPointChangedCallbackData();$/;"	p	class:ControlPointChangedCallbackData	access:public	signature:()
DAVINCI	ColorMap.h	/^static float DAVINCI[11][4] = {$/;"	v
DOWN_RAMP	ScalarWidget.h	22;"	d
DataBounds	ExampleVTKReader.h	/^  double* DataBounds;$/;"	m	class:ExampleVTKReader	access:private
DataDimensions	ExampleVTKReader.h	/^  int* DataDimensions;$/;"	m	class:ExampleVTKReader	access:private
DataExtent	ExampleVTKReader.h	/^  int* DataExtent;$/;"	m	class:ExampleVTKReader	access:private
DataItem	DataItem.cpp	/^ExampleVTKReader::DataItem::DataItem(void)$/;"	f	class:ExampleVTKReader::DataItem	signature:(void)
DataItem	DataItem.h	/^  DataItem(void);$/;"	p	struct:ExampleVTKReader::DataItem	access:public	signature:(void)
DataItem	DataItem.h	/^struct ExampleVTKReader::DataItem : public GLObject::DataItem$/;"	s	class:ExampleVTKReader	inherits:GLObject::DataItem
DataOrigin	ExampleVTKReader.h	/^  double* DataOrigin;$/;"	m	class:ExampleVTKReader	access:private
DataScalarRange	ExampleVTKReader.h	/^  double* DataScalarRange;$/;"	m	class:ExampleVTKReader	access:private
DataSpacing	ExampleVTKReader.h	/^  double* DataSpacing;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader	ExampleVTKReader.cpp	/^ExampleVTKReader::ExampleVTKReader(int& argc,char**& argv)$/;"	f	class:ExampleVTKReader	signature:(int& argc,char**& argv)
ExampleVTKReader	ExampleVTKReader.h	/^  ExampleVTKReader(int& argc,char**& argv);$/;"	p	class:ExampleVTKReader	access:public	signature:(int& argc,char**& argv)
ExampleVTKReader	ExampleVTKReader.h	/^class ExampleVTKReader:public Vrui::Application,public GLObject$/;"	c	inherits:Vrui::Application,GLObject
ExampleVTKReader::AIsosurface	ExampleVTKReader.h	/^  bool AIsosurface;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::BIsosurface	ExampleVTKReader.h	/^  bool BIsosurface;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::BaseLocatorList	ExampleVTKReader.h	/^  typedef std::vector<BaseLocator*> BaseLocatorList;$/;"	t	class:ExampleVTKReader	access:private
ExampleVTKReader::CIsosurface	ExampleVTKReader.h	/^  bool CIsosurface;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::Center	ExampleVTKReader.h	/^  Vrui::Point Center;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::ClippingPlanes	ExampleVTKReader.h	/^  ClippingPlane * ClippingPlanes;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::ContourValues	ExampleVTKReader.h	/^  std::vector<double> ContourValues;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::ContourVisible	ExampleVTKReader.h	/^  bool ContourVisible;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::ContoursDialog	ExampleVTKReader.h	/^  Contours* ContoursDialog;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::DataBounds	ExampleVTKReader.h	/^  double* DataBounds;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::DataDimensions	ExampleVTKReader.h	/^  int* DataDimensions;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::DataExtent	ExampleVTKReader.h	/^  int* DataExtent;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::DataItem	DataItem.h	/^struct ExampleVTKReader::DataItem : public GLObject::DataItem$/;"	s	class:ExampleVTKReader	inherits:GLObject::DataItem
ExampleVTKReader::DataItem::DataItem	DataItem.cpp	/^ExampleVTKReader::DataItem::DataItem(void)$/;"	f	class:ExampleVTKReader::DataItem	signature:(void)
ExampleVTKReader::DataItem::DataItem	DataItem.h	/^  DataItem(void);$/;"	p	struct:ExampleVTKReader::DataItem	access:public	signature:(void)
ExampleVTKReader::DataItem::aContour	DataItem.h	/^  vtkSmartPointer<vtkContourFilter> aContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::aContourMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> aContourMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actor	DataItem.h	/^  vtkSmartPointer<vtkActor> actor;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorAContour	DataItem.h	/^  vtkSmartPointer<vtkActor> actorAContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorBContour	DataItem.h	/^  vtkSmartPointer<vtkActor> actorBContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorCContour	DataItem.h	/^  vtkSmartPointer<vtkActor> actorCContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorOutline	DataItem.h	/^  vtkSmartPointer<vtkActor> actorOutline;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorVolume	DataItem.h	/^  vtkSmartPointer<vtkVolume> actorVolume;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorXContourCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorXContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorXCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorXCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorYContourCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorYContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorYCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorYCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorZContourCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorZContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::actorZCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorZCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::bContour	DataItem.h	/^  vtkSmartPointer<vtkContourFilter> bContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::bContourMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> bContourMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::cContour	DataItem.h	/^  vtkSmartPointer<vtkContourFilter> cContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::cContourMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> cContourMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::colorFunction	DataItem.h	/^  vtkSmartPointer<vtkColorTransferFunction> colorFunction;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::contourActor	DataItem.h	/^  vtkSmartPointer<vtkActor> contourActor;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::contourFilter	DataItem.h	/^  vtkSmartPointer<vtkContourFilter> contourFilter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::externalVTKWidget	DataItem.h	/^  vtkSmartPointer<ExternalVTKWidget> externalVTKWidget;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::flashlight	DataItem.h	/^  vtkSmartPointer<vtkLight> flashlight;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::freeSliceActor	DataItem.h	/^  vtkSmartPointer<vtkActor> freeSliceActor;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::freeSliceCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> freeSliceCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::freeSliceMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> freeSliceMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::isosurfaceLUT	DataItem.h	/^  vtkSmartPointer<vtkLookupTable> isosurfaceLUT;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::modelLUT	DataItem.h	/^  vtkSmartPointer<vtkLookupTable> modelLUT;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::opacityFunction	DataItem.h	/^  vtkSmartPointer<vtkPiecewiseFunction> opacityFunction;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::propertyVolume	DataItem.h	/^  vtkSmartPointer<vtkVolumeProperty> propertyVolume;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::sliceLUT	DataItem.h	/^  vtkSmartPointer<vtkLookupTable> sliceLUT;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::xContourCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> xContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::xCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> xCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::xCutterMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> xCutterMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::yContourCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> yContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::yCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> yCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::yCutterMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> yCutterMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::zContourCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> zContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::zCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> zCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::zCutterMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> zCutterMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
ExampleVTKReader::DataItem::~DataItem	DataItem.cpp	/^ExampleVTKReader::DataItem::~DataItem(void)$/;"	f	class:ExampleVTKReader::DataItem	signature:(void)
ExampleVTKReader::DataItem::~DataItem	DataItem.h	/^  virtual ~DataItem(void);$/;"	p	struct:ExampleVTKReader::DataItem	access:public	signature:(void)
ExampleVTKReader::DataOrigin	ExampleVTKReader.h	/^  double* DataOrigin;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::DataScalarRange	ExampleVTKReader.h	/^  double* DataScalarRange;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::DataSpacing	ExampleVTKReader.h	/^  double* DataSpacing;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::ExampleVTKReader	ExampleVTKReader.cpp	/^ExampleVTKReader::ExampleVTKReader(int& argc,char**& argv)$/;"	f	class:ExampleVTKReader	signature:(int& argc,char**& argv)
ExampleVTKReader::ExampleVTKReader	ExampleVTKReader.h	/^  ExampleVTKReader(int& argc,char**& argv);$/;"	p	class:ExampleVTKReader	access:public	signature:(int& argc,char**& argv)
ExampleVTKReader::FileName	ExampleVTKReader.h	/^  char* FileName;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::FirstFrame	ExampleVTKReader.h	/^  bool FirstFrame;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::FlashlightDirection	ExampleVTKReader.h	/^  double * FlashlightDirection;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::FlashlightPosition	ExampleVTKReader.h	/^  double * FlashlightPosition;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::FlashlightSwitch	ExampleVTKReader.h	/^  int * FlashlightSwitch;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::FreeSliceNormal	ExampleVTKReader.h	/^  double * FreeSliceNormal;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::FreeSliceOrigin	ExampleVTKReader.h	/^  double * FreeSliceOrigin;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::FreeSliceVisibility	ExampleVTKReader.h	/^  int * FreeSliceVisibility;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::Histogram	ExampleVTKReader.h	/^  float* Histogram;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::IsosurfaceColormap	ExampleVTKReader.h	/^  double* IsosurfaceColormap;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::NumberOfClippingPlanes	ExampleVTKReader.h	/^  int NumberOfClippingPlanes;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::Opacity	ExampleVTKReader.h	/^  double Opacity;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::Outline	ExampleVTKReader.h	/^  bool Outline;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::Radius	ExampleVTKReader.h	/^  Vrui::Scalar Radius;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::RepresentationType	ExampleVTKReader.h	/^  int RepresentationType;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::RequestedRenderMode	ExampleVTKReader.h	/^  int RequestedRenderMode;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::SliceColormap	ExampleVTKReader.h	/^  double* SliceColormap;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::Verbose	ExampleVTKReader.h	/^  bool Verbose;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::Volume	ExampleVTKReader.h	/^  bool Volume;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::VolumeColormap	ExampleVTKReader.h	/^  double* VolumeColormap;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::XContourSlice	ExampleVTKReader.h	/^  bool XContourSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::XSlice	ExampleVTKReader.h	/^  bool XSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::YContourSlice	ExampleVTKReader.h	/^  bool YContourSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::YSlice	ExampleVTKReader.h	/^  bool YSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::ZContourSlice	ExampleVTKReader.h	/^  bool ZContourSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::ZSlice	ExampleVTKReader.h	/^  bool ZSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::aIsosurface	ExampleVTKReader.h	/^  float aIsosurface;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::alphaChangedCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::alphaChangedCallback(Misc::CallbackData* callBackData)$/;"	f	class:ExampleVTKReader	signature:(Misc::CallbackData* callBackData)
ExampleVTKReader::alphaChangedCallback	ExampleVTKReader.h	/^  void alphaChangedCallback(Misc::CallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Misc::CallbackData* callBackData)
ExampleVTKReader::analysisTool	ExampleVTKReader.h	/^  int analysisTool;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::bIsosurface	ExampleVTKReader.h	/^  float bIsosurface;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::baseLocators	ExampleVTKReader.h	/^  BaseLocatorList baseLocators;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::cIsosurface	ExampleVTKReader.h	/^  float cIsosurface;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::centerDisplayCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::centerDisplayCallback(Misc::CallbackData* callBackData)$/;"	f	class:ExampleVTKReader	signature:(Misc::CallbackData* callBackData)
ExampleVTKReader::centerDisplayCallback	ExampleVTKReader.h	/^  void centerDisplayCallback(Misc::CallbackData* cbData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Misc::CallbackData* cbData)
ExampleVTKReader::changeAlphaCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::changeAlphaCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::RadioBox::ValueChangedCallbackData* callBackData)
ExampleVTKReader::changeAlphaCallback	ExampleVTKReader.h	/^  void changeAlphaCallback(GLMotif::RadioBox::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::RadioBox::ValueChangedCallbackData* callBackData)
ExampleVTKReader::changeAnalysisToolsCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::changeAnalysisToolsCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::changeAnalysisToolsCallback	ExampleVTKReader.h	/^  void changeAnalysisToolsCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::changeColorMapCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::changeColorMapCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::RadioBox::ValueChangedCallbackData* callBackData)
ExampleVTKReader::changeColorMapCallback	ExampleVTKReader.h	/^  void changeColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::RadioBox::ValueChangedCallbackData* callBackData)
ExampleVTKReader::changeRepresentationCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::changeRepresentationCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::changeRepresentationCallback	ExampleVTKReader.h	/^  void changeRepresentationCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::contourValueChangedCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::contourValueChangedCallback(Misc::CallbackData* callBackData)$/;"	f	class:ExampleVTKReader	signature:(Misc::CallbackData* callBackData)
ExampleVTKReader::contourValueChangedCallback	ExampleVTKReader.h	/^  void contourValueChangedCallback(Misc::CallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Misc::CallbackData* callBackData)
ExampleVTKReader::createAlphaSubMenu	ExampleVTKReader.cpp	/^GLMotif::Popup*  ExampleVTKReader::createAlphaSubMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::createAlphaSubMenu	ExampleVTKReader.h	/^  GLMotif::Popup*  createAlphaSubMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
ExampleVTKReader::createAnalysisToolsMenu	ExampleVTKReader.cpp	/^GLMotif::Popup * ExampleVTKReader::createAnalysisToolsMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::createAnalysisToolsMenu	ExampleVTKReader.h	/^  GLMotif::Popup* createAnalysisToolsMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
ExampleVTKReader::createColorMapSubMenu	ExampleVTKReader.cpp	/^GLMotif::Popup* ExampleVTKReader::createColorMapSubMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::createColorMapSubMenu	ExampleVTKReader.h	/^  GLMotif::Popup*  createColorMapSubMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
ExampleVTKReader::createMainMenu	ExampleVTKReader.cpp	/^GLMotif::PopupMenu* ExampleVTKReader::createMainMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::createMainMenu	ExampleVTKReader.h	/^  GLMotif::PopupMenu* createMainMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
ExampleVTKReader::createRenderingDialog	ExampleVTKReader.cpp	/^GLMotif::PopupWindow* ExampleVTKReader::createRenderingDialog(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::createRenderingDialog	ExampleVTKReader.h	/^  GLMotif::PopupWindow* createRenderingDialog(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
ExampleVTKReader::createRepresentationMenu	ExampleVTKReader.cpp	/^GLMotif::Popup* ExampleVTKReader::createRepresentationMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::createRepresentationMenu	ExampleVTKReader.h	/^  GLMotif::Popup* createRepresentationMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
ExampleVTKReader::createWidgetsMenu	ExampleVTKReader.cpp	/^GLMotif::Popup * ExampleVTKReader::createWidgetsMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::createWidgetsMenu	ExampleVTKReader.h	/^  GLMotif::Popup* createWidgetsMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
ExampleVTKReader::display	ExampleVTKReader.cpp	/^void ExampleVTKReader::display(GLContextData& contextData) const$/;"	f	class:ExampleVTKReader	signature:(GLContextData& contextData) const
ExampleVTKReader::display	ExampleVTKReader.h	/^  virtual void display(GLContextData& contextData) const;$/;"	p	class:ExampleVTKReader	access:public	signature:(GLContextData& contextData) const
ExampleVTKReader::frame	ExampleVTKReader.cpp	/^void ExampleVTKReader::frame(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::frame	ExampleVTKReader.h	/^  virtual void frame(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::freeSlicePlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> freeSlicePlane;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::getClippingPlanes	ExampleVTKReader.cpp	/^ClippingPlane * ExampleVTKReader::getClippingPlanes(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getClippingPlanes	ExampleVTKReader.h	/^  ClippingPlane * getClippingPlanes(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getContourValues	ExampleVTKReader.cpp	/^std::vector<double> ExampleVTKReader::getContourValues(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getContourValues	ExampleVTKReader.h	/^  std::vector<double> getContourValues();$/;"	p	class:ExampleVTKReader	access:public	signature:()
ExampleVTKReader::getDataIncrement	ExampleVTKReader.cpp	/^float ExampleVTKReader::getDataIncrement(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getDataIncrement	ExampleVTKReader.h	/^  float getDataIncrement(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getDataMaximum	ExampleVTKReader.cpp	/^float ExampleVTKReader::getDataMaximum(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getDataMaximum	ExampleVTKReader.h	/^  float getDataMaximum(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getDataMidPoint	ExampleVTKReader.cpp	/^float ExampleVTKReader::getDataMidPoint(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getDataMidPoint	ExampleVTKReader.h	/^  float getDataMidPoint(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getDataMinimum	ExampleVTKReader.cpp	/^float ExampleVTKReader::getDataMinimum(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getDataMinimum	ExampleVTKReader.h	/^  float getDataMinimum(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getFileName	ExampleVTKReader.cpp	/^const char* ExampleVTKReader::getFileName(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getFileName	ExampleVTKReader.h	/^  const char* getFileName(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getFlashlightDirection	ExampleVTKReader.cpp	/^double * ExampleVTKReader::getFlashlightDirection(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getFlashlightDirection	ExampleVTKReader.h	/^  double * getFlashlightDirection(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getFlashlightPosition	ExampleVTKReader.cpp	/^double * ExampleVTKReader::getFlashlightPosition(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getFlashlightPosition	ExampleVTKReader.h	/^  double * getFlashlightPosition(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getFlashlightSwitch	ExampleVTKReader.cpp	/^int * ExampleVTKReader::getFlashlightSwitch(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getFlashlightSwitch	ExampleVTKReader.h	/^  int * getFlashlightSwitch(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getFreeSliceNormal	ExampleVTKReader.cpp	/^double * ExampleVTKReader::getFreeSliceNormal(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getFreeSliceNormal	ExampleVTKReader.h	/^  double * getFreeSliceNormal(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getFreeSliceOrigin	ExampleVTKReader.cpp	/^double * ExampleVTKReader::getFreeSliceOrigin(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getFreeSliceOrigin	ExampleVTKReader.h	/^  double * getFreeSliceOrigin(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getFreeSliceVisibility	ExampleVTKReader.cpp	/^int * ExampleVTKReader::getFreeSliceVisibility(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getFreeSliceVisibility	ExampleVTKReader.h	/^  int * getFreeSliceVisibility(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getHeight	ExampleVTKReader.cpp	/^int ExampleVTKReader::getHeight(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getHeight	ExampleVTKReader.h	/^  int getHeight(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getHistogram	ExampleVTKReader.cpp	/^float * ExampleVTKReader::getHistogram(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getHistogram	ExampleVTKReader.h	/^  float * getHistogram();$/;"	p	class:ExampleVTKReader	access:public	signature:()
ExampleVTKReader::getLength	ExampleVTKReader.cpp	/^int ExampleVTKReader::getLength(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getLength	ExampleVTKReader.h	/^  int getLength(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getNumberOfClippingPlanes	ExampleVTKReader.cpp	/^int ExampleVTKReader::getNumberOfClippingPlanes(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getNumberOfClippingPlanes	ExampleVTKReader.h	/^  int getNumberOfClippingPlanes(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getRequestedRenderMode	ExampleVTKReader.cpp	/^int ExampleVTKReader::getRequestedRenderMode(void) const$/;"	f	class:ExampleVTKReader	signature:(void) const
ExampleVTKReader::getRequestedRenderMode	ExampleVTKReader.h	/^  int getRequestedRenderMode(void) const;$/;"	p	class:ExampleVTKReader	access:public	signature:(void) const
ExampleVTKReader::getVerbose	ExampleVTKReader.cpp	/^bool ExampleVTKReader::getVerbose(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getVerbose	ExampleVTKReader.h	/^  bool getVerbose(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::getWidth	ExampleVTKReader.cpp	/^int ExampleVTKReader::getWidth(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::getWidth	ExampleVTKReader.h	/^  int getWidth(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::initContext	ExampleVTKReader.cpp	/^void ExampleVTKReader::initContext(GLContextData& contextData) const$/;"	f	class:ExampleVTKReader	signature:(GLContextData& contextData) const
ExampleVTKReader::initContext	ExampleVTKReader.h	/^  virtual void initContext(GLContextData& contextData) const;$/;"	p	class:ExampleVTKReader	access:public	signature:(GLContextData& contextData) const
ExampleVTKReader::initialize	ExampleVTKReader.cpp	/^void ExampleVTKReader::initialize(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::initialize	ExampleVTKReader.h	/^  void initialize(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::isosurfacesDialog	ExampleVTKReader.h	/^  Isosurfaces* isosurfacesDialog;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::mainMenu	ExampleVTKReader.h	/^  GLMotif::PopupMenu* mainMenu; \/\/ The program's main menu$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::opacitySliderCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::opacitySliderCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::Slider::ValueChangedCallbackData* callBackData)
ExampleVTKReader::opacitySliderCallback	ExampleVTKReader.h	/^  void opacitySliderCallback(GLMotif::Slider::ValueChangedCallbackData* cbData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::Slider::ValueChangedCallbackData* cbData)
ExampleVTKReader::opacityValue	ExampleVTKReader.h	/^  GLMotif::TextField* opacityValue;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::renderingDialog	ExampleVTKReader.h	/^  GLMotif::PopupWindow* renderingDialog;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::setAIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::setAIsosurface(float aIsosurface)$/;"	f	class:ExampleVTKReader	signature:(float aIsosurface)
ExampleVTKReader::setAIsosurface	ExampleVTKReader.h	/^  void setAIsosurface(float aIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(float aIsosurface)
ExampleVTKReader::setBIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::setBIsosurface(float bIsosurface)$/;"	f	class:ExampleVTKReader	signature:(float bIsosurface)
ExampleVTKReader::setBIsosurface	ExampleVTKReader.h	/^  void setBIsosurface(float bIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(float bIsosurface)
ExampleVTKReader::setCIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::setCIsosurface(float cIsosurface)$/;"	f	class:ExampleVTKReader	signature:(float cIsosurface)
ExampleVTKReader::setCIsosurface	ExampleVTKReader.h	/^  void setCIsosurface(float cIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(float cIsosurface)
ExampleVTKReader::setContourVisible	ExampleVTKReader.cpp	/^void ExampleVTKReader::setContourVisible(bool visible)$/;"	f	class:ExampleVTKReader	signature:(bool visible)
ExampleVTKReader::setContourVisible	ExampleVTKReader.h	/^  void setContourVisible(bool visible);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool visible)
ExampleVTKReader::setFileName	ExampleVTKReader.cpp	/^void ExampleVTKReader::setFileName(const char* name)$/;"	f	class:ExampleVTKReader	signature:(const char* name)
ExampleVTKReader::setFileName	ExampleVTKReader.h	/^  void setFileName(const char* name);$/;"	p	class:ExampleVTKReader	access:public	signature:(const char* name)
ExampleVTKReader::setIsosurfaceColorMapChanged	ExampleVTKReader.h	/^  void setIsosurfaceColorMapChanged(bool SliceColorMapChanged);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool SliceColorMapChanged)
ExampleVTKReader::setRequestedRenderMode	ExampleVTKReader.cpp	/^void ExampleVTKReader::setRequestedRenderMode(int mode)$/;"	f	class:ExampleVTKReader	signature:(int mode)
ExampleVTKReader::setRequestedRenderMode	ExampleVTKReader.h	/^  void setRequestedRenderMode(int mode);$/;"	p	class:ExampleVTKReader	access:public	signature:(int mode)
ExampleVTKReader::setSliceColorMapChanged	ExampleVTKReader.h	/^  void setSliceColorMapChanged(bool SliceColorMapChanged);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool SliceColorMapChanged)
ExampleVTKReader::setVerbose	ExampleVTKReader.cpp	/^void ExampleVTKReader::setVerbose(bool verbose)$/;"	f	class:ExampleVTKReader	signature:(bool verbose)
ExampleVTKReader::setVerbose	ExampleVTKReader.h	/^  void setVerbose(bool);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool)
ExampleVTKReader::setXContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setXContourSlice(int xSlice)$/;"	f	class:ExampleVTKReader	signature:(int xSlice)
ExampleVTKReader::setXContourSlice	ExampleVTKReader.h	/^  void setXContourSlice(int xSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int xSlice)
ExampleVTKReader::setXSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setXSlice(int xSlice)$/;"	f	class:ExampleVTKReader	signature:(int xSlice)
ExampleVTKReader::setXSlice	ExampleVTKReader.h	/^  void setXSlice(int xSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int xSlice)
ExampleVTKReader::setYContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setYContourSlice(int ySlice)$/;"	f	class:ExampleVTKReader	signature:(int ySlice)
ExampleVTKReader::setYContourSlice	ExampleVTKReader.h	/^  void setYContourSlice(int ySlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int ySlice)
ExampleVTKReader::setYSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setYSlice(int ySlice)$/;"	f	class:ExampleVTKReader	signature:(int ySlice)
ExampleVTKReader::setYSlice	ExampleVTKReader.h	/^  void setYSlice(int ySlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int ySlice)
ExampleVTKReader::setZContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setZContourSlice(int zSlice)$/;"	f	class:ExampleVTKReader	signature:(int zSlice)
ExampleVTKReader::setZContourSlice	ExampleVTKReader.h	/^  void setZContourSlice(int zSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int zSlice)
ExampleVTKReader::setZSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setZSlice(int zSlice)$/;"	f	class:ExampleVTKReader	signature:(int zSlice)
ExampleVTKReader::setZSlice	ExampleVTKReader.h	/^  void setZSlice(int zSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int zSlice)
ExampleVTKReader::showAIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::showAIsosurface(bool AIsosurface)$/;"	f	class:ExampleVTKReader	signature:(bool AIsosurface)
ExampleVTKReader::showAIsosurface	ExampleVTKReader.h	/^  void showAIsosurface(bool AIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool AIsosurface)
ExampleVTKReader::showBIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::showBIsosurface(bool BIsosurface)$/;"	f	class:ExampleVTKReader	signature:(bool BIsosurface)
ExampleVTKReader::showBIsosurface	ExampleVTKReader.h	/^  void showBIsosurface(bool BIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool BIsosurface)
ExampleVTKReader::showCIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::showCIsosurface(bool CIsosurface)$/;"	f	class:ExampleVTKReader	signature:(bool CIsosurface)
ExampleVTKReader::showCIsosurface	ExampleVTKReader.h	/^  void showCIsosurface(bool CIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool CIsosurface)
ExampleVTKReader::showContoursDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showContoursDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showContoursDialogCallback	ExampleVTKReader.h	/^  void showContoursDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showIsosurfacesDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showIsosurfacesDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showIsosurfacesDialogCallback	ExampleVTKReader.h	/^  void showIsosurfacesDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showRenderingDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showRenderingDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showRenderingDialogCallback	ExampleVTKReader.h	/^  void showRenderingDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showSlicesDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showSlicesDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showSlicesDialogCallback	ExampleVTKReader.h	/^  void showSlicesDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showTransferFunctionDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showTransferFunctionDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showTransferFunctionDialogCallback	ExampleVTKReader.h	/^  void showTransferFunctionDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
ExampleVTKReader::showXContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showXContourSlice(bool XSlice)$/;"	f	class:ExampleVTKReader	signature:(bool XSlice)
ExampleVTKReader::showXContourSlice	ExampleVTKReader.h	/^  void showXContourSlice(bool XSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool XSlice)
ExampleVTKReader::showXSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showXSlice(bool XSlice)$/;"	f	class:ExampleVTKReader	signature:(bool XSlice)
ExampleVTKReader::showXSlice	ExampleVTKReader.h	/^  void showXSlice(bool XSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool XSlice)
ExampleVTKReader::showYContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showYContourSlice(bool YSlice)$/;"	f	class:ExampleVTKReader	signature:(bool YSlice)
ExampleVTKReader::showYContourSlice	ExampleVTKReader.h	/^  void showYContourSlice(bool YSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool YSlice)
ExampleVTKReader::showYSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showYSlice(bool YSlice)$/;"	f	class:ExampleVTKReader	signature:(bool YSlice)
ExampleVTKReader::showYSlice	ExampleVTKReader.h	/^  void showYSlice(bool YSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool YSlice)
ExampleVTKReader::showZContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showZContourSlice(bool ZSlice)$/;"	f	class:ExampleVTKReader	signature:(bool ZSlice)
ExampleVTKReader::showZContourSlice	ExampleVTKReader.h	/^  void showZContourSlice(bool ZSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool ZSlice)
ExampleVTKReader::showZSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showZSlice(bool ZSlice)$/;"	f	class:ExampleVTKReader	signature:(bool ZSlice)
ExampleVTKReader::showZSlice	ExampleVTKReader.h	/^  void showZSlice(bool ZSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool ZSlice)
ExampleVTKReader::slicesDialog	ExampleVTKReader.h	/^  Slices* slicesDialog;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::toolCreationCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::toolCreationCallback($/;"	f	class:ExampleVTKReader	signature:( Vrui::ToolManager::ToolCreationCallbackData * callbackData)
ExampleVTKReader::toolCreationCallback	ExampleVTKReader.h	/^  virtual void toolCreationCallback(Vrui::ToolManager::ToolCreationCallbackData* cbData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Vrui::ToolManager::ToolCreationCallbackData* cbData)
ExampleVTKReader::toolDestructionCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::toolDestructionCallback($/;"	f	class:ExampleVTKReader	signature:( Vrui::ToolManager::ToolDestructionCallbackData * callbackData)
ExampleVTKReader::toolDestructionCallback	ExampleVTKReader.h	/^  virtual void toolDestructionCallback(Vrui::ToolManager::ToolDestructionCallbackData* cbData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Vrui::ToolManager::ToolDestructionCallbackData* cbData)
ExampleVTKReader::transferFunctionDialog	ExampleVTKReader.h	/^  TransferFunction1D* transferFunctionDialog;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::updateAlpha	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateAlpha(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::updateAlpha	ExampleVTKReader.h	/^  void updateAlpha(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::updateContourValue	ExampleVTKReader.h	/^  void updateContourValue(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::updateIsosurfaceColorMap	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateIsosurfaceColorMap(double* IsosurfaceColormap)$/;"	f	class:ExampleVTKReader	signature:(double* IsosurfaceColormap)
ExampleVTKReader::updateIsosurfaceColorMap	ExampleVTKReader.h	/^  void updateIsosurfaceColorMap(double* SliceColormap);$/;"	p	class:ExampleVTKReader	access:public	signature:(double* SliceColormap)
ExampleVTKReader::updateModelColorMap	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateModelColorMap(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::updateModelColorMap	ExampleVTKReader.h	/^  void updateModelColorMap(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::updateSliceColorMap	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateSliceColorMap(double* SliceColormap)$/;"	f	class:ExampleVTKReader	signature:(double* SliceColormap)
ExampleVTKReader::updateSliceColorMap	ExampleVTKReader.h	/^  void updateSliceColorMap(double* SliceColormap);$/;"	p	class:ExampleVTKReader	access:public	signature:(double* SliceColormap)
ExampleVTKReader::updateVolumeColorMap	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateVolumeColorMap(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::updateVolumeColorMap	ExampleVTKReader.h	/^  void updateVolumeColorMap(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
ExampleVTKReader::volumeColorMapChangedCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::volumeColorMapChangedCallback($/;"	f	class:ExampleVTKReader	signature:( Misc::CallbackData* callBackData)
ExampleVTKReader::volumeColorMapChangedCallback	ExampleVTKReader.h	/^  void volumeColorMapChangedCallback(Misc::CallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Misc::CallbackData* callBackData)
ExampleVTKReader::xCenter	ExampleVTKReader.h	/^  double xCenter;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::xContourPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> xContourPlane;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::xContourSlice	ExampleVTKReader.h	/^  int xContourSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::xOrigin	ExampleVTKReader.h	/^  double xOrigin;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::xPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> xPlane;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::xSlice	ExampleVTKReader.h	/^  int xSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::yCenter	ExampleVTKReader.h	/^  double yCenter;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::yContourPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> yContourPlane;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::yContourSlice	ExampleVTKReader.h	/^  int yContourSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::yOrigin	ExampleVTKReader.h	/^  double yOrigin;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::yPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> yPlane;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::ySlice	ExampleVTKReader.h	/^  int ySlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::zCenter	ExampleVTKReader.h	/^  double zCenter;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::zContourPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> zContourPlane;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::zContourSlice	ExampleVTKReader.h	/^  int zContourSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::zOrigin	ExampleVTKReader.h	/^  double zOrigin;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::zPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> zPlane;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::zSlice	ExampleVTKReader.h	/^  int zSlice;$/;"	m	class:ExampleVTKReader	access:private
ExampleVTKReader::~ExampleVTKReader	ExampleVTKReader.cpp	/^ExampleVTKReader::~ExampleVTKReader(void)$/;"	f	class:ExampleVTKReader	signature:(void)
ExampleVTKReader::~ExampleVTKReader	ExampleVTKReader.h	/^  virtual ~ExampleVTKReader(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
FULL_RAINBOW	ColorMap.h	/^static float FULL_RAINBOW[7][4] = {$/;"	v
FileName	ExampleVTKReader.h	/^  char* FileName;$/;"	m	class:ExampleVTKReader	access:private
FirstFrame	ExampleVTKReader.h	/^  bool FirstFrame;$/;"	m	class:ExampleVTKReader	access:private
FlashlightDirection	ExampleVTKReader.h	/^  double * FlashlightDirection;$/;"	m	class:ExampleVTKReader	access:private
FlashlightDirection	FlashlightLocator.h	/^  double * FlashlightDirection;$/;"	m	class:FlashlightLocator	access:private
FlashlightLocator	FlashlightLocator.cpp	/^FlashlightLocator::FlashlightLocator(Vrui::LocatorTool * locatorTool,$/;"	f	class:FlashlightLocator	signature:(Vrui::LocatorTool * locatorTool, ExampleVTKReader* ExampleVTKReader)
FlashlightLocator	FlashlightLocator.h	/^  FlashlightLocator(Vrui::LocatorTool* locatorTool,$/;"	p	class:FlashlightLocator	access:public	signature:(Vrui::LocatorTool* locatorTool, ExampleVTKReader * ExampleVTKReader)
FlashlightLocator	FlashlightLocator.h	/^class FlashlightLocator : public BaseLocator$/;"	c	inherits:BaseLocator
FlashlightLocator::FlashlightDirection	FlashlightLocator.h	/^  double * FlashlightDirection;$/;"	m	class:FlashlightLocator	access:private
FlashlightLocator::FlashlightLocator	FlashlightLocator.cpp	/^FlashlightLocator::FlashlightLocator(Vrui::LocatorTool * locatorTool,$/;"	f	class:FlashlightLocator	signature:(Vrui::LocatorTool * locatorTool, ExampleVTKReader* ExampleVTKReader)
FlashlightLocator::FlashlightLocator	FlashlightLocator.h	/^  FlashlightLocator(Vrui::LocatorTool* locatorTool,$/;"	p	class:FlashlightLocator	access:public	signature:(Vrui::LocatorTool* locatorTool, ExampleVTKReader * ExampleVTKReader)
FlashlightLocator::FlashlightPosition	FlashlightLocator.h	/^  double * FlashlightPosition;$/;"	m	class:FlashlightLocator	access:private
FlashlightLocator::FlashlightSwitch	FlashlightLocator.h	/^  int * FlashlightSwitch;$/;"	m	class:FlashlightLocator	access:private
FlashlightLocator::buttonPressCallback	FlashlightLocator.cpp	/^void FlashlightLocator::buttonPressCallback($/;"	f	class:FlashlightLocator	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
FlashlightLocator::buttonPressCallback	FlashlightLocator.h	/^  virtual void buttonPressCallback($/;"	p	class:FlashlightLocator	access:public	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
FlashlightLocator::buttonReleaseCallback	FlashlightLocator.cpp	/^void FlashlightLocator::buttonReleaseCallback($/;"	f	class:FlashlightLocator	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
FlashlightLocator::buttonReleaseCallback	FlashlightLocator.h	/^  virtual void buttonReleaseCallback($/;"	p	class:FlashlightLocator	access:public	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
FlashlightLocator::motionCallback	FlashlightLocator.cpp	/^void FlashlightLocator::motionCallback($/;"	f	class:FlashlightLocator	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
FlashlightLocator::motionCallback	FlashlightLocator.h	/^  virtual void motionCallback($/;"	p	class:FlashlightLocator	access:public	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
FlashlightLocator::~FlashlightLocator	FlashlightLocator.cpp	/^FlashlightLocator::~FlashlightLocator(void) {$/;"	f	class:FlashlightLocator	signature:(void)
FlashlightLocator::~FlashlightLocator	FlashlightLocator.h	/^  ~FlashlightLocator(void);$/;"	p	class:FlashlightLocator	access:public	signature:(void)
FlashlightPosition	ExampleVTKReader.h	/^  double * FlashlightPosition;$/;"	m	class:ExampleVTKReader	access:private
FlashlightPosition	FlashlightLocator.h	/^  double * FlashlightPosition;$/;"	m	class:FlashlightLocator	access:private
FlashlightSwitch	ExampleVTKReader.h	/^  int * FlashlightSwitch;$/;"	m	class:ExampleVTKReader	access:private
FlashlightSwitch	FlashlightLocator.h	/^  int * FlashlightSwitch;$/;"	m	class:FlashlightLocator	access:private
FreeSliceLocator	FreeSliceLocator.cpp	/^FreeSliceLocator::FreeSliceLocator(Vrui::LocatorTool * locatorTool,$/;"	f	class:FreeSliceLocator	signature:(Vrui::LocatorTool * locatorTool, ExampleVTKReader* ExampleVTKReader)
FreeSliceLocator	FreeSliceLocator.h	/^  FreeSliceLocator(Vrui::LocatorTool* locatorTool,$/;"	p	class:FreeSliceLocator	access:public	signature:(Vrui::LocatorTool* locatorTool, ExampleVTKReader * ExampleVTKReader)
FreeSliceLocator	FreeSliceLocator.h	/^class FreeSliceLocator : public BaseLocator$/;"	c	inherits:BaseLocator
FreeSliceLocator::FreeSliceLocator	FreeSliceLocator.cpp	/^FreeSliceLocator::FreeSliceLocator(Vrui::LocatorTool * locatorTool,$/;"	f	class:FreeSliceLocator	signature:(Vrui::LocatorTool * locatorTool, ExampleVTKReader* ExampleVTKReader)
FreeSliceLocator::FreeSliceLocator	FreeSliceLocator.h	/^  FreeSliceLocator(Vrui::LocatorTool* locatorTool,$/;"	p	class:FreeSliceLocator	access:public	signature:(Vrui::LocatorTool* locatorTool, ExampleVTKReader * ExampleVTKReader)
FreeSliceLocator::FreeSliceNormal	FreeSliceLocator.h	/^  double * FreeSliceNormal;$/;"	m	class:FreeSliceLocator	access:private
FreeSliceLocator::FreeSliceOrigin	FreeSliceLocator.h	/^  double * FreeSliceOrigin;$/;"	m	class:FreeSliceLocator	access:private
FreeSliceLocator::FreeSliceVisibility	FreeSliceLocator.h	/^  int * FreeSliceVisibility;$/;"	m	class:FreeSliceLocator	access:private
FreeSliceLocator::buttonPressCallback	FreeSliceLocator.cpp	/^void FreeSliceLocator::buttonPressCallback($/;"	f	class:FreeSliceLocator	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
FreeSliceLocator::buttonPressCallback	FreeSliceLocator.h	/^  virtual void buttonPressCallback($/;"	p	class:FreeSliceLocator	access:public	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
FreeSliceLocator::buttonReleaseCallback	FreeSliceLocator.cpp	/^void FreeSliceLocator::buttonReleaseCallback($/;"	f	class:FreeSliceLocator	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
FreeSliceLocator::buttonReleaseCallback	FreeSliceLocator.h	/^  virtual void buttonReleaseCallback($/;"	p	class:FreeSliceLocator	access:public	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
FreeSliceLocator::motionCallback	FreeSliceLocator.cpp	/^void FreeSliceLocator::motionCallback($/;"	f	class:FreeSliceLocator	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
FreeSliceLocator::motionCallback	FreeSliceLocator.h	/^  virtual void motionCallback($/;"	p	class:FreeSliceLocator	access:public	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
FreeSliceLocator::~FreeSliceLocator	FreeSliceLocator.cpp	/^FreeSliceLocator::~FreeSliceLocator(void) {$/;"	f	class:FreeSliceLocator	signature:(void)
FreeSliceLocator::~FreeSliceLocator	FreeSliceLocator.h	/^  ~FreeSliceLocator(void);$/;"	p	class:FreeSliceLocator	access:public	signature:(void)
FreeSliceNormal	ExampleVTKReader.h	/^  double * FreeSliceNormal;$/;"	m	class:ExampleVTKReader	access:private
FreeSliceNormal	FreeSliceLocator.h	/^  double * FreeSliceNormal;$/;"	m	class:FreeSliceLocator	access:private
FreeSliceOrigin	ExampleVTKReader.h	/^  double * FreeSliceOrigin;$/;"	m	class:ExampleVTKReader	access:private
FreeSliceOrigin	FreeSliceLocator.h	/^  double * FreeSliceOrigin;$/;"	m	class:FreeSliceLocator	access:private
FreeSliceVisibility	ExampleVTKReader.h	/^  int * FreeSliceVisibility;$/;"	m	class:ExampleVTKReader	access:private
FreeSliceVisibility	FreeSliceLocator.h	/^  int * FreeSliceVisibility;$/;"	m	class:FreeSliceLocator	access:private
GAUSSIAN_H_	Gaussian.h	2;"	d
GLMotif	ExampleVTKReader.h	/^namespace GLMotif$/;"	n
GLMotif::Widget::resize	ColorMap.cpp	/^	GLMotif::Widget::resize(_exterior);$/;"	p	class:GLMotif::Widget	file:	signature:(_exterior)
GLMotif::Widget::resize	ScalarWidget.cpp	/^    GLMotif::Widget::resize(_exterior);$/;"	p	class:GLMotif::Widget	file:	signature:(_exterior)
GLMotif::Widget::resize	SwatchesWidget.cpp	/^	GLMotif::Widget::resize(_exterior);$/;"	p	class:GLMotif::Widget	file:	signature:(_exterior)
GREEN_COMPONENT	ScalarWidget.h	17;"	d
Gaussian	Gaussian.cpp	/^Gaussian::Gaussian(float _x, float _h, float _w, float _bx, float _by) :$/;"	f	class:Gaussian	signature:(float _x, float _h, float _w, float _bx, float _by)
Gaussian	Gaussian.cpp	/^Gaussian::Gaussian(void) :$/;"	f	class:Gaussian	signature:(void)
Gaussian	Gaussian.h	/^    Gaussian(float _x, float _h, float _w, float _bx, float _by);$/;"	p	class:Gaussian	access:public	signature:(float _x, float _h, float _w, float _bx, float _by)
Gaussian	Gaussian.h	/^    Gaussian(void);$/;"	p	class:Gaussian	access:public	signature:(void)
Gaussian	Gaussian.h	/^class Gaussian {$/;"	c
Gaussian::Gaussian	Gaussian.cpp	/^Gaussian::Gaussian(float _x, float _h, float _w, float _bx, float _by) :$/;"	f	class:Gaussian	signature:(float _x, float _h, float _w, float _bx, float _by)
Gaussian::Gaussian	Gaussian.cpp	/^Gaussian::Gaussian(void) :$/;"	f	class:Gaussian	signature:(void)
Gaussian::Gaussian	Gaussian.h	/^    Gaussian(float _x, float _h, float _w, float _bx, float _by);$/;"	p	class:Gaussian	access:public	signature:(float _x, float _h, float _w, float _bx, float _by)
Gaussian::Gaussian	Gaussian.h	/^    Gaussian(void);$/;"	p	class:Gaussian	access:public	signature:(void)
Gaussian::bx	Gaussian.h	/^    float bx;$/;"	m	class:Gaussian	access:private
Gaussian::by	Gaussian.h	/^    float by;$/;"	m	class:Gaussian	access:private
Gaussian::getBx	Gaussian.cpp	/^float Gaussian::getBx(void) const {$/;"	f	class:Gaussian	signature:(void) const
Gaussian::getBx	Gaussian.h	/^    float getBx(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
Gaussian::getBy	Gaussian.cpp	/^float Gaussian::getBy(void) const {$/;"	f	class:Gaussian	signature:(void) const
Gaussian::getBy	Gaussian.h	/^    float getBy(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
Gaussian::getH	Gaussian.cpp	/^float Gaussian::getH(void) const {$/;"	f	class:Gaussian	signature:(void) const
Gaussian::getH	Gaussian.h	/^    float getH(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
Gaussian::getW	Gaussian.cpp	/^float Gaussian::getW(void) const {$/;"	f	class:Gaussian	signature:(void) const
Gaussian::getW	Gaussian.h	/^    float getW(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
Gaussian::getX	Gaussian.cpp	/^float Gaussian::getX(void) const {$/;"	f	class:Gaussian	signature:(void) const
Gaussian::getX	Gaussian.h	/^    float getX(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
Gaussian::h	Gaussian.h	/^    float h;$/;"	m	class:Gaussian	access:private
Gaussian::setBx	Gaussian.cpp	/^void Gaussian::setBx(float bx) {$/;"	f	class:Gaussian	signature:(float bx)
Gaussian::setBx	Gaussian.h	/^    void setBx(float bx);$/;"	p	class:Gaussian	access:public	signature:(float bx)
Gaussian::setBy	Gaussian.cpp	/^void Gaussian::setBy(float by) {$/;"	f	class:Gaussian	signature:(float by)
Gaussian::setBy	Gaussian.h	/^    void setBy(float by);$/;"	p	class:Gaussian	access:public	signature:(float by)
Gaussian::setH	Gaussian.cpp	/^void Gaussian::setH(float h) {$/;"	f	class:Gaussian	signature:(float h)
Gaussian::setH	Gaussian.h	/^    void setH(float h);$/;"	p	class:Gaussian	access:public	signature:(float h)
Gaussian::setW	Gaussian.cpp	/^void Gaussian::setW(float w) {$/;"	f	class:Gaussian	signature:(float w)
Gaussian::setW	Gaussian.h	/^    void setW(float w);$/;"	p	class:Gaussian	access:public	signature:(float w)
Gaussian::setX	Gaussian.cpp	/^void Gaussian::setX(float x) {$/;"	f	class:Gaussian	signature:(float x)
Gaussian::setX	Gaussian.h	/^    void setX(float x);$/;"	p	class:Gaussian	access:public	signature:(float x)
Gaussian::w	Gaussian.h	/^    float w;$/;"	m	class:Gaussian	access:private
Gaussian::x	Gaussian.h	/^    float x;$/;"	m	class:Gaussian	access:private
Gaussian::~Gaussian	Gaussian.cpp	/^Gaussian::~Gaussian(void) {$/;"	f	class:Gaussian	signature:(void)
Gaussian::~Gaussian	Gaussian.h	/^    ~Gaussian(void);$/;"	p	class:Gaussian	access:public	signature:(void)
GetBounds	ExampleVTKReader.cpp	/^    imageData->GetBounds(this->DataBounds);$/;"	p	file:	signature:(this->DataBounds)
GetExtent	ExampleVTKReader.cpp	/^    imageData->GetExtent(this->DataExtent);$/;"	p	file:	signature:(this->DataExtent)
GetScalarRange	ExampleVTKReader.cpp	/^    imageData->GetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
HOT_TO_COLD	ColorMap.h	/^static float HOT_TO_COLD[3][4] = {$/;"	v
HSB_HUES	ColorMap.h	/^static float HSB_HUES[7][4] = {$/;"	v
Histogram	ExampleVTKReader.h	/^  float* Histogram;$/;"	m	class:ExampleVTKReader	access:private
INVERSE_DAVINCI	ColorMap.h	/^static float INVERSE_DAVINCI[11][4] = {$/;"	v
INVERSE_FULL_RAINBOW	ColorMap.h	/^static float INVERSE_FULL_RAINBOW[7][4] = {$/;"	v
INVERSE_HSB_HUES	ColorMap.h	/^static float INVERSE_HSB_HUES[7][4] = {$/;"	v
INVERSE_RAINBOW	ColorMap.h	/^static float INVERSE_RAINBOW[5][4] = {$/;"	v
INVERSE_SEISMIC	ColorMap.h	/^static float INVERSE_SEISMIC[3][4] = {$/;"	v
ISOSURFACES_INCLUDED	Isosurfaces.h	2;"	d
IsosurfaceColormap	ExampleVTKReader.h	/^  double* IsosurfaceColormap;$/;"	m	class:ExampleVTKReader	access:private
Isosurfaces	Isosurfaces.cpp	/^Isosurfaces::Isosurfaces(double* _isosurfaceColormap, ExampleVTKReader * _ExampleVTKReader) :$/;"	f	class:Isosurfaces	signature:(double* _isosurfaceColormap, ExampleVTKReader * _ExampleVTKReader)
Isosurfaces	Isosurfaces.h	/^    Isosurfaces(double* _isosurfaceColormap, ExampleVTKReader * _ExampleVTKReader);$/;"	p	class:Isosurfaces	access:public	signature:(double* _isosurfaceColormap, ExampleVTKReader * _ExampleVTKReader)
Isosurfaces	Isosurfaces.h	/^class Isosurfaces: public GLMotif::PopupWindow {$/;"	c	inherits:GLMotif::PopupWindow
Isosurfaces::AIsosurfacesValue	Isosurfaces.h	/^    GLMotif::TextField* AIsosurfacesValue;$/;"	m	class:Isosurfaces	access:private
Isosurfaces::BIsosurfacesValue	Isosurfaces.h	/^    GLMotif::TextField* BIsosurfacesValue;$/;"	m	class:Isosurfaces	access:private
Isosurfaces::CIsosurfacesValue	Isosurfaces.h	/^    GLMotif::TextField* CIsosurfacesValue;$/;"	m	class:Isosurfaces	access:private
Isosurfaces::Isosurfaces	Isosurfaces.cpp	/^Isosurfaces::Isosurfaces(double* _isosurfaceColormap, ExampleVTKReader * _ExampleVTKReader) :$/;"	f	class:Isosurfaces	signature:(double* _isosurfaceColormap, ExampleVTKReader * _ExampleVTKReader)
Isosurfaces::Isosurfaces	Isosurfaces.h	/^    Isosurfaces(double* _isosurfaceColormap, ExampleVTKReader * _ExampleVTKReader);$/;"	p	class:Isosurfaces	access:public	signature:(double* _isosurfaceColormap, ExampleVTKReader * _ExampleVTKReader)
Isosurfaces::changeIsosurfacesColorMap	Isosurfaces.cpp	/^void Isosurfaces::changeIsosurfacesColorMap(int colormap) const {$/;"	f	class:Isosurfaces	signature:(int colormap) const
Isosurfaces::changeIsosurfacesColorMap	Isosurfaces.h	/^    void changeIsosurfacesColorMap(int colormap) const;$/;"	p	class:Isosurfaces	access:public	signature:(int colormap) const
Isosurfaces::changeIsosurfacesColorMapCallback	Isosurfaces.cpp	/^void Isosurfaces::changeIsosurfacesColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData * callBackData) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RadioBox::ValueChangedCallbackData * callBackData)
Isosurfaces::changeIsosurfacesColorMapCallback	Isosurfaces.h	/^    void changeIsosurfacesColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData * callBackData);$/;"	p	class:Isosurfaces	access:public	signature:(GLMotif::RadioBox::ValueChangedCallbackData * callBackData)
Isosurfaces::colorMap	Isosurfaces.h	/^    ColorMap * colorMap;$/;"	m	class:Isosurfaces	access:private
Isosurfaces::colorMapChangedCallback	Isosurfaces.h	/^    void colorMapChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
Isosurfaces::colorPane	Isosurfaces.h	/^    GLMotif::Blind * colorPane;$/;"	m	class:Isosurfaces	access:private
Isosurfaces::colorSliderCallback	Isosurfaces.cpp	/^void Isosurfaces::colorSliderCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData* _callbackData)
Isosurfaces::colorSliderCallback	Isosurfaces.h	/^    void colorSliderCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
Isosurfaces::colorSliders	Isosurfaces.h	/^    GLMotif::Slider * colorSliders[3];$/;"	m	class:Isosurfaces	access:private
Isosurfaces::colorSwatchesWidgetCallback	Isosurfaces.cpp	/^void Isosurfaces::colorSwatchesWidgetCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData* _callbackData)
Isosurfaces::colorSwatchesWidgetCallback	Isosurfaces.h	/^    void colorSwatchesWidgetCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
Isosurfaces::controlPointChangedCallback	Isosurfaces.cpp	/^void Isosurfaces::controlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData* _callbackData)
Isosurfaces::controlPointChangedCallback	Isosurfaces.h	/^    void controlPointChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
Isosurfaces::createABCIsosurfaces	Isosurfaces.cpp	/^void Isosurfaces::createABCIsosurfaces(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Isosurfaces::createABCIsosurfaces	Isosurfaces.h	/^    void createABCIsosurfaces(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Isosurfaces::createAIsosurfaces	Isosurfaces.cpp	/^void Isosurfaces::createAIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
Isosurfaces::createAIsosurfaces	Isosurfaces.h	/^    void createAIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Isosurfaces	access:private	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
Isosurfaces::createBIsosurfaces	Isosurfaces.cpp	/^void Isosurfaces::createBIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
Isosurfaces::createBIsosurfaces	Isosurfaces.h	/^    void createBIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Isosurfaces	access:private	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
Isosurfaces::createButtonBox	Isosurfaces.cpp	/^GLMotif::RowColumn * Isosurfaces::createButtonBox(GLMotif::RowColumn * & colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RowColumn * & colorMapDialog)
Isosurfaces::createButtonBox	Isosurfaces.h	/^    GLMotif::RowColumn * createButtonBox(GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(GLMotif::RowColumn * & colorMapDialog)
Isosurfaces::createCIsosurfaces	Isosurfaces.cpp	/^void Isosurfaces::createCIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
Isosurfaces::createCIsosurfaces	Isosurfaces.h	/^    void createCIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Isosurfaces	access:private	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
Isosurfaces::createColorEditor	Isosurfaces.cpp	/^GLMotif::RowColumn* Isosurfaces::createColorEditor(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Isosurfaces::createColorEditor	Isosurfaces.h	/^    GLMotif::RowColumn * createColorEditor(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Isosurfaces::createColorMap	Isosurfaces.cpp	/^void Isosurfaces::createColorMap(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Isosurfaces::createColorMap	Isosurfaces.h	/^    void createColorMap(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Isosurfaces::createColorMapDialog	Isosurfaces.cpp	/^void Isosurfaces::createColorMapDialog(const GLMotif::StyleSheet& styleSheet) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet)
Isosurfaces::createColorMapDialog	Isosurfaces.h	/^    void createColorMapDialog(const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet)
Isosurfaces::createColorPanel	Isosurfaces.cpp	/^void Isosurfaces::createColorPanel(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Isosurfaces::createColorPanel	Isosurfaces.h	/^    void createColorPanel(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Isosurfaces::createColorSlider	Isosurfaces.cpp	/^GLMotif::Slider* Isosurfaces::createColorSlider(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet,$/;"	f	class:Isosurfaces	signature:(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
Isosurfaces::createColorSlider	Isosurfaces.h	/^    GLMotif::Slider * createColorSlider(const char * title, GLMotif::Color color, const GLMotif::StyleSheet & styleSheet,$/;"	p	class:Isosurfaces	access:private	signature:(const char * title, GLMotif::Color color, const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorSlidersBox)
Isosurfaces::createColorSliderBox	Isosurfaces.cpp	/^GLMotif::RowColumn* Isosurfaces::createColorSliderBox(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor)
Isosurfaces::createColorSliderBox	Isosurfaces.h	/^    GLMotif::RowColumn * createColorSliderBox(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor)
Isosurfaces::createColorSliders	Isosurfaces.cpp	/^void Isosurfaces::createColorSliders(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
Isosurfaces::createColorSliders	Isosurfaces.h	/^    void createColorSliders(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor)
Isosurfaces::createColorSwatchesWidget	Isosurfaces.cpp	/^void Isosurfaces::createColorSwatchesWidget(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor)
Isosurfaces::createColorSwatchesWidget	Isosurfaces.h	/^    void createColorSwatchesWidget(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorEditor);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorEditor)
Isosurfaces::createIsosurfaceColorMapSubMenu	Isosurfaces.cpp	/^GLMotif::Popup * Isosurfaces::createIsosurfaceColorMapSubMenu(void) {$/;"	f	class:Isosurfaces	signature:(void)
Isosurfaces::createIsosurfaceColorMapSubMenu	Isosurfaces.h	/^    GLMotif::Popup * createIsosurfaceColorMapSubMenu(void);$/;"	p	class:Isosurfaces	access:private	signature:(void)
Isosurfaces::exampleVTKReader	Isosurfaces.h	/^    ExampleVTKReader * exampleVTKReader;$/;"	m	class:Isosurfaces	access:public
Isosurfaces::exportIsosurfacesColorMap	Isosurfaces.cpp	/^void Isosurfaces::exportIsosurfacesColorMap(double* colormap) const {$/;"	f	class:Isosurfaces	signature:(double* colormap) const
Isosurfaces::exportIsosurfacesColorMap	Isosurfaces.h	/^    void exportIsosurfacesColorMap(double* colormap) const;$/;"	p	class:Isosurfaces	access:public	signature:(double* colormap) const
Isosurfaces::getColorMap	Isosurfaces.cpp	/^Storage * Isosurfaces::getColorMap(void) const {$/;"	f	class:Isosurfaces	signature:(void) const
Isosurfaces::getColorMap	Isosurfaces.h	/^    Storage * getColorMap(void) const;$/;"	p	class:Isosurfaces	access:public	signature:(void) const
Isosurfaces::getIsosurfacesColorMap	Isosurfaces.cpp	/^ColorMap * Isosurfaces::getIsosurfacesColorMap(void) {$/;"	f	class:Isosurfaces	signature:(void)
Isosurfaces::getIsosurfacesColorMap	Isosurfaces.cpp	/^const ColorMap * Isosurfaces::getIsosurfacesColorMap(void) const {$/;"	f	class:Isosurfaces	signature:(void) const
Isosurfaces::getIsosurfacesColorMap	Isosurfaces.h	/^    ColorMap* getIsosurfacesColorMap(void);$/;"	p	class:Isosurfaces	access:public	signature:(void)
Isosurfaces::getIsosurfacesColorMap	Isosurfaces.h	/^    const ColorMap* getIsosurfacesColorMap(void) const;$/;"	p	class:Isosurfaces	access:public	signature:(void) const
Isosurfaces::getIsosurfacesColorMapChangedCallbacks	Isosurfaces.cpp	/^Misc::CallbackList& Isosurfaces::getIsosurfacesColorMapChangedCallbacks(void) {$/;"	f	class:Isosurfaces	signature:(void)
Isosurfaces::getIsosurfacesColorMapChangedCallbacks	Isosurfaces.h	/^    Misc::CallbackList& getIsosurfacesColorMapChangedCallbacks(void);$/;"	p	class:Isosurfaces	access:public	signature:(void)
Isosurfaces::initialize	Isosurfaces.cpp	/^void Isosurfaces::initialize(void) {$/;"	f	class:Isosurfaces	signature:(void)
Isosurfaces::initialize	Isosurfaces.h	/^    void initialize(void);$/;"	p	class:Isosurfaces	access:private	signature:(void)
Isosurfaces::isosurfaceColorMapChangedCallback	Isosurfaces.cpp	/^void Isosurfaces::isosurfaceColorMapChangedCallback(Misc::CallbackData * callBackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData * callBackData)
Isosurfaces::isosurfaceColorMapChangedCallback	Isosurfaces.h	/^    void isosurfaceColorMapChangedCallback(Misc::CallbackData * callBackData);$/;"	p	class:Isosurfaces	access:public	signature:(Misc::CallbackData * callBackData)
Isosurfaces::isosurfaceColormap	Isosurfaces.h	/^    double* isosurfaceColormap;$/;"	m	class:Isosurfaces	access:private
Isosurfaces::removeControlPointCallback	Isosurfaces.cpp	/^void Isosurfaces::removeControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData* _callbackData)
Isosurfaces::removeControlPointCallback	Isosurfaces.h	/^    void removeControlPointCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
Isosurfaces::setColorMap	Isosurfaces.cpp	/^void Isosurfaces::setColorMap(Storage* storage) {$/;"	f	class:Isosurfaces	signature:(Storage* storage)
Isosurfaces::setColorMap	Isosurfaces.h	/^    void setColorMap(Storage* storage);$/;"	p	class:Isosurfaces	access:public	signature:(Storage* storage)
Isosurfaces::setIsosurfacesColorMap	Isosurfaces.cpp	/^void Isosurfaces::setIsosurfacesColorMap(int colorMapCreationType, double _minimum, double _maximum) {$/;"	f	class:Isosurfaces	signature:(int colorMapCreationType, double _minimum, double _maximum)
Isosurfaces::setIsosurfacesColorMap	Isosurfaces.h	/^    void setIsosurfacesColorMap(int colorMapCreationType, double _minimum, double _maximum);$/;"	p	class:Isosurfaces	access:public	signature:(int colorMapCreationType, double _minimum, double _maximum)
Isosurfaces::sliderCallback	Isosurfaces.cpp	/^void Isosurfaces::sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData) {$/;"	f	class:Isosurfaces	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
Isosurfaces::sliderCallback	Isosurfaces.h	/^    void sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData);$/;"	p	class:Isosurfaces	access:public	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
Isosurfaces::swatchesWidget	Isosurfaces.h	/^    SwatchesWidget * swatchesWidget;$/;"	m	class:Isosurfaces	access:private
Isosurfaces::toggleSelectCallback	Isosurfaces.cpp	/^void Isosurfaces::toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:Isosurfaces	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
Isosurfaces::toggleSelectCallback	Isosurfaces.h	/^    void toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData);$/;"	p	class:Isosurfaces	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData)
Isosurfaces::~Isosurfaces	Isosurfaces.cpp	/^Isosurfaces::~Isosurfaces(void) {$/;"	f	class:Isosurfaces	signature:(void)
Isosurfaces::~Isosurfaces	Isosurfaces.h	/^    virtual ~Isosurfaces(void);$/;"	p	class:Isosurfaces	access:public	signature:(void)
Mode	ScalarWidget.h	/^enum Mode {$/;"	g
NumberOfClippingPlanes	ExampleVTKReader.h	/^  int NumberOfClippingPlanes;$/;"	m	class:ExampleVTKReader	access:private
Opacity	ExampleVTKReader.h	/^  double Opacity;$/;"	m	class:ExampleVTKReader	access:private
Outline	ExampleVTKReader.h	/^  bool Outline;$/;"	m	class:ExampleVTKReader	access:private
Plane	ClippingPlaneLocator.cpp	/^		clippingPlane->setPlane(Vrui::Plane(planeNormal, planePoint));$/;"	p	file:	signature:(planeNormal, planePoint)
RAINBOW	ColorMap.h	/^static float RAINBOW[5][4] = {$/;"	v
RED_COMPONENT	ScalarWidget.h	16;"	d
RGBACOLOR_H_	RGBAColor.h	2;"	d
RGBAColor	RGBAColor.cpp	/^RGBAColor::RGBAColor() {$/;"	f	class:RGBAColor	signature:()
RGBAColor	RGBAColor.cpp	/^RGBAColor::RGBAColor(float _values[4]) {$/;"	f	class:RGBAColor	signature:(float _values[4])
RGBAColor	RGBAColor.cpp	/^RGBAColor::RGBAColor(float r, float g, float b, float a) {$/;"	f	class:RGBAColor	signature:(float r, float g, float b, float a)
RGBAColor	RGBAColor.h	/^	RGBAColor();$/;"	p	class:RGBAColor	access:public	signature:()
RGBAColor	RGBAColor.h	/^	RGBAColor(float _values[4]);$/;"	p	class:RGBAColor	access:public	signature:(float _values[4])
RGBAColor	RGBAColor.h	/^	RGBAColor(float r, float g, float b, float a);$/;"	p	class:RGBAColor	access:public	signature:(float r, float g, float b, float a)
RGBAColor	RGBAColor.h	/^class RGBAColor {$/;"	c
RGBAColor::RGBAColor	RGBAColor.cpp	/^RGBAColor::RGBAColor() {$/;"	f	class:RGBAColor	signature:()
RGBAColor::RGBAColor	RGBAColor.cpp	/^RGBAColor::RGBAColor(float _values[4]) {$/;"	f	class:RGBAColor	signature:(float _values[4])
RGBAColor::RGBAColor	RGBAColor.cpp	/^RGBAColor::RGBAColor(float r, float g, float b, float a) {$/;"	f	class:RGBAColor	signature:(float r, float g, float b, float a)
RGBAColor::RGBAColor	RGBAColor.h	/^	RGBAColor();$/;"	p	class:RGBAColor	access:public	signature:()
RGBAColor::RGBAColor	RGBAColor.h	/^	RGBAColor(float _values[4]);$/;"	p	class:RGBAColor	access:public	signature:(float _values[4])
RGBAColor::RGBAColor	RGBAColor.h	/^	RGBAColor(float r, float g, float b, float a);$/;"	p	class:RGBAColor	access:public	signature:(float r, float g, float b, float a)
RGBAColor::getColor	RGBAColor.cpp	/^float * RGBAColor::getColor(void) const {$/;"	f	class:RGBAColor	signature:(void) const
RGBAColor::getColor	RGBAColor.h	/^	float * getColor(void) const;$/;"	p	class:RGBAColor	access:public	signature:(void) const
RGBAColor::getValues	RGBAColor.cpp	/^float RGBAColor::getValues(int i) {$/;"	f	class:RGBAColor	signature:(int i)
RGBAColor::getValues	RGBAColor.cpp	/^float* RGBAColor::getValues(void) {$/;"	f	class:RGBAColor	signature:(void)
RGBAColor::getValues	RGBAColor.h	/^	float * getValues(void);$/;"	p	class:RGBAColor	access:public	signature:(void)
RGBAColor::getValues	RGBAColor.h	/^	float getValues(int i);$/;"	p	class:RGBAColor	access:public	signature:(int i)
RGBAColor::setValues	RGBAColor.cpp	/^void RGBAColor::setValues(float _values[4]) {$/;"	f	class:RGBAColor	signature:(float _values[4])
RGBAColor::setValues	RGBAColor.cpp	/^void RGBAColor::setValues(int i, float value) {$/;"	f	class:RGBAColor	signature:(int i, float value)
RGBAColor::setValues	RGBAColor.h	/^	void setValues(float _values[4]);$/;"	p	class:RGBAColor	access:public	signature:(float _values[4])
RGBAColor::setValues	RGBAColor.h	/^	void setValues(int i, float value);$/;"	p	class:RGBAColor	access:public	signature:(int i, float value)
RGBAColor::values	RGBAColor.h	/^	float * values;$/;"	m	class:RGBAColor	access:private
RGBAColor::~RGBAColor	RGBAColor.cpp	/^RGBAColor::~RGBAColor() {$/;"	f	class:RGBAColor	signature:()
RGBAColor::~RGBAColor	RGBAColor.h	/^	virtual ~RGBAColor();$/;"	p	class:RGBAColor	access:public	signature:()
Radius	ExampleVTKReader.h	/^  Vrui::Scalar Radius;$/;"	m	class:ExampleVTKReader	access:private
RemoveAllPoints	ExampleVTKReader.cpp	/^  dataItem->colorFunction->RemoveAllPoints();$/;"	p	file:	signature:()
RemoveAllPoints	ExampleVTKReader.cpp	/^  dataItem->opacityFunction->RemoveAllPoints();$/;"	p	file:	signature:()
RepresentationType	ExampleVTKReader.h	/^  int RepresentationType;$/;"	m	class:ExampleVTKReader	access:private
RequestedRenderMode	ExampleVTKReader.h	/^  int RequestedRenderMode;$/;"	m	class:ExampleVTKReader	access:private
SCALARWIDGETCALLBACKDATA_H_	ScalarWidgetCallbackData.h	2;"	d
SCALARWIDGETCHANGEDCALLBACKDATA_H_	ScalarWidgetChangedCallbackData.h	2;"	d
SCALARWIDGETCONTROLPOINTCHANGEDCALLBACKDATA_H_	ScalarWidgetControlPointChangedCallbackData.h	2;"	d
SCALARWIDGETCONTROLPOINT_H_	ScalarWidgetControlPoint.h	2;"	d
SCALARWIDGETSTORAGE_H_	ScalarWidgetStorage.h	2;"	d
SCALARWIDGET_INCLUDED	ScalarWidget.h	2;"	d
SEISMIC	ColorMap.h	/^static float SEISMIC[3][4] = {$/;"	v
SEISMIC_RAMP	ScalarWidget.h	24;"	d
SLICES_INCLUDED	Slices.h	2;"	d
STORAGE_H_	Storage.h	2;"	d
SWATCHESWIDGET_INCLUDED	SwatchesWidget.h	2;"	d
Scalar	ColorMap.h	/^	typedef float Scalar;$/;"	t	class:ColorMap	access:public
ScalarVisibilityOff	ExampleVTKReader.cpp	/^  contourMapper->ScalarVisibilityOff();$/;"	p	file:	signature:()
ScalarVisibilityOff	ExampleVTKReader.cpp	/^  mapperXContourCutter->ScalarVisibilityOff();$/;"	p	file:	signature:()
ScalarVisibilityOff	ExampleVTKReader.cpp	/^  mapperYContourCutter->ScalarVisibilityOff();$/;"	p	file:	signature:()
ScalarVisibilityOff	ExampleVTKReader.cpp	/^  mapperZContourCutter->ScalarVisibilityOff();$/;"	p	file:	signature:()
ScalarWidget	ScalarWidget.cpp	/^ScalarWidget::ScalarWidget(const char* _name, GLMotif::Container* _parent, int _component, bool _manageChild) :$/;"	f	class:ScalarWidget	signature:(const char* _name, GLMotif::Container* _parent, int _component, bool _manageChild)
ScalarWidget	ScalarWidget.h	/^    ScalarWidget(const char* _name, GLMotif::Container* _parent, int _component, bool _manageChild = true);$/;"	p	class:ScalarWidget	access:public	signature:(const char* _name, GLMotif::Container* _parent, int _component, bool _manageChild = true)
ScalarWidget	ScalarWidget.h	/^class ScalarWidget: public GLMotif::Widget {$/;"	c	inherits:GLMotif::Widget
ScalarWidget::ScalarWidget	ScalarWidget.cpp	/^ScalarWidget::ScalarWidget(const char* _name, GLMotif::Container* _parent, int _component, bool _manageChild) :$/;"	f	class:ScalarWidget	signature:(const char* _name, GLMotif::Container* _parent, int _component, bool _manageChild)
ScalarWidget::ScalarWidget	ScalarWidget.h	/^    ScalarWidget(const char* _name, GLMotif::Container* _parent, int _component, bool _manageChild = true);$/;"	p	class:ScalarWidget	access:public	signature:(const char* _name, GLMotif::Container* _parent, int _component, bool _manageChild = true)
ScalarWidget::addGaussian	ScalarWidget.cpp	/^void ScalarWidget::addGaussian(float x, float h, float w, float bx, float by) {$/;"	f	class:ScalarWidget	signature:(float x, float h, float w, float bx, float by)
ScalarWidget::addGaussian	ScalarWidget.h	/^    void addGaussian(float x, float h, float w, float bx, float by);$/;"	p	class:ScalarWidget	access:public	signature:(float x, float h, float w, float bx, float by)
ScalarWidget::alphaFirst	ScalarWidget.h	/^    ScalarWidgetControlPoint* alphaFirst;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::alphaGaussian	ScalarWidget.h	/^    bool alphaGaussian;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::alphaGaussians	ScalarWidget.h	/^    Gaussian alphaGaussians[20];$/;"	m	class:ScalarWidget	access:private
ScalarWidget::alphaHistogram	ScalarWidget.h	/^    float* alphaHistogram;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::alphaLast	ScalarWidget.h	/^    ScalarWidgetControlPoint* alphaLast;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::alphaOpacities	ScalarWidget.h	/^    float * alphaOpacities;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::areaBox	ScalarWidget.h	/^    GLMotif::Box areaBox;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::blueFirst	ScalarWidget.h	/^    ScalarWidgetControlPoint* blueFirst;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::blueGaussian	ScalarWidget.h	/^    bool blueGaussian;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::blueGaussians	ScalarWidget.h	/^    Gaussian blueGaussians[20];$/;"	m	class:ScalarWidget	access:private
ScalarWidget::blueHistogram	ScalarWidget.h	/^    float* blueHistogram;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::blueLast	ScalarWidget.h	/^    ScalarWidgetControlPoint* blueLast;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::blueOpacities	ScalarWidget.h	/^    float * blueOpacities;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::calcNaturalSize	ScalarWidget.cpp	/^GLMotif::Vector ScalarWidget::calcNaturalSize(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::calcNaturalSize	ScalarWidget.h	/^    virtual GLMotif::Vector calcNaturalSize(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::calculateHistogram	ScalarWidget.cpp	/^void ScalarWidget::calculateHistogram(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::calculateHistogram	ScalarWidget.h	/^    void calculateHistogram(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::changedCallbacks	ScalarWidget.h	/^    Misc::CallbackList changedCallbacks;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::component	ScalarWidget.h	/^    int component;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::controlPoint	ScalarWidget.h	/^    ScalarWidgetControlPoint* controlPoint;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::controlPointChangedCallbacks	ScalarWidget.h	/^    Misc::CallbackList controlPointChangedCallbacks;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::controlPointScalar	ScalarWidget.h	/^    float controlPointScalar;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::controlPointSize	ScalarWidget.h	/^    GLfloat controlPointSize;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::create	ScalarWidget.cpp	/^void ScalarWidget::create(int ramp) {$/;"	f	class:ScalarWidget	signature:(int ramp)
ScalarWidget::create	ScalarWidget.cpp	/^void ScalarWidget::create(int ramp, double _minimum, double _maximum, int component) {$/;"	f	class:ScalarWidget	signature:(int ramp, double _minimum, double _maximum, int component)
ScalarWidget::create	ScalarWidget.cpp	/^void ScalarWidget::create(int ramp, int component) {$/;"	f	class:ScalarWidget	signature:(int ramp, int component)
ScalarWidget::create	ScalarWidget.cpp	/^void ScalarWidget::create(int rampCreationType, double _minimum, double _maximum) {$/;"	f	class:ScalarWidget	signature:(int rampCreationType, double _minimum, double _maximum)
ScalarWidget::create	ScalarWidget.h	/^    void create(int ramp);$/;"	p	class:ScalarWidget	access:public	signature:(int ramp)
ScalarWidget::create	ScalarWidget.h	/^    void create(int ramp, double _minimum, double _maximum, int component);$/;"	p	class:ScalarWidget	access:public	signature:(int ramp, double _minimum, double _maximum, int component)
ScalarWidget::create	ScalarWidget.h	/^    void create(int ramp, int component);$/;"	p	class:ScalarWidget	access:public	signature:(int ramp, int component)
ScalarWidget::create	ScalarWidget.h	/^    void create(int rampCreationType, double _minimum, double _maximum);$/;"	p	class:ScalarWidget	access:public	signature:(int rampCreationType, double _minimum, double _maximum)
ScalarWidget::currentGaussian	ScalarWidget.h	/^    int currentGaussian;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::currentMode	ScalarWidget.h	/^    Mode currentMode;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::deleteControlPoint	ScalarWidget.cpp	/^void ScalarWidget::deleteControlPoint(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::deleteControlPoint	ScalarWidget.h	/^    void deleteControlPoint(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::deleteControlPoints	ScalarWidget.cpp	/^void ScalarWidget::deleteControlPoints(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::deleteControlPoints	ScalarWidget.h	/^    void deleteControlPoints(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::determineControlPoint	ScalarWidget.cpp	/^ScalarWidgetControlPoint* ScalarWidget::determineControlPoint(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
ScalarWidget::determineControlPoint	ScalarWidget.h	/^    ScalarWidgetControlPoint* determineControlPoint(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
ScalarWidget::dragOffset	ScalarWidget.h	/^    GLMotif::Point::Vector dragOffset;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::dragging	ScalarWidget.h	/^    bool dragging;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::draw	ScalarWidget.cpp	/^void ScalarWidget::draw(GLContextData& contextData) const {$/;"	f	class:ScalarWidget	signature:(GLContextData& contextData) const
ScalarWidget::draw	ScalarWidget.h	/^    virtual void draw(GLContextData& contextData) const;$/;"	p	class:ScalarWidget	access:public	signature:(GLContextData& contextData) const
ScalarWidget::drawArea	ScalarWidget.cpp	/^void ScalarWidget::drawArea(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::drawArea	ScalarWidget.h	/^    void drawArea(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::drawControlPoints	ScalarWidget.cpp	/^void ScalarWidget::drawControlPoints(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::drawControlPoints	ScalarWidget.h	/^    void drawControlPoints(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::drawHistogram	ScalarWidget.cpp	/^void ScalarWidget::drawHistogram(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::drawHistogram	ScalarWidget.h	/^    void drawHistogram(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::drawLine	ScalarWidget.cpp	/^void ScalarWidget::drawLine(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::drawLine	ScalarWidget.h	/^    void drawLine(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::drawMargin	ScalarWidget.cpp	/^void ScalarWidget::drawMargin(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::drawMargin	ScalarWidget.h	/^    void drawMargin(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::exportControlPointValues	ScalarWidget.cpp	/^std::vector<double> ScalarWidget::exportControlPointValues( void )$/;"	f	class:ScalarWidget	signature:( void )
ScalarWidget::exportControlPointValues	ScalarWidget.h	/^    std::vector<double> exportControlPointValues(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::exportScalar	ScalarWidget.cpp	/^void ScalarWidget::exportScalar(double* colormap) const {$/;"	f	class:ScalarWidget	signature:(double* colormap) const
ScalarWidget::exportScalar	ScalarWidget.cpp	/^void ScalarWidget::exportScalar(double* colormap, int component) {$/;"	f	class:ScalarWidget	signature:(double* colormap, int component)
ScalarWidget::exportScalar	ScalarWidget.h	/^    void exportScalar(double* _scalar) const;$/;"	p	class:ScalarWidget	access:public	signature:(double* _scalar) const
ScalarWidget::exportScalar	ScalarWidget.h	/^    void exportScalar(double* colormap, int component);$/;"	p	class:ScalarWidget	access:public	signature:(double* colormap, int component)
ScalarWidget::findGaussianControlPoint	ScalarWidget.cpp	/^bool ScalarWidget::findGaussianControlPoint(float x, float y, float z) {$/;"	f	class:ScalarWidget	signature:(float x, float y, float z)
ScalarWidget::findGaussianControlPoint	ScalarWidget.h	/^    bool findGaussianControlPoint(float x, float y, float z);$/;"	p	class:ScalarWidget	access:public	signature:(float x, float y, float z)
ScalarWidget::findRecipient	ScalarWidget.cpp	/^bool ScalarWidget::findRecipient(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
ScalarWidget::findRecipient	ScalarWidget.h	/^    virtual bool findRecipient(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
ScalarWidget::first	ScalarWidget.h	/^    ScalarWidgetControlPoint* first;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::gaussian	ScalarWidget.h	/^    bool gaussian;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::gaussians	ScalarWidget.h	/^    Gaussian * gaussians;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::getChangedCallbacks	ScalarWidget.cpp	/^Misc::CallbackList& ScalarWidget::getChangedCallbacks(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::getChangedCallbacks	ScalarWidget.h	/^    Misc::CallbackList& getChangedCallbacks(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::getControlPointChangedCallbacks	ScalarWidget.cpp	/^Misc::CallbackList& ScalarWidget::getControlPointChangedCallbacks(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::getControlPointChangedCallbacks	ScalarWidget.h	/^    Misc::CallbackList& getControlPointChangedCallbacks(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::getControlPointScalar	ScalarWidget.cpp	/^float ScalarWidget::getControlPointScalar(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::getControlPointScalar	ScalarWidget.h	/^    float getControlPointScalar(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::getGaussian	ScalarWidget.cpp	/^bool ScalarWidget::getGaussian(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::getGaussian	ScalarWidget.h	/^    bool getGaussian(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::getNumberOfControlPoints	ScalarWidget.cpp	/^int ScalarWidget::getNumberOfControlPoints(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::getNumberOfControlPoints	ScalarWidget.h	/^    int getNumberOfControlPoints(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::getOpacities	ScalarWidget.cpp	/^void ScalarWidget::getOpacities(int component) {$/;"	f	class:ScalarWidget	signature:(int component)
ScalarWidget::getOpacities	ScalarWidget.cpp	/^void ScalarWidget::getOpacities(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::getOpacities	ScalarWidget.h	/^    void getOpacities(int component);$/;"	p	class:ScalarWidget	access:public	signature:(int component)
ScalarWidget::getOpacities	ScalarWidget.h	/^    void getOpacities(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidget::getScalar	ScalarWidget.cpp	/^void ScalarWidget::getScalar(float* _scalar) {$/;"	f	class:ScalarWidget	signature:(float* _scalar)
ScalarWidget::getScalar	ScalarWidget.h	/^    void getScalar(float* _scalar);$/;"	p	class:ScalarWidget	access:public	signature:(float* _scalar)
ScalarWidget::getStorage	ScalarWidget.cpp	/^ScalarWidgetStorage* ScalarWidget::getStorage(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::getStorage	ScalarWidget.h	/^    ScalarWidgetStorage* getStorage(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::getValueRange	ScalarWidget.cpp	/^const std::pair<double, double>& ScalarWidget::getValueRange(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::getValueRange	ScalarWidget.h	/^    const std::pair<double,double>& getValueRange(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::greenFirst	ScalarWidget.h	/^    ScalarWidgetControlPoint* greenFirst;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::greenGaussian	ScalarWidget.h	/^     bool greenGaussian;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::greenGaussians	ScalarWidget.h	/^     Gaussian greenGaussians[20];$/;"	m	class:ScalarWidget	access:private
ScalarWidget::greenHistogram	ScalarWidget.h	/^     float* greenHistogram;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::greenLast	ScalarWidget.h	/^     ScalarWidgetControlPoint* greenLast;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::greenOpacities	ScalarWidget.h	/^     float * greenOpacities;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::histogram	ScalarWidget.h	/^    float* histogram;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::insertControlPoint	ScalarWidget.cpp	/^void ScalarWidget::insertControlPoint(double _value) {$/;"	f	class:ScalarWidget	signature:(double _value)
ScalarWidget::insertControlPoint	ScalarWidget.h	/^    void insertControlPoint(double _value);$/;"	p	class:ScalarWidget	access:public	signature:(double _value)
ScalarWidget::is1D	ScalarWidget.h	/^    bool is1D;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::isDragging	ScalarWidget.cpp	/^bool ScalarWidget::isDragging(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
ScalarWidget::isDragging	ScalarWidget.h	/^    bool isDragging(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
ScalarWidget::last	ScalarWidget.h	/^    ScalarWidgetControlPoint* last;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::marginWidth	ScalarWidget.h	/^    GLfloat marginWidth;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::numberOfAlphaGaussians	ScalarWidget.h	/^    int numberOfAlphaGaussians;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::numberOfBlueGaussians	ScalarWidget.h	/^    int numberOfBlueGaussians;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::numberOfEntries	ScalarWidget.h	/^    int numberOfEntries;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::numberOfGaussians	ScalarWidget.h	/^    int numberOfGaussians;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::numberOfGreenGaussians	ScalarWidget.h	/^    int numberOfGreenGaussians;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::numberOfRedGaussians	ScalarWidget.h	/^    int numberOfRedGaussians;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::opacities	ScalarWidget.h	/^    float * opacities;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::pointerButtonDown	ScalarWidget.cpp	/^void ScalarWidget::pointerButtonDown(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
ScalarWidget::pointerButtonDown	ScalarWidget.h	/^    virtual void pointerButtonDown(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
ScalarWidget::pointerButtonUp	ScalarWidget.cpp	/^void ScalarWidget::pointerButtonUp(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
ScalarWidget::pointerButtonUp	ScalarWidget.h	/^    virtual void pointerButtonUp(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
ScalarWidget::pointerMotion	ScalarWidget.cpp	/^void ScalarWidget::pointerMotion(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
ScalarWidget::pointerMotion	ScalarWidget.h	/^    virtual void pointerMotion(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
ScalarWidget::preferredSize	ScalarWidget.h	/^    GLMotif::Vector preferredSize;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::redFirst	ScalarWidget.h	/^    ScalarWidgetControlPoint* redFirst;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::redGaussian	ScalarWidget.h	/^    bool redGaussian;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::redGaussians	ScalarWidget.h	/^    Gaussian redGaussians[20];$/;"	m	class:ScalarWidget	access:private
ScalarWidget::redHistogram	ScalarWidget.h	/^    float* redHistogram;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::redLast	ScalarWidget.h	/^    ScalarWidgetControlPoint* redLast;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::redOpacities	ScalarWidget.h	/^    float * redOpacities;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::removeGaussian	ScalarWidget.cpp	/^void ScalarWidget::removeGaussian(int which) {$/;"	f	class:ScalarWidget	signature:(int which)
ScalarWidget::removeGaussian	ScalarWidget.h	/^    void removeGaussian(int which);$/;"	p	class:ScalarWidget	access:public	signature:(int which)
ScalarWidget::resize	ScalarWidget.cpp	/^void ScalarWidget::resize(const GLMotif::Box& _exterior) {$/;"	f	class:ScalarWidget	signature:(const GLMotif::Box& _exterior)
ScalarWidget::resize	ScalarWidget.h	/^    virtual void resize(const GLMotif::Box& _exterior);$/;"	p	class:ScalarWidget	access:public	signature:(const GLMotif::Box& _exterior)
ScalarWidget::saveState	ScalarWidget.cpp	/^void ScalarWidget::saveState(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::saveState	ScalarWidget.h	/^    void saveState(void);$/;"	p	class:ScalarWidget	access:private	signature:(void)
ScalarWidget::selectControlPoint	ScalarWidget.cpp	/^void ScalarWidget::selectControlPoint(int i) {$/;"	f	class:ScalarWidget	signature:(int i)
ScalarWidget::selectControlPoint	ScalarWidget.h	/^    void selectControlPoint(int i);$/;"	p	class:ScalarWidget	access:public	signature:(int i)
ScalarWidget::setComponent	ScalarWidget.cpp	/^void ScalarWidget::setComponent(int component) {$/;"	f	class:ScalarWidget	signature:(int component)
ScalarWidget::setComponent	ScalarWidget.h	/^    void setComponent(int component);$/;"	p	class:ScalarWidget	access:public	signature:(int component)
ScalarWidget::setControlPointScalar	ScalarWidget.cpp	/^void ScalarWidget::setControlPointScalar(float _scalar) {$/;"	f	class:ScalarWidget	signature:(float _scalar)
ScalarWidget::setControlPointScalar	ScalarWidget.h	/^    void setControlPointScalar(float _scalar);$/;"	p	class:ScalarWidget	access:public	signature:(float _scalar)
ScalarWidget::setControlPointSize	ScalarWidget.cpp	/^void ScalarWidget::setControlPointSize(GLfloat _controlPointSize) {$/;"	f	class:ScalarWidget	signature:(GLfloat _controlPointSize)
ScalarWidget::setControlPointSize	ScalarWidget.h	/^    void setControlPointSize(GLfloat _controlPointSize);$/;"	p	class:ScalarWidget	access:public	signature:(GLfloat _controlPointSize)
ScalarWidget::setControlPointValue	ScalarWidget.cpp	/^void ScalarWidget::setControlPointValue(double _value) {$/;"	f	class:ScalarWidget	signature:(double _value)
ScalarWidget::setControlPointValue	ScalarWidget.h	/^    void setControlPointValue(double _value);$/;"	p	class:ScalarWidget	access:public	signature:(double _value)
ScalarWidget::setGaussian	ScalarWidget.cpp	/^void ScalarWidget::setGaussian(bool gaussian) {$/;"	f	class:ScalarWidget	signature:(bool gaussian)
ScalarWidget::setGaussian	ScalarWidget.h	/^    void setGaussian(bool gaussian);$/;"	p	class:ScalarWidget	access:public	signature:(bool gaussian)
ScalarWidget::setHistogram	ScalarWidget.cpp	/^void ScalarWidget::setHistogram(float* hist)$/;"	f	class:ScalarWidget	signature:(float* hist)
ScalarWidget::setHistogram	ScalarWidget.h	/^    void setHistogram(float* hist);$/;"	p	class:ScalarWidget	access:public	signature:(float* hist)
ScalarWidget::setMarginWidth	ScalarWidget.cpp	/^void ScalarWidget::setMarginWidth(GLfloat _marginWidth) {$/;"	f	class:ScalarWidget	signature:(GLfloat _marginWidth)
ScalarWidget::setMarginWidth	ScalarWidget.h	/^    void setMarginWidth(GLfloat _marginWidth);$/;"	p	class:ScalarWidget	access:public	signature:(GLfloat _marginWidth)
ScalarWidget::setPreferredSize	ScalarWidget.cpp	/^void ScalarWidget::setPreferredSize(const GLMotif::Vector& _preferredSize) {$/;"	f	class:ScalarWidget	signature:(const GLMotif::Vector& _preferredSize)
ScalarWidget::setPreferredSize	ScalarWidget.h	/^    void setPreferredSize(const GLMotif::Vector& _preferredSize);$/;"	p	class:ScalarWidget	access:public	signature:(const GLMotif::Vector& _preferredSize)
ScalarWidget::setStorage	ScalarWidget.cpp	/^void ScalarWidget::setStorage(ScalarWidgetStorage* _storage) {$/;"	f	class:ScalarWidget	signature:(ScalarWidgetStorage* _storage)
ScalarWidget::setStorage	ScalarWidget.h	/^    void setStorage(ScalarWidgetStorage* _scalarStorage);$/;"	p	class:ScalarWidget	access:public	signature:(ScalarWidgetStorage* _scalarStorage)
ScalarWidget::unselected	ScalarWidget.h	/^    bool unselected;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::updateControlPoints	ScalarWidget.cpp	/^void ScalarWidget::updateControlPoints(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::updateControlPoints	ScalarWidget.h	/^    void updateControlPoints(void);$/;"	p	class:ScalarWidget	access:private	signature:(void)
ScalarWidget::updatePointers	ScalarWidget.cpp	/^void ScalarWidget::updatePointers(int component) {$/;"	f	class:ScalarWidget	signature:(int component)
ScalarWidget::updatePointers	ScalarWidget.h	/^    void updatePointers(int component);$/;"	p	class:ScalarWidget	access:private	signature:(int component)
ScalarWidget::useAs1DWidget	ScalarWidget.cpp	/^void ScalarWidget::useAs1DWidget(bool enable)$/;"	f	class:ScalarWidget	signature:(bool enable)
ScalarWidget::useAs1DWidget	ScalarWidget.h	/^    void useAs1DWidget(bool enable);$/;"	p	class:ScalarWidget	access:public	signature:(bool enable)
ScalarWidget::valueRange	ScalarWidget.h	/^    std::pair<double,double> valueRange;$/;"	m	class:ScalarWidget	access:private
ScalarWidget::~ScalarWidget	ScalarWidget.cpp	/^ScalarWidget::~ScalarWidget(void) {$/;"	f	class:ScalarWidget	signature:(void)
ScalarWidget::~ScalarWidget	ScalarWidget.h	/^    virtual ~ScalarWidget(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
ScalarWidgetCallbackData	ScalarWidgetCallbackData.cpp	/^ScalarWidgetCallbackData::ScalarWidgetCallbackData(ScalarWidget* _scalarWidget) {$/;"	f	class:ScalarWidgetCallbackData	signature:(ScalarWidget* _scalarWidget)
ScalarWidgetCallbackData	ScalarWidgetCallbackData.cpp	/^ScalarWidgetCallbackData::ScalarWidgetCallbackData(void) {$/;"	f	class:ScalarWidgetCallbackData	signature:(void)
ScalarWidgetCallbackData	ScalarWidgetCallbackData.h	/^	ScalarWidgetCallbackData(ScalarWidget* _scalarWidget);$/;"	p	class:ScalarWidgetCallbackData	access:public	signature:(ScalarWidget* _scalarWidget)
ScalarWidgetCallbackData	ScalarWidgetCallbackData.h	/^	ScalarWidgetCallbackData(void);$/;"	p	class:ScalarWidgetCallbackData	access:public	signature:(void)
ScalarWidgetCallbackData	ScalarWidgetCallbackData.h	/^class ScalarWidgetCallbackData : public Misc::CallbackData {$/;"	c	inherits:Misc::CallbackData
ScalarWidgetCallbackData::ScalarWidgetCallbackData	ScalarWidgetCallbackData.cpp	/^ScalarWidgetCallbackData::ScalarWidgetCallbackData(ScalarWidget* _scalarWidget) {$/;"	f	class:ScalarWidgetCallbackData	signature:(ScalarWidget* _scalarWidget)
ScalarWidgetCallbackData::ScalarWidgetCallbackData	ScalarWidgetCallbackData.cpp	/^ScalarWidgetCallbackData::ScalarWidgetCallbackData(void) {$/;"	f	class:ScalarWidgetCallbackData	signature:(void)
ScalarWidgetCallbackData::ScalarWidgetCallbackData	ScalarWidgetCallbackData.h	/^	ScalarWidgetCallbackData(ScalarWidget* _scalarWidget);$/;"	p	class:ScalarWidgetCallbackData	access:public	signature:(ScalarWidget* _scalarWidget)
ScalarWidgetCallbackData::ScalarWidgetCallbackData	ScalarWidgetCallbackData.h	/^	ScalarWidgetCallbackData(void);$/;"	p	class:ScalarWidgetCallbackData	access:public	signature:(void)
ScalarWidgetCallbackData::scalarWidget	ScalarWidgetCallbackData.h	/^	ScalarWidget* scalarWidget;$/;"	m	class:ScalarWidgetCallbackData	access:public
ScalarWidgetCallbackData::~ScalarWidgetCallbackData	ScalarWidgetCallbackData.cpp	/^ScalarWidgetCallbackData::~ScalarWidgetCallbackData(void) {$/;"	f	class:ScalarWidgetCallbackData	signature:(void)
ScalarWidgetCallbackData::~ScalarWidgetCallbackData	ScalarWidgetCallbackData.h	/^	~ScalarWidgetCallbackData(void);$/;"	p	class:ScalarWidgetCallbackData	access:public	signature:(void)
ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.cpp	/^ScalarWidgetChangedCallbackData::ScalarWidgetChangedCallbackData(ScalarWidget* _scalarWidget) :$/;"	f	class:ScalarWidgetChangedCallbackData	signature:(ScalarWidget* _scalarWidget)
ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.cpp	/^ScalarWidgetChangedCallbackData::ScalarWidgetChangedCallbackData(void) {$/;"	f	class:ScalarWidgetChangedCallbackData	signature:(void)
ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.h	/^	ScalarWidgetChangedCallbackData(ScalarWidget* _scalarWidget);$/;"	p	class:ScalarWidgetChangedCallbackData	access:public	signature:(ScalarWidget* _scalarWidget)
ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.h	/^	ScalarWidgetChangedCallbackData(void);$/;"	p	class:ScalarWidgetChangedCallbackData	access:public	signature:(void)
ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.h	/^class ScalarWidgetChangedCallbackData : public ScalarWidgetCallbackData {$/;"	c	inherits:ScalarWidgetCallbackData
ScalarWidgetChangedCallbackData::ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.cpp	/^ScalarWidgetChangedCallbackData::ScalarWidgetChangedCallbackData(ScalarWidget* _scalarWidget) :$/;"	f	class:ScalarWidgetChangedCallbackData	signature:(ScalarWidget* _scalarWidget)
ScalarWidgetChangedCallbackData::ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.cpp	/^ScalarWidgetChangedCallbackData::ScalarWidgetChangedCallbackData(void) {$/;"	f	class:ScalarWidgetChangedCallbackData	signature:(void)
ScalarWidgetChangedCallbackData::ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.h	/^	ScalarWidgetChangedCallbackData(ScalarWidget* _scalarWidget);$/;"	p	class:ScalarWidgetChangedCallbackData	access:public	signature:(ScalarWidget* _scalarWidget)
ScalarWidgetChangedCallbackData::ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.h	/^	ScalarWidgetChangedCallbackData(void);$/;"	p	class:ScalarWidgetChangedCallbackData	access:public	signature:(void)
ScalarWidgetChangedCallbackData::~ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.cpp	/^ScalarWidgetChangedCallbackData::~ScalarWidgetChangedCallbackData(void) {$/;"	f	class:ScalarWidgetChangedCallbackData	signature:(void)
ScalarWidgetChangedCallbackData::~ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.h	/^	~ScalarWidgetChangedCallbackData(void);$/;"	p	class:ScalarWidgetChangedCallbackData	access:public	signature:(void)
ScalarWidgetControlPoint	ScalarWidgetControlPoint.cpp	/^ScalarWidgetControlPoint::ScalarWidgetControlPoint(double _value, float _scalar) {$/;"	f	class:ScalarWidgetControlPoint	signature:(double _value, float _scalar)
ScalarWidgetControlPoint	ScalarWidgetControlPoint.cpp	/^ScalarWidgetControlPoint::ScalarWidgetControlPoint(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
ScalarWidgetControlPoint	ScalarWidgetControlPoint.h	/^	ScalarWidgetControlPoint(double _value, float _scalar);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(double _value, float _scalar)
ScalarWidgetControlPoint	ScalarWidgetControlPoint.h	/^	ScalarWidgetControlPoint(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
ScalarWidgetControlPoint	ScalarWidgetControlPoint.h	/^class ScalarWidgetControlPoint {$/;"	c
ScalarWidgetControlPoint::ScalarWidgetControlPoint	ScalarWidgetControlPoint.cpp	/^ScalarWidgetControlPoint::ScalarWidgetControlPoint(double _value, float _scalar) {$/;"	f	class:ScalarWidgetControlPoint	signature:(double _value, float _scalar)
ScalarWidgetControlPoint::ScalarWidgetControlPoint	ScalarWidgetControlPoint.cpp	/^ScalarWidgetControlPoint::ScalarWidgetControlPoint(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
ScalarWidgetControlPoint::ScalarWidgetControlPoint	ScalarWidgetControlPoint.h	/^	ScalarWidgetControlPoint(double _value, float _scalar);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(double _value, float _scalar)
ScalarWidgetControlPoint::ScalarWidgetControlPoint	ScalarWidgetControlPoint.h	/^	ScalarWidgetControlPoint(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
ScalarWidgetControlPoint::getScalar	ScalarWidgetControlPoint.cpp	/^float ScalarWidgetControlPoint::getScalar(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
ScalarWidgetControlPoint::getScalar	ScalarWidgetControlPoint.h	/^	float getScalar(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
ScalarWidgetControlPoint::getValue	ScalarWidgetControlPoint.cpp	/^double ScalarWidgetControlPoint::getValue(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
ScalarWidgetControlPoint::getValue	ScalarWidgetControlPoint.h	/^	double getValue(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
ScalarWidgetControlPoint::getX	ScalarWidgetControlPoint.cpp	/^GLfloat ScalarWidgetControlPoint::getX(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
ScalarWidgetControlPoint::getX	ScalarWidgetControlPoint.h	/^	GLfloat getX(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
ScalarWidgetControlPoint::getY	ScalarWidgetControlPoint.cpp	/^GLfloat ScalarWidgetControlPoint::getY(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
ScalarWidgetControlPoint::getY	ScalarWidgetControlPoint.h	/^	GLfloat getY(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
ScalarWidgetControlPoint::left	ScalarWidgetControlPoint.h	/^	ScalarWidgetControlPoint* left;$/;"	m	class:ScalarWidgetControlPoint	access:public
ScalarWidgetControlPoint::right	ScalarWidgetControlPoint.h	/^	ScalarWidgetControlPoint* right;$/;"	m	class:ScalarWidgetControlPoint	access:public
ScalarWidgetControlPoint::scalar	ScalarWidgetControlPoint.h	/^	float scalar;$/;"	m	class:ScalarWidgetControlPoint	access:private
ScalarWidgetControlPoint::setScalar	ScalarWidgetControlPoint.cpp	/^void ScalarWidgetControlPoint::setScalar(float _scalar) {$/;"	f	class:ScalarWidgetControlPoint	signature:(float _scalar)
ScalarWidgetControlPoint::setScalar	ScalarWidgetControlPoint.h	/^	void setScalar(float _scalar);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(float _scalar)
ScalarWidgetControlPoint::setValue	ScalarWidgetControlPoint.cpp	/^void ScalarWidgetControlPoint::setValue(double _value) {$/;"	f	class:ScalarWidgetControlPoint	signature:(double _value)
ScalarWidgetControlPoint::setValue	ScalarWidgetControlPoint.h	/^	void setValue(double _value);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(double _value)
ScalarWidgetControlPoint::setX	ScalarWidgetControlPoint.cpp	/^void ScalarWidgetControlPoint::setX(GLfloat _x) {$/;"	f	class:ScalarWidgetControlPoint	signature:(GLfloat _x)
ScalarWidgetControlPoint::setX	ScalarWidgetControlPoint.h	/^	void setX(GLfloat _x);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(GLfloat _x)
ScalarWidgetControlPoint::setY	ScalarWidgetControlPoint.cpp	/^void ScalarWidgetControlPoint::setY(GLfloat _y) {$/;"	f	class:ScalarWidgetControlPoint	signature:(GLfloat _y)
ScalarWidgetControlPoint::setY	ScalarWidgetControlPoint.h	/^	void setY(GLfloat _y);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(GLfloat _y)
ScalarWidgetControlPoint::value	ScalarWidgetControlPoint.h	/^	double value;$/;"	m	class:ScalarWidgetControlPoint	access:private
ScalarWidgetControlPoint::x	ScalarWidgetControlPoint.h	/^	GLfloat x, y;$/;"	m	class:ScalarWidgetControlPoint	access:private
ScalarWidgetControlPoint::y	ScalarWidgetControlPoint.h	/^	GLfloat x, y;$/;"	m	class:ScalarWidgetControlPoint	access:private
ScalarWidgetControlPoint::~ScalarWidgetControlPoint	ScalarWidgetControlPoint.cpp	/^ScalarWidgetControlPoint::~ScalarWidgetControlPoint(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
ScalarWidgetControlPoint::~ScalarWidgetControlPoint	ScalarWidgetControlPoint.h	/^	~ScalarWidgetControlPoint(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.cpp	/^ScalarWidgetControlPointChangedCallbackData::ScalarWidgetControlPointChangedCallbackData(ScalarWidget* _scalarWidget,$/;"	f	class:ScalarWidgetControlPointChangedCallbackData	signature:(ScalarWidget* _scalarWidget, ScalarWidgetControlPoint* _previousControlPoint, ScalarWidgetControlPoint* _currentControlPoint)
ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.cpp	/^ScalarWidgetControlPointChangedCallbackData::ScalarWidgetControlPointChangedCallbackData(void) {$/;"	f	class:ScalarWidgetControlPointChangedCallbackData	signature:(void)
ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.h	/^	ScalarWidgetControlPointChangedCallbackData(ScalarWidget * _scalarWidget, ScalarWidgetControlPoint * _previousControlPoint, ScalarWidgetControlPoint * _currentControlPoint);$/;"	p	class:ScalarWidgetControlPointChangedCallbackData	access:public	signature:(ScalarWidget * _scalarWidget, ScalarWidgetControlPoint * _previousControlPoint, ScalarWidgetControlPoint * _currentControlPoint)
ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.h	/^	ScalarWidgetControlPointChangedCallbackData(void);$/;"	p	class:ScalarWidgetControlPointChangedCallbackData	access:public	signature:(void)
ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.h	/^class ScalarWidgetControlPointChangedCallbackData : public ScalarWidgetCallbackData {$/;"	c	inherits:ScalarWidgetCallbackData
ScalarWidgetControlPointChangedCallbackData::ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.cpp	/^ScalarWidgetControlPointChangedCallbackData::ScalarWidgetControlPointChangedCallbackData(ScalarWidget* _scalarWidget,$/;"	f	class:ScalarWidgetControlPointChangedCallbackData	signature:(ScalarWidget* _scalarWidget, ScalarWidgetControlPoint* _previousControlPoint, ScalarWidgetControlPoint* _currentControlPoint)
ScalarWidgetControlPointChangedCallbackData::ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.cpp	/^ScalarWidgetControlPointChangedCallbackData::ScalarWidgetControlPointChangedCallbackData(void) {$/;"	f	class:ScalarWidgetControlPointChangedCallbackData	signature:(void)
ScalarWidgetControlPointChangedCallbackData::ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.h	/^	ScalarWidgetControlPointChangedCallbackData(ScalarWidget * _scalarWidget, ScalarWidgetControlPoint * _previousControlPoint, ScalarWidgetControlPoint * _currentControlPoint);$/;"	p	class:ScalarWidgetControlPointChangedCallbackData	access:public	signature:(ScalarWidget * _scalarWidget, ScalarWidgetControlPoint * _previousControlPoint, ScalarWidgetControlPoint * _currentControlPoint)
ScalarWidgetControlPointChangedCallbackData::ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.h	/^	ScalarWidgetControlPointChangedCallbackData(void);$/;"	p	class:ScalarWidgetControlPointChangedCallbackData	access:public	signature:(void)
ScalarWidgetControlPointChangedCallbackData::currentControlPoint	ScalarWidgetControlPointChangedCallbackData.h	/^    ScalarWidgetControlPoint* currentControlPoint;$/;"	m	class:ScalarWidgetControlPointChangedCallbackData	access:private
ScalarWidgetControlPointChangedCallbackData::getCurrentControlPoint	ScalarWidgetControlPointChangedCallbackData.cpp	/^ScalarWidgetControlPoint* ScalarWidgetControlPointChangedCallbackData::getCurrentControlPoint(void) {$/;"	f	class:ScalarWidgetControlPointChangedCallbackData	signature:(void)
ScalarWidgetControlPointChangedCallbackData::getCurrentControlPoint	ScalarWidgetControlPointChangedCallbackData.h	/^	ScalarWidgetControlPoint* getCurrentControlPoint(void);$/;"	p	class:ScalarWidgetControlPointChangedCallbackData	access:public	signature:(void)
ScalarWidgetControlPointChangedCallbackData::previousControlPoint	ScalarWidgetControlPointChangedCallbackData.h	/^    ScalarWidgetControlPoint* previousControlPoint;$/;"	m	class:ScalarWidgetControlPointChangedCallbackData	access:private
ScalarWidgetControlPointChangedCallbackData::~ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.cpp	/^ScalarWidgetControlPointChangedCallbackData::~ScalarWidgetControlPointChangedCallbackData(void) {$/;"	f	class:ScalarWidgetControlPointChangedCallbackData	signature:(void)
ScalarWidgetControlPointChangedCallbackData::~ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.h	/^	~ScalarWidgetControlPointChangedCallbackData(void);$/;"	p	class:ScalarWidgetControlPointChangedCallbackData	access:public	signature:(void)
ScalarWidgetStorage	ScalarWidgetStorage.cpp	/^ScalarWidgetStorage::ScalarWidgetStorage(ScalarWidgetControlPoint* first) {$/;"	f	class:ScalarWidgetStorage	signature:(ScalarWidgetControlPoint* first)
ScalarWidgetStorage	ScalarWidgetStorage.cpp	/^ScalarWidgetStorage::ScalarWidgetStorage(void) {$/;"	f	class:ScalarWidgetStorage	signature:(void)
ScalarWidgetStorage	ScalarWidgetStorage.h	/^	ScalarWidgetStorage(ScalarWidgetControlPoint* first);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(ScalarWidgetControlPoint* first)
ScalarWidgetStorage	ScalarWidgetStorage.h	/^	ScalarWidgetStorage(void);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(void)
ScalarWidgetStorage	ScalarWidgetStorage.h	/^class ScalarWidgetStorage {$/;"	c
ScalarWidgetStorage::ScalarWidgetStorage	ScalarWidgetStorage.cpp	/^ScalarWidgetStorage::ScalarWidgetStorage(ScalarWidgetControlPoint* first) {$/;"	f	class:ScalarWidgetStorage	signature:(ScalarWidgetControlPoint* first)
ScalarWidgetStorage::ScalarWidgetStorage	ScalarWidgetStorage.cpp	/^ScalarWidgetStorage::ScalarWidgetStorage(void) {$/;"	f	class:ScalarWidgetStorage	signature:(void)
ScalarWidgetStorage::ScalarWidgetStorage	ScalarWidgetStorage.h	/^	ScalarWidgetStorage(ScalarWidgetControlPoint* first);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(ScalarWidgetControlPoint* first)
ScalarWidgetStorage::ScalarWidgetStorage	ScalarWidgetStorage.h	/^	ScalarWidgetStorage(void);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(void)
ScalarWidgetStorage::getNumberOfControlPoints	ScalarWidgetStorage.cpp	/^int ScalarWidgetStorage::getNumberOfControlPoints() {$/;"	f	class:ScalarWidgetStorage	signature:()
ScalarWidgetStorage::getNumberOfControlPoints	ScalarWidgetStorage.h	/^	int getNumberOfControlPoints();$/;"	p	class:ScalarWidgetStorage	access:public	signature:()
ScalarWidgetStorage::getScalar	ScalarWidgetStorage.cpp	/^float ScalarWidgetStorage::getScalar(int i) {$/;"	f	class:ScalarWidgetStorage	signature:(int i)
ScalarWidgetStorage::getScalar	ScalarWidgetStorage.h	/^	float getScalar(int i);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(int i)
ScalarWidgetStorage::getScalars	ScalarWidgetStorage.cpp	/^float* ScalarWidgetStorage::getScalars() {$/;"	f	class:ScalarWidgetStorage	signature:()
ScalarWidgetStorage::getScalars	ScalarWidgetStorage.h	/^	float* getScalars();$/;"	p	class:ScalarWidgetStorage	access:public	signature:()
ScalarWidgetStorage::getValue	ScalarWidgetStorage.cpp	/^double ScalarWidgetStorage::getValue(int i) {$/;"	f	class:ScalarWidgetStorage	signature:(int i)
ScalarWidgetStorage::getValue	ScalarWidgetStorage.h	/^	double getValue(int i);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(int i)
ScalarWidgetStorage::getValues	ScalarWidgetStorage.cpp	/^double* ScalarWidgetStorage::getValues() {$/;"	f	class:ScalarWidgetStorage	signature:()
ScalarWidgetStorage::getValues	ScalarWidgetStorage.h	/^	double* getValues();$/;"	p	class:ScalarWidgetStorage	access:public	signature:()
ScalarWidgetStorage::numberOfControlPoints	ScalarWidgetStorage.h	/^	int numberOfControlPoints;$/;"	m	class:ScalarWidgetStorage	access:private
ScalarWidgetStorage::scalars	ScalarWidgetStorage.h	/^	float* scalars;$/;"	m	class:ScalarWidgetStorage	access:private
ScalarWidgetStorage::values	ScalarWidgetStorage.h	/^	double* values;$/;"	m	class:ScalarWidgetStorage	access:private
ScalarWidgetStorage::~ScalarWidgetStorage	ScalarWidgetStorage.cpp	/^ScalarWidgetStorage::~ScalarWidgetStorage(void) {$/;"	f	class:ScalarWidgetStorage	signature:(void)
ScalarWidgetStorage::~ScalarWidgetStorage	ScalarWidgetStorage.h	/^	~ScalarWidgetStorage(void);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(void)
SetColorModeToMapScalars	ExampleVTKReader.cpp	/^  dataItem->aContourMapper->SetColorModeToMapScalars();$/;"	p	file:	signature:()
SetColorModeToMapScalars	ExampleVTKReader.cpp	/^  dataItem->bContourMapper->SetColorModeToMapScalars();$/;"	p	file:	signature:()
SetColorModeToMapScalars	ExampleVTKReader.cpp	/^  dataItem->cContourMapper->SetColorModeToMapScalars();$/;"	p	file:	signature:()
SetColorModeToMapScalars	ExampleVTKReader.cpp	/^  dataItem->freeSliceMapper->SetColorModeToMapScalars();$/;"	p	file:	signature:()
SetColorModeToMapScalars	ExampleVTKReader.cpp	/^  dataItem->xCutterMapper->SetColorModeToMapScalars();$/;"	p	file:	signature:()
SetColorModeToMapScalars	ExampleVTKReader.cpp	/^  dataItem->yCutterMapper->SetColorModeToMapScalars();$/;"	p	file:	signature:()
SetColorModeToMapScalars	ExampleVTKReader.cpp	/^  dataItem->zCutterMapper->SetColorModeToMapScalars();$/;"	p	file:	signature:()
SetColorModeToMapScalars	ExampleVTKReader.cpp	/^  mapper->SetColorModeToMapScalars();$/;"	p	file:	signature:()
SetCutFunction	ExampleVTKReader.cpp	/^  dataItem->freeSliceCutter->SetCutFunction(this->freeSlicePlane);$/;"	p	file:	signature:(this->freeSlicePlane)
SetCutFunction	ExampleVTKReader.cpp	/^  dataItem->xCutter->SetCutFunction(this->xPlane);$/;"	p	file:	signature:(this->xPlane)
SetCutFunction	ExampleVTKReader.cpp	/^  dataItem->yCutter->SetCutFunction(this->yPlane);$/;"	p	file:	signature:(this->yPlane)
SetCutFunction	ExampleVTKReader.cpp	/^  dataItem->zCutter->SetCutFunction(this->zPlane);$/;"	p	file:	signature:(this->zPlane)
SetCutFunction	ExampleVTKReader.cpp	/^  xContourCutter->SetCutFunction(this->xContourPlane);$/;"	p	file:	signature:(this->xContourPlane)
SetCutFunction	ExampleVTKReader.cpp	/^  yContourCutter->SetCutFunction(this->yContourPlane);$/;"	p	file:	signature:(this->yContourPlane)
SetCutFunction	ExampleVTKReader.cpp	/^  zContourCutter->SetCutFunction(this->zContourPlane);$/;"	p	file:	signature:(this->zContourPlane)
SetDimensions	ExampleVTKReader.cpp	/^    imageData->SetDimensions(this->DataDimensions);$/;"	p	file:	signature:(this->DataDimensions)
SetFileName	ExampleVTKReader.cpp	/^    reader->SetFileName(this->FileName);$/;"	p	file:	signature:(this->FileName)
SetFocalPoint	ExampleVTKReader.cpp	/^    dataItem->flashlight->SetFocalPoint(this->FlashlightDirection);$/;"	p	file:	signature:(this->FlashlightDirection)
SetInputConnection	DataItem.cpp	/^  this->freeSliceMapper->SetInputConnection($/;"	p	file:	signature:( this->freeSliceCutter->GetOutputPort())
SetInputData	ExampleVTKReader.cpp	/^    dataItem->aContour->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    dataItem->bContour->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    dataItem->cContour->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    dataItem->contourFilter->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    dataItem->freeSliceCutter->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    dataItem->xCutter->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    dataItem->yCutter->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    dataItem->zCutter->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    dataOutline->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    mapper->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInputData	ExampleVTKReader.cpp	/^    mapperVolume->SetInputData(imageData.GetPointer());$/;"	p	file:	signature:(imageData.GetPointer())
SetInterpolationTypeToLinear	ExampleVTKReader.cpp	/^  dataItem->propertyVolume->SetInterpolationTypeToLinear();$/;"	p	file:	signature:()
SetLightTypeToHeadlight	ExampleVTKReader.cpp	/^  dataItem->flashlight->SetLightTypeToHeadlight();$/;"	p	file:	signature:()
SetMapper	DataItem.cpp	/^  this->freeSliceActor->SetMapper(this->freeSliceMapper);$/;"	p	file:	signature:(this->freeSliceMapper)
SetMapper	ExampleVTKReader.cpp	/^  dataItem->actor->SetMapper(mapper.GetPointer());$/;"	p	file:	signature:(mapper.GetPointer())
SetMapper	ExampleVTKReader.cpp	/^  dataItem->actorOutline->SetMapper(mapperOutline.GetPointer());$/;"	p	file:	signature:(mapperOutline.GetPointer())
SetMapper	ExampleVTKReader.cpp	/^  dataItem->actorVolume->SetMapper(mapperVolume.GetPointer());$/;"	p	file:	signature:(mapperVolume.GetPointer())
SetMapper	ExampleVTKReader.cpp	/^  dataItem->actorXContourCutter->SetMapper(mapperXContourCutter.GetPointer());$/;"	p	file:	signature:(mapperXContourCutter.GetPointer())
SetMapper	ExampleVTKReader.cpp	/^  dataItem->actorYContourCutter->SetMapper(mapperYContourCutter.GetPointer());$/;"	p	file:	signature:(mapperYContourCutter.GetPointer())
SetMapper	ExampleVTKReader.cpp	/^  dataItem->actorZContourCutter->SetMapper(mapperZContourCutter.GetPointer());$/;"	p	file:	signature:(mapperZContourCutter.GetPointer())
SetMapper	ExampleVTKReader.cpp	/^  dataItem->contourActor->SetMapper(contourMapper.GetPointer());$/;"	p	file:	signature:(contourMapper.GetPointer())
SetNormal	ExampleVTKReader.cpp	/^    this->freeSlicePlane->SetNormal(this->FreeSliceNormal);$/;"	p	file:	signature:(this->FreeSliceNormal)
SetNumberOfContours	ExampleVTKReader.cpp	/^  dataItem->contourFilter->SetNumberOfContours(this->ContourValues.size());$/;"	p	file:	signature:(this->ContourValues.size())
SetOrigin	ExampleVTKReader.cpp	/^    imageData->SetOrigin(this->DataOrigin);$/;"	p	file:	signature:(this->DataOrigin)
SetOrigin	ExampleVTKReader.cpp	/^    this->freeSlicePlane->SetOrigin(this->FreeSliceOrigin);$/;"	p	file:	signature:(this->FreeSliceOrigin)
SetOrigin	ExampleVTKReader.cpp	/^    this->xContourPlane->SetOrigin(this->xOrigin + ($/;"	p	file:	signature:(this->xOrigin + ( this->xContourSlice * this->DataSpacing[0]), this->yCenter, this->zCenter)
SetOrigin	ExampleVTKReader.cpp	/^    this->xPlane->SetOrigin(this->xOrigin + ($/;"	p	file:	signature:(this->xOrigin + ( this->xSlice * this->DataSpacing[0]), this->yCenter, this->zCenter)
SetOrigin	ExampleVTKReader.cpp	/^    this->yContourPlane->SetOrigin(this->xCenter, this->yOrigin + ($/;"	p	file:	signature:(this->xCenter, this->yOrigin + ( this->yContourSlice * this->DataSpacing[1]), this->zCenter)
SetOrigin	ExampleVTKReader.cpp	/^    this->yPlane->SetOrigin(this->xCenter, this->yOrigin + ($/;"	p	file:	signature:(this->xCenter, this->yOrigin + ( this->ySlice * this->DataSpacing[1]), this->zCenter)
SetOrigin	ExampleVTKReader.cpp	/^    this->zContourPlane->SetOrigin(this->xCenter, this->yCenter,$/;"	p	file:	signature:(this->xCenter, this->yCenter, this->zOrigin + (this->zContourSlice * this->DataSpacing[2]))
SetOrigin	ExampleVTKReader.cpp	/^    this->zPlane->SetOrigin(this->xCenter, this->yCenter,$/;"	p	file:	signature:(this->xCenter, this->yCenter, this->zOrigin + (this->zSlice * this->DataSpacing[2]))
SetOrigin	ExampleVTKReader.cpp	/^  this->xContourPlane->SetOrigin(this->xOrigin +$/;"	p	file:	signature:(this->xOrigin + (this->xContourSlice * this->DataSpacing[0]), this->yCenter, this->zCenter)
SetOrigin	ExampleVTKReader.cpp	/^  this->xPlane->SetOrigin(this->xOrigin +$/;"	p	file:	signature:(this->xOrigin + (this->xSlice * this->DataSpacing[0]), this->yCenter, this->zCenter)
SetOrigin	ExampleVTKReader.cpp	/^  this->yContourPlane->SetOrigin(this->xCenter, this->yOrigin +$/;"	p	file:	signature:(this->xCenter, this->yOrigin + (this->yContourSlice * this->DataSpacing[1]), this->zCenter)
SetOrigin	ExampleVTKReader.cpp	/^  this->yPlane->SetOrigin(this->xCenter, this->yOrigin +$/;"	p	file:	signature:(this->xCenter, this->yOrigin + (this->ySlice * this->DataSpacing[1]), this->zCenter)
SetOrigin	ExampleVTKReader.cpp	/^  this->zContourPlane->SetOrigin(this->xCenter, this->yCenter, this->zOrigin +$/;"	p	file:	signature:(this->xCenter, this->yCenter, this->zOrigin + (this->zContourSlice * this->DataSpacing[2]))
SetOrigin	ExampleVTKReader.cpp	/^  this->zPlane->SetOrigin(this->xCenter, this->yCenter, this->zOrigin +$/;"	p	file:	signature:(this->xCenter, this->yCenter, this->zOrigin + (this->zSlice * this->DataSpacing[2]))
SetPosition	ExampleVTKReader.cpp	/^    dataItem->flashlight->SetPosition(this->FlashlightPosition);$/;"	p	file:	signature:(this->FlashlightPosition)
SetPositional	ExampleVTKReader.cpp	/^  dataItem->flashlight->SetPositional(true);$/;"	p	file:	signature:(true)
SetRequestedRenderMode	ExampleVTKReader.cpp	/^  mapperVolume->SetRequestedRenderMode(this->RequestedRenderMode);$/;"	p	file:	signature:(this->RequestedRenderMode)
SetScalarRange	ExampleVTKReader.cpp	/^  dataItem->aContourMapper->SetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
SetScalarRange	ExampleVTKReader.cpp	/^  dataItem->bContourMapper->SetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
SetScalarRange	ExampleVTKReader.cpp	/^  dataItem->cContourMapper->SetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
SetScalarRange	ExampleVTKReader.cpp	/^  dataItem->freeSliceMapper->SetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
SetScalarRange	ExampleVTKReader.cpp	/^  dataItem->xCutterMapper->SetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
SetScalarRange	ExampleVTKReader.cpp	/^  dataItem->yCutterMapper->SetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
SetScalarRange	ExampleVTKReader.cpp	/^  dataItem->zCutterMapper->SetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
SetScalarRange	ExampleVTKReader.cpp	/^  mapper->SetScalarRange(this->DataScalarRange);$/;"	p	file:	signature:(this->DataScalarRange)
SetSpacing	ExampleVTKReader.cpp	/^    imageData->SetSpacing(this->DataSpacing);$/;"	p	file:	signature:(this->DataSpacing)
SetTableValue	ExampleVTKReader.cpp	/^    dataItem->isosurfaceLUT->SetTableValue(i,$/;"	p	file:	signature:(i, this->IsosurfaceColormap[4*i + 0], this->IsosurfaceColormap[4*i + 1], this->IsosurfaceColormap[4*i + 2], 1.0)
SetTableValue	ExampleVTKReader.cpp	/^    dataItem->modelLUT->SetTableValue(i, this->VolumeColormap[4*i + 0],$/;"	p	file:	signature:(i, this->VolumeColormap[4*i + 0], this->VolumeColormap[4*i + 1], this->VolumeColormap[4*i + 2], 1.0)
SetTableValue	ExampleVTKReader.cpp	/^    dataItem->sliceLUT->SetTableValue(i, this->SliceColormap[4*i + 0],$/;"	p	file:	signature:(i, this->SliceColormap[4*i + 0], this->SliceColormap[4*i + 1], this->SliceColormap[4*i + 2], 1.0)
SetValue	ExampleVTKReader.cpp	/^    dataItem->contourFilter->SetValue(i, this->ContourValues.at(i));$/;"	p	file:	signature:(i, this->ContourValues.at(i))
ShadeOff	ExampleVTKReader.cpp	/^  dataItem->propertyVolume->ShadeOff();$/;"	p	file:	signature:()
SliceColormap	ExampleVTKReader.h	/^  double* SliceColormap;$/;"	m	class:ExampleVTKReader	access:private
Slices	Slices.cpp	/^Slices::Slices(double* _sliceColormap, ExampleVTKReader * _ExampleVTKReader) :$/;"	f	class:Slices	signature:(double* _sliceColormap, ExampleVTKReader * _ExampleVTKReader)
Slices	Slices.h	/^    Slices(double* _sliceColormap, ExampleVTKReader * _ExampleVTKReader);$/;"	p	class:Slices	access:public	signature:(double* _sliceColormap, ExampleVTKReader * _ExampleVTKReader)
Slices	Slices.h	/^class Slices: public GLMotif::PopupWindow {$/;"	c	inherits:GLMotif::PopupWindow
Slices::Slices	Slices.cpp	/^Slices::Slices(double* _sliceColormap, ExampleVTKReader * _ExampleVTKReader) :$/;"	f	class:Slices	signature:(double* _sliceColormap, ExampleVTKReader * _ExampleVTKReader)
Slices::Slices	Slices.h	/^    Slices(double* _sliceColormap, ExampleVTKReader * _ExampleVTKReader);$/;"	p	class:Slices	access:public	signature:(double* _sliceColormap, ExampleVTKReader * _ExampleVTKReader)
Slices::changeSlicesColorMap	Slices.cpp	/^void Slices::changeSlicesColorMap(int colormap) const {$/;"	f	class:Slices	signature:(int colormap) const
Slices::changeSlicesColorMap	Slices.h	/^    void changeSlicesColorMap(int colormap) const;$/;"	p	class:Slices	access:public	signature:(int colormap) const
Slices::changeSlicesColorMapCallback	Slices.cpp	/^void Slices::changeSlicesColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData * callBackData) {$/;"	f	class:Slices	signature:(GLMotif::RadioBox::ValueChangedCallbackData * callBackData)
Slices::changeSlicesColorMapCallback	Slices.h	/^    void changeSlicesColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData * callBackData);$/;"	p	class:Slices	access:public	signature:(GLMotif::RadioBox::ValueChangedCallbackData * callBackData)
Slices::colorMap	Slices.h	/^    ColorMap * colorMap;$/;"	m	class:Slices	access:private
Slices::colorMapChangedCallback	Slices.h	/^    void colorMapChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
Slices::colorPane	Slices.h	/^    GLMotif::Blind * colorPane;$/;"	m	class:Slices	access:private
Slices::colorSliderCallback	Slices.cpp	/^void Slices::colorSliderCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData* _callbackData)
Slices::colorSliderCallback	Slices.h	/^    void colorSliderCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
Slices::colorSliders	Slices.h	/^    GLMotif::Slider * colorSliders[3];$/;"	m	class:Slices	access:private
Slices::colorSwatchesWidgetCallback	Slices.cpp	/^void Slices::colorSwatchesWidgetCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData* _callbackData)
Slices::colorSwatchesWidgetCallback	Slices.h	/^    void colorSwatchesWidgetCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
Slices::controlPointChangedCallback	Slices.cpp	/^void Slices::controlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData* _callbackData)
Slices::controlPointChangedCallback	Slices.h	/^    void controlPointChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
Slices::createButtonBox	Slices.cpp	/^GLMotif::RowColumn * Slices::createButtonBox(GLMotif::RowColumn * & colorMapDialog) {$/;"	f	class:Slices	signature:(GLMotif::RowColumn * & colorMapDialog)
Slices::createButtonBox	Slices.h	/^    GLMotif::RowColumn * createButtonBox(GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(GLMotif::RowColumn * & colorMapDialog)
Slices::createColorEditor	Slices.cpp	/^GLMotif::RowColumn* Slices::createColorEditor(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Slices::createColorEditor	Slices.h	/^    GLMotif::RowColumn * createColorEditor(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Slices::createColorMap	Slices.cpp	/^void Slices::createColorMap(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Slices::createColorMap	Slices.h	/^    void createColorMap(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Slices::createColorMapDialog	Slices.cpp	/^void Slices::createColorMapDialog(const GLMotif::StyleSheet& styleSheet) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet)
Slices::createColorMapDialog	Slices.h	/^    void createColorMapDialog(const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet)
Slices::createColorPanel	Slices.cpp	/^void Slices::createColorPanel(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Slices::createColorPanel	Slices.h	/^    void createColorPanel(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Slices::createColorSlider	Slices.cpp	/^GLMotif::Slider* Slices::createColorSlider(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet,$/;"	f	class:Slices	signature:(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
Slices::createColorSlider	Slices.h	/^    GLMotif::Slider * createColorSlider(const char * title, GLMotif::Color color, const GLMotif::StyleSheet & styleSheet,$/;"	p	class:Slices	access:private	signature:(const char * title, GLMotif::Color color, const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorSlidersBox)
Slices::createColorSliderBox	Slices.cpp	/^GLMotif::RowColumn* Slices::createColorSliderBox(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor)
Slices::createColorSliderBox	Slices.h	/^    GLMotif::RowColumn * createColorSliderBox(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor)
Slices::createColorSliders	Slices.cpp	/^void Slices::createColorSliders(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
Slices::createColorSliders	Slices.h	/^    void createColorSliders(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor)
Slices::createColorSwatchesWidget	Slices.cpp	/^void Slices::createColorSwatchesWidget(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor)
Slices::createColorSwatchesWidget	Slices.h	/^    void createColorSwatchesWidget(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorEditor);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorEditor)
Slices::createSliceColorMapSubMenu	Slices.cpp	/^GLMotif::Popup * Slices::createSliceColorMapSubMenu(void) {$/;"	f	class:Slices	signature:(void)
Slices::createSliceColorMapSubMenu	Slices.h	/^    GLMotif::Popup * createSliceColorMapSubMenu(void);$/;"	p	class:Slices	access:private	signature:(void)
Slices::createXSlices	Slices.cpp	/^void Slices::createXSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Slices	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
Slices::createXSlices	Slices.h	/^    void createXSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Slices	access:private	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
Slices::createXYZSlices	Slices.cpp	/^void Slices::createXYZSlices(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
Slices::createXYZSlices	Slices.h	/^    void createXYZSlices(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
Slices::createYSlices	Slices.cpp	/^void Slices::createYSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Slices	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
Slices::createYSlices	Slices.h	/^    void createYSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Slices	access:private	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
Slices::createZSlices	Slices.cpp	/^void Slices::createZSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Slices	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
Slices::createZSlices	Slices.h	/^    void createZSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Slices	access:private	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
Slices::exampleVTKReader	Slices.h	/^    ExampleVTKReader * exampleVTKReader;$/;"	m	class:Slices	access:public
Slices::exportSlicesColorMap	Slices.cpp	/^void Slices::exportSlicesColorMap(double* colormap) const {$/;"	f	class:Slices	signature:(double* colormap) const
Slices::exportSlicesColorMap	Slices.h	/^    void exportSlicesColorMap(double* colormap) const;$/;"	p	class:Slices	access:public	signature:(double* colormap) const
Slices::getColorMap	Slices.cpp	/^Storage * Slices::getColorMap(void) const {$/;"	f	class:Slices	signature:(void) const
Slices::getColorMap	Slices.h	/^    Storage * getColorMap(void) const;$/;"	p	class:Slices	access:public	signature:(void) const
Slices::getSlicesColorMap	Slices.cpp	/^ColorMap * Slices::getSlicesColorMap(void) {$/;"	f	class:Slices	signature:(void)
Slices::getSlicesColorMap	Slices.cpp	/^const ColorMap * Slices::getSlicesColorMap(void) const {$/;"	f	class:Slices	signature:(void) const
Slices::getSlicesColorMap	Slices.h	/^    ColorMap* getSlicesColorMap(void);$/;"	p	class:Slices	access:public	signature:(void)
Slices::getSlicesColorMap	Slices.h	/^    const ColorMap* getSlicesColorMap(void) const;$/;"	p	class:Slices	access:public	signature:(void) const
Slices::getSlicesColorMapChangedCallbacks	Slices.cpp	/^Misc::CallbackList& Slices::getSlicesColorMapChangedCallbacks(void) {$/;"	f	class:Slices	signature:(void)
Slices::getSlicesColorMapChangedCallbacks	Slices.h	/^    Misc::CallbackList& getSlicesColorMapChangedCallbacks(void);$/;"	p	class:Slices	access:public	signature:(void)
Slices::initialize	Slices.cpp	/^void Slices::initialize(void) {$/;"	f	class:Slices	signature:(void)
Slices::initialize	Slices.h	/^    void initialize(void);$/;"	p	class:Slices	access:private	signature:(void)
Slices::removeControlPointCallback	Slices.cpp	/^void Slices::removeControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData* _callbackData)
Slices::removeControlPointCallback	Slices.h	/^    void removeControlPointCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
Slices::setColorMap	Slices.cpp	/^void Slices::setColorMap(Storage* storage) {$/;"	f	class:Slices	signature:(Storage* storage)
Slices::setColorMap	Slices.h	/^    void setColorMap(Storage* storage);$/;"	p	class:Slices	access:public	signature:(Storage* storage)
Slices::setSlicesColorMap	Slices.cpp	/^void Slices::setSlicesColorMap(int colorMapCreationType, double _minimum, double _maximum) {$/;"	f	class:Slices	signature:(int colorMapCreationType, double _minimum, double _maximum)
Slices::setSlicesColorMap	Slices.h	/^    void setSlicesColorMap(int colorMapCreationType, double _minimum, double _maximum);$/;"	p	class:Slices	access:public	signature:(int colorMapCreationType, double _minimum, double _maximum)
Slices::sliceColorMapChangedCallback	Slices.cpp	/^void Slices::sliceColorMapChangedCallback(Misc::CallbackData * callBackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData * callBackData)
Slices::sliceColorMapChangedCallback	Slices.h	/^    void sliceColorMapChangedCallback(Misc::CallbackData * callBackData);$/;"	p	class:Slices	access:public	signature:(Misc::CallbackData * callBackData)
Slices::sliceColormap	Slices.h	/^    double* sliceColormap;$/;"	m	class:Slices	access:private
Slices::sliderCallback	Slices.cpp	/^void Slices::sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData) {$/;"	f	class:Slices	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
Slices::sliderCallback	Slices.h	/^    void sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData);$/;"	p	class:Slices	access:public	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
Slices::swatchesWidget	Slices.h	/^    SwatchesWidget * swatchesWidget;$/;"	m	class:Slices	access:private
Slices::toggleSelectCallback	Slices.cpp	/^void Slices::toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:Slices	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
Slices::toggleSelectCallback	Slices.h	/^    void toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData);$/;"	p	class:Slices	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData)
Slices::xSliceValue	Slices.h	/^    GLMotif::TextField* xSliceValue;$/;"	m	class:Slices	access:private
Slices::ySliceValue	Slices.h	/^    GLMotif::TextField* ySliceValue;$/;"	m	class:Slices	access:private
Slices::zSliceValue	Slices.h	/^    GLMotif::TextField* zSliceValue;$/;"	m	class:Slices	access:private
Slices::~Slices	Slices.cpp	/^Slices::~Slices(void) {$/;"	f	class:Slices	signature:(void)
Slices::~Slices	Slices.h	/^    virtual ~Slices(void);$/;"	p	class:Slices	access:public	signature:(void)
Storage	Storage.cpp	/^Storage::Storage(ControlPoint* first) {$/;"	f	class:Storage	signature:(ControlPoint* first)
Storage	Storage.cpp	/^Storage::Storage(void) {$/;"	f	class:Storage	signature:(void)
Storage	Storage.h	/^	Storage(ControlPoint* first);$/;"	p	class:Storage	access:public	signature:(ControlPoint* first)
Storage	Storage.h	/^	Storage(const Storage& source);$/;"	p	class:Storage	access:private	signature:(const Storage& source)
Storage	Storage.h	/^	Storage(void);$/;"	p	class:Storage	access:public	signature:(void)
Storage	Storage.h	/^class Storage {$/;"	c
Storage::Storage	Storage.cpp	/^Storage::Storage(ControlPoint* first) {$/;"	f	class:Storage	signature:(ControlPoint* first)
Storage::Storage	Storage.cpp	/^Storage::Storage(void) {$/;"	f	class:Storage	signature:(void)
Storage::Storage	Storage.h	/^	Storage(ControlPoint* first);$/;"	p	class:Storage	access:public	signature:(ControlPoint* first)
Storage::Storage	Storage.h	/^	Storage(const Storage& source);$/;"	p	class:Storage	access:private	signature:(const Storage& source)
Storage::Storage	Storage.h	/^	Storage(void);$/;"	p	class:Storage	access:public	signature:(void)
Storage::getNumberOfControlPoints	Storage.cpp	/^int Storage::getNumberOfControlPoints() {$/;"	f	class:Storage	signature:()
Storage::getNumberOfControlPoints	Storage.h	/^	int getNumberOfControlPoints();$/;"	p	class:Storage	access:public	signature:()
Storage::getRGBAColors	Storage.cpp	/^RGBAColor* Storage::getRGBAColors() {$/;"	f	class:Storage	signature:()
Storage::getRGBAColors	Storage.cpp	/^RGBAColor* Storage::getRGBAColors(int i) {$/;"	f	class:Storage	signature:(int i)
Storage::getRGBAColors	Storage.h	/^	RGBAColor* getRGBAColors();$/;"	p	class:Storage	access:public	signature:()
Storage::getRGBAColors	Storage.h	/^	RGBAColor* getRGBAColors(int i);$/;"	p	class:Storage	access:public	signature:(int i)
Storage::getValues	Storage.cpp	/^double Storage::getValues(int i) {$/;"	f	class:Storage	signature:(int i)
Storage::getValues	Storage.cpp	/^double* Storage::getValues() {$/;"	f	class:Storage	signature:()
Storage::getValues	Storage.h	/^	double getValues(int i);$/;"	p	class:Storage	access:public	signature:(int i)
Storage::getValues	Storage.h	/^	double* getValues();$/;"	p	class:Storage	access:public	signature:()
Storage::numberOfControlPoints	Storage.h	/^	int numberOfControlPoints;$/;"	m	class:Storage	access:private
Storage::operator =	Storage.h	/^	Storage& operator=(const Storage& source);$/;"	p	class:Storage	access:private	signature:(const Storage& source)
Storage::rgbaColors	Storage.h	/^	RGBAColor* rgbaColors;$/;"	m	class:Storage	access:private
Storage::values	Storage.h	/^	double* values;$/;"	m	class:Storage	access:private
Storage::~Storage	Storage.cpp	/^Storage::~Storage(void) {$/;"	f	class:Storage	signature:(void)
Storage::~Storage	Storage.h	/^	~Storage(void);$/;"	p	class:Storage	access:public	signature:(void)
SwatchesWidget	SwatchesWidget.cpp	/^SwatchesWidget::SwatchesWidget(const char* _name, GLMotif::Container* _parent, bool _manageChild) :$/;"	f	class:SwatchesWidget	signature:(const char* _name, GLMotif::Container* _parent, bool _manageChild)
SwatchesWidget	SwatchesWidget.h	/^	SwatchesWidget(const char* _name, GLMotif::Container* _parent, bool _manageChild=true);$/;"	p	class:SwatchesWidget	access:public	signature:(const char* _name, GLMotif::Container* _parent, bool _manageChild=true)
SwatchesWidget	SwatchesWidget.h	/^class SwatchesWidget : public GLMotif::Widget {$/;"	c	inherits:GLMotif::Widget
SwatchesWidget::SwatchesWidget	SwatchesWidget.cpp	/^SwatchesWidget::SwatchesWidget(const char* _name, GLMotif::Container* _parent, bool _manageChild) :$/;"	f	class:SwatchesWidget	signature:(const char* _name, GLMotif::Container* _parent, bool _manageChild)
SwatchesWidget::SwatchesWidget	SwatchesWidget.h	/^	SwatchesWidget(const char* _name, GLMotif::Container* _parent, bool _manageChild=true);$/;"	p	class:SwatchesWidget	access:public	signature:(const char* _name, GLMotif::Container* _parent, bool _manageChild=true)
SwatchesWidget::calcNaturalSize	SwatchesWidget.cpp	/^GLMotif::Vector SwatchesWidget::calcNaturalSize(void) const {$/;"	f	class:SwatchesWidget	signature:(void) const
SwatchesWidget::calcNaturalSize	SwatchesWidget.h	/^	virtual GLMotif::Vector calcNaturalSize(void) const;$/;"	p	class:SwatchesWidget	access:public	signature:(void) const
SwatchesWidget::colorChangedCallbacks	SwatchesWidget.h	/^	Misc::CallbackList colorChangedCallbacks;$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::currentColor	SwatchesWidget.h	/^	float* currentColor;$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::defaultSwatchSize	SwatchesWidget.h	/^	double defaultSwatchSize[2];$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::draw	SwatchesWidget.cpp	/^void SwatchesWidget::draw(GLContextData& glContextData) const {$/;"	f	class:SwatchesWidget	signature:(GLContextData& glContextData) const
SwatchesWidget::draw	SwatchesWidget.h	/^	virtual void draw(GLContextData& contextData) const;$/;"	p	class:SwatchesWidget	access:public	signature:(GLContextData& contextData) const
SwatchesWidget::drawMargin	SwatchesWidget.cpp	/^void SwatchesWidget::drawMargin(void) const {$/;"	f	class:SwatchesWidget	signature:(void) const
SwatchesWidget::drawMargin	SwatchesWidget.h	/^	void drawMargin(void) const;$/;"	p	class:SwatchesWidget	access:public	signature:(void) const
SwatchesWidget::drawSwatchesWidget	SwatchesWidget.cpp	/^void SwatchesWidget::drawSwatchesWidget(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) const {$/;"	f	class:SwatchesWidget	signature:(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) const
SwatchesWidget::drawSwatchesWidget	SwatchesWidget.h	/^	void drawSwatchesWidget(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) const;$/;"	p	class:SwatchesWidget	access:public	signature:(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) const
SwatchesWidget::drawSwatchesWidgetArea	SwatchesWidget.cpp	/^void SwatchesWidget::drawSwatchesWidgetArea(void) const {$/;"	f	class:SwatchesWidget	signature:(void) const
SwatchesWidget::drawSwatchesWidgetArea	SwatchesWidget.h	/^	void drawSwatchesWidgetArea(void) const;$/;"	p	class:SwatchesWidget	access:public	signature:(void) const
SwatchesWidget::findRecipient	SwatchesWidget.cpp	/^bool SwatchesWidget::findRecipient(GLMotif::Event& event) {$/;"	f	class:SwatchesWidget	signature:(GLMotif::Event& event)
SwatchesWidget::findRecipient	SwatchesWidget.h	/^	virtual bool findRecipient(GLMotif::Event& event);$/;"	p	class:SwatchesWidget	access:public	signature:(GLMotif::Event& event)
SwatchesWidget::gap	SwatchesWidget.h	/^	double gap[2];$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::getColorChangedCallbacks	SwatchesWidget.cpp	/^Misc::CallbackList& SwatchesWidget::getColorChangedCallbacks(void) {$/;"	f	class:SwatchesWidget	signature:(void)
SwatchesWidget::getColorChangedCallbacks	SwatchesWidget.h	/^	Misc::CallbackList& getColorChangedCallbacks(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
SwatchesWidget::getColorForCell	SwatchesWidget.cpp	/^GLubyte* SwatchesWidget::getColorForCell(int column, int row) const {$/;"	f	class:SwatchesWidget	signature:(int column, int row) const
SwatchesWidget::getColorForCell	SwatchesWidget.h	/^	GLubyte* getColorForCell(int column, int row) const;$/;"	p	class:SwatchesWidget	access:public	signature:(int column, int row) const
SwatchesWidget::getColorForLocation	SwatchesWidget.cpp	/^GLubyte* SwatchesWidget::getColorForLocation(double x, double y) {$/;"	f	class:SwatchesWidget	signature:(double x, double y)
SwatchesWidget::getColorForLocation	SwatchesWidget.h	/^	GLubyte* getColorForLocation(double x, double y);$/;"	p	class:SwatchesWidget	access:public	signature:(double x, double y)
SwatchesWidget::getCurrentColor	SwatchesWidget.cpp	/^float* SwatchesWidget::getCurrentColor(void) {$/;"	f	class:SwatchesWidget	signature:(void)
SwatchesWidget::getCurrentColor	SwatchesWidget.h	/^	float* getCurrentColor(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
SwatchesWidget::isSelected	SwatchesWidget.h	/^	bool isSelected;$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::marginWidth	SwatchesWidget.h	/^	GLfloat marginWidth;$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::numberOfColumns	SwatchesWidget.h	/^	int numberOfColumns;$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::numberOfRows	SwatchesWidget.h	/^	int numberOfRows;$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::pointerButtonDown	SwatchesWidget.cpp	/^void SwatchesWidget::pointerButtonDown(GLMotif::Event& event) {$/;"	f	class:SwatchesWidget	signature:(GLMotif::Event& event)
SwatchesWidget::pointerButtonDown	SwatchesWidget.h	/^	virtual void pointerButtonDown(GLMotif::Event& event);$/;"	p	class:SwatchesWidget	access:public	signature:(GLMotif::Event& event)
SwatchesWidget::pointerButtonUp	SwatchesWidget.cpp	/^void SwatchesWidget::pointerButtonUp(GLMotif::Event& event) {$/;"	f	class:SwatchesWidget	signature:(GLMotif::Event& event)
SwatchesWidget::pointerButtonUp	SwatchesWidget.h	/^	virtual void pointerButtonUp(GLMotif::Event& event);$/;"	p	class:SwatchesWidget	access:public	signature:(GLMotif::Event& event)
SwatchesWidget::pointerMotion	SwatchesWidget.cpp	/^void SwatchesWidget::pointerMotion(GLMotif::Event& event) {$/;"	f	class:SwatchesWidget	signature:(GLMotif::Event& event)
SwatchesWidget::pointerMotion	SwatchesWidget.h	/^	virtual void pointerMotion(GLMotif::Event& event);$/;"	p	class:SwatchesWidget	access:public	signature:(GLMotif::Event& event)
SwatchesWidget::preferredSize	SwatchesWidget.h	/^	GLMotif::Vector preferredSize;$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::preferredSwatchSize	SwatchesWidget.h	/^	double preferredSwatchSize[2];$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::resize	SwatchesWidget.cpp	/^void SwatchesWidget::resize(const GLMotif::Box& _exterior) {$/;"	f	class:SwatchesWidget	signature:(const GLMotif::Box& _exterior)
SwatchesWidget::resize	SwatchesWidget.h	/^	virtual void resize(const GLMotif::Box& _exterior);$/;"	p	class:SwatchesWidget	access:public	signature:(const GLMotif::Box& _exterior)
SwatchesWidget::setBounds	SwatchesWidget.cpp	/^void SwatchesWidget::setBounds(GLfloat width, GLfloat height) {$/;"	f	class:SwatchesWidget	signature:(GLfloat width, GLfloat height)
SwatchesWidget::setBounds	SwatchesWidget.h	/^	void setBounds(GLfloat width, GLfloat height);$/;"	p	class:SwatchesWidget	access:public	signature:(GLfloat width, GLfloat height)
SwatchesWidget::setMarginWidth	SwatchesWidget.cpp	/^void SwatchesWidget::setMarginWidth(GLfloat _marginWidth) {$/;"	f	class:SwatchesWidget	signature:(GLfloat _marginWidth)
SwatchesWidget::setMarginWidth	SwatchesWidget.h	/^	void setMarginWidth(GLfloat _marginWidth);$/;"	p	class:SwatchesWidget	access:public	signature:(GLfloat _marginWidth)
SwatchesWidget::setPreferredSize	SwatchesWidget.cpp	/^void SwatchesWidget::setPreferredSize(const GLMotif::Vector& _preferredSize) {$/;"	f	class:SwatchesWidget	signature:(const GLMotif::Vector& _preferredSize)
SwatchesWidget::setPreferredSize	SwatchesWidget.h	/^	void setPreferredSize(const GLMotif::Vector& _preferredSize);$/;"	p	class:SwatchesWidget	access:public	signature:(const GLMotif::Vector& _preferredSize)
SwatchesWidget::setPreferredSwatchSize	SwatchesWidget.cpp	/^void SwatchesWidget::setPreferredSwatchSize(void) {$/;"	f	class:SwatchesWidget	signature:(void)
SwatchesWidget::setPreferredSwatchSize	SwatchesWidget.h	/^	void setPreferredSwatchSize(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
SwatchesWidget::setSwatchesSize	SwatchesWidget.cpp	/^void SwatchesWidget::setSwatchesSize(void) {$/;"	f	class:SwatchesWidget	signature:(void)
SwatchesWidget::setSwatchesSize	SwatchesWidget.h	/^	void setSwatchesSize(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
SwatchesWidget::swatchSize	SwatchesWidget.h	/^	double swatchSize[2];$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::swatchesAreaBox	SwatchesWidget.h	/^	GLMotif::Box swatchesAreaBox;$/;"	m	class:SwatchesWidget	access:private
SwatchesWidget::~SwatchesWidget	SwatchesWidget.cpp	/^SwatchesWidget::~SwatchesWidget(void) {$/;"	f	class:SwatchesWidget	signature:(void)
SwatchesWidget::~SwatchesWidget	SwatchesWidget.h	/^	virtual ~SwatchesWidget(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
SwitchOff	ExampleVTKReader.cpp	/^    dataItem->flashlight->SwitchOff();$/;"	p	file:	signature:()
SwitchOff	ExampleVTKReader.cpp	/^  dataItem->flashlight->SwitchOff();$/;"	p	file:	signature:()
SwitchOn	ExampleVTKReader.cpp	/^    dataItem->flashlight->SwitchOn();$/;"	p	file:	signature:()
TRASFERFUNCTION1D_INCLUDED	TransferFunction1D.h	2;"	d
TransferFunction1D	TransferFunction1D.cpp	/^TransferFunction1D::TransferFunction1D(ExampleVTKReader * exampleVTKReader) :$/;"	f	class:TransferFunction1D	signature:(ExampleVTKReader * exampleVTKReader)
TransferFunction1D	TransferFunction1D.h	/^    TransferFunction1D(ExampleVTKReader * exampleVTKReader);$/;"	p	class:TransferFunction1D	access:public	signature:(ExampleVTKReader * exampleVTKReader)
TransferFunction1D	TransferFunction1D.h	/^class TransferFunction1D: public GLMotif::PopupWindow {$/;"	c	inherits:GLMotif::PopupWindow
TransferFunction1D::TransferFunction1D	TransferFunction1D.cpp	/^TransferFunction1D::TransferFunction1D(ExampleVTKReader * exampleVTKReader) :$/;"	f	class:TransferFunction1D	signature:(ExampleVTKReader * exampleVTKReader)
TransferFunction1D::TransferFunction1D	TransferFunction1D.h	/^    TransferFunction1D(ExampleVTKReader * exampleVTKReader);$/;"	p	class:TransferFunction1D	access:public	signature:(ExampleVTKReader * exampleVTKReader)
TransferFunction1D::alphaComponent	TransferFunction1D.h	/^    ScalarWidget* alphaComponent;$/;"	m	class:TransferFunction1D	access:private
TransferFunction1D::alphaControlPointChangedCallback	TransferFunction1D.cpp	/^void TransferFunction1D::alphaControlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::alphaControlPointChangedCallback	TransferFunction1D.h	/^    void alphaControlPointChangedCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::changeAlpha	TransferFunction1D.cpp	/^void TransferFunction1D::changeAlpha(int ramp) const {$/;"	f	class:TransferFunction1D	signature:(int ramp) const
TransferFunction1D::changeAlpha	TransferFunction1D.h	/^    void changeAlpha(int ramp) const;$/;"	p	class:TransferFunction1D	access:public	signature:(int ramp) const
TransferFunction1D::changeColorMap	TransferFunction1D.cpp	/^void TransferFunction1D::changeColorMap(int colormap) const {$/;"	f	class:TransferFunction1D	signature:(int colormap) const
TransferFunction1D::changeColorMap	TransferFunction1D.h	/^    void changeColorMap(int colormap) const;$/;"	p	class:TransferFunction1D	access:public	signature:(int colormap) const
TransferFunction1D::colorMap	TransferFunction1D.h	/^    ColorMap* colorMap;$/;"	m	class:TransferFunction1D	access:private
TransferFunction1D::colorMapChangedCallback	TransferFunction1D.h	/^    void colorMapChangedCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::colorPane	TransferFunction1D.h	/^    GLMotif::Blind* colorPane;$/;"	m	class:TransferFunction1D	access:private
TransferFunction1D::colorSliderCallback	TransferFunction1D.cpp	/^void TransferFunction1D::colorSliderCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::colorSliderCallback	TransferFunction1D.h	/^    void colorSliderCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::colorSliders	TransferFunction1D.h	/^    GLMotif::Slider* colorSliders[3];$/;"	m	class:TransferFunction1D	access:private
TransferFunction1D::colorSwatchesWidgetCallback	TransferFunction1D.cpp	/^void TransferFunction1D::colorSwatchesWidgetCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::colorSwatchesWidgetCallback	TransferFunction1D.h	/^    void colorSwatchesWidgetCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::controlPointChangedCallback	TransferFunction1D.cpp	/^void TransferFunction1D::controlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::controlPointChangedCallback	TransferFunction1D.h	/^    void controlPointChangedCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::createAlphaComponent	TransferFunction1D.cpp	/^void TransferFunction1D::createAlphaComponent(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createAlphaComponent	TransferFunction1D.h	/^    void createAlphaComponent(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createButtonBox	TransferFunction1D.cpp	/^GLMotif::RowColumn* TransferFunction1D::createButtonBox(GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:TransferFunction1D	signature:(GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createButtonBox	TransferFunction1D.h	/^    GLMotif::RowColumn* createButtonBox(GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createColorEditor	TransferFunction1D.cpp	/^GLMotif::RowColumn* TransferFunction1D::createColorEditor(const GLMotif::StyleSheet& styleSheet,$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createColorEditor	TransferFunction1D.h	/^    GLMotif::RowColumn* createColorEditor(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createColorMap	TransferFunction1D.cpp	/^void TransferFunction1D::createColorMap(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createColorMap	TransferFunction1D.h	/^    void createColorMap(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createColorMapDialog	TransferFunction1D.cpp	/^void TransferFunction1D::createColorMapDialog(const GLMotif::StyleSheet& styleSheet) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet)
TransferFunction1D::createColorMapDialog	TransferFunction1D.h	/^    void createColorMapDialog(const GLMotif::StyleSheet& styleSheet);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet)
TransferFunction1D::createColorPanel	TransferFunction1D.cpp	/^void TransferFunction1D::createColorPanel(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createColorPanel	TransferFunction1D.h	/^    void createColorPanel(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
TransferFunction1D::createColorSlider	TransferFunction1D.cpp	/^GLMotif::Slider* TransferFunction1D::createColorSlider(const char* title, GLMotif::Color color,$/;"	f	class:TransferFunction1D	signature:(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
TransferFunction1D::createColorSlider	TransferFunction1D.h	/^    GLMotif::Slider* createColorSlider(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet,$/;"	p	class:TransferFunction1D	access:private	signature:(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
TransferFunction1D::createColorSliderBox	TransferFunction1D.cpp	/^GLMotif::RowColumn* TransferFunction1D::createColorSliderBox(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor)
TransferFunction1D::createColorSliderBox	TransferFunction1D.h	/^    GLMotif::RowColumn* createColorSliderBox(const GLMotif::StyleSheet &styleSheet, GLMotif::RowColumn* colorEditor);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet &styleSheet, GLMotif::RowColumn* colorEditor)
TransferFunction1D::createColorSliders	TransferFunction1D.cpp	/^void TransferFunction1D::createColorSliders(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
TransferFunction1D::createColorSliders	TransferFunction1D.h	/^    void createColorSliders(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor)
TransferFunction1D::createColorSwatchesWidget	TransferFunction1D.cpp	/^void TransferFunction1D::createColorSwatchesWidget(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor)
TransferFunction1D::createColorSwatchesWidget	TransferFunction1D.h	/^    void createColorSwatchesWidget(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor)
TransferFunction1D::createTransferFunction1D	TransferFunction1D.cpp	/^void TransferFunction1D::createTransferFunction1D(int colorMapCreationType, int rampCreationType, double _minimum, double _maximum) {$/;"	f	class:TransferFunction1D	signature:(int colorMapCreationType, int rampCreationType, double _minimum, double _maximum)
TransferFunction1D::createTransferFunction1D	TransferFunction1D.h	/^    void createTransferFunction1D(int colorMapCreationType, int rampCreationType, double _minimum, double _maximum);$/;"	p	class:TransferFunction1D	access:public	signature:(int colorMapCreationType, int rampCreationType, double _minimum, double _maximum)
TransferFunction1D::exampleVTKReader	TransferFunction1D.h	/^    ExampleVTKReader * exampleVTKReader;$/;"	m	class:TransferFunction1D	access:private
TransferFunction1D::exportAlpha	TransferFunction1D.cpp	/^void TransferFunction1D::exportAlpha(double* colormap) const {$/;"	f	class:TransferFunction1D	signature:(double* colormap) const
TransferFunction1D::exportAlpha	TransferFunction1D.h	/^    void exportAlpha(double* colormap) const;$/;"	p	class:TransferFunction1D	access:public	signature:(double* colormap) const
TransferFunction1D::exportColorMap	TransferFunction1D.cpp	/^void TransferFunction1D::exportColorMap(double* colormap) const {$/;"	f	class:TransferFunction1D	signature:(double* colormap) const
TransferFunction1D::exportColorMap	TransferFunction1D.h	/^    void exportColorMap(double* colormap) const;$/;"	p	class:TransferFunction1D	access:public	signature:(double* colormap) const
TransferFunction1D::gaussianToggleButtonCallback	TransferFunction1D.cpp	/^void TransferFunction1D::gaussianToggleButtonCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:TransferFunction1D	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
TransferFunction1D::gaussianToggleButtonCallback	TransferFunction1D.h	/^    void gaussianToggleButtonCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:TransferFunction1D	access:private	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
TransferFunction1D::getAlphaChangedCallbacks	TransferFunction1D.cpp	/^Misc::CallbackList& TransferFunction1D::getAlphaChangedCallbacks(void) {$/;"	f	class:TransferFunction1D	signature:(void)
TransferFunction1D::getAlphaChangedCallbacks	TransferFunction1D.h	/^    Misc::CallbackList& getAlphaChangedCallbacks(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
TransferFunction1D::getColorMap	TransferFunction1D.cpp	/^ColorMap* TransferFunction1D::getColorMap(void) {$/;"	f	class:TransferFunction1D	signature:(void)
TransferFunction1D::getColorMap	TransferFunction1D.cpp	/^const ColorMap* TransferFunction1D::getColorMap(void) const {$/;"	f	class:TransferFunction1D	signature:(void) const
TransferFunction1D::getColorMap	TransferFunction1D.h	/^    ColorMap* getColorMap(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
TransferFunction1D::getColorMap	TransferFunction1D.h	/^    const ColorMap* getColorMap(void) const;$/;"	p	class:TransferFunction1D	access:public	signature:(void) const
TransferFunction1D::getColorMapChangedCallbacks	TransferFunction1D.cpp	/^Misc::CallbackList& TransferFunction1D::getColorMapChangedCallbacks(void) {$/;"	f	class:TransferFunction1D	signature:(void)
TransferFunction1D::getColorMapChangedCallbacks	TransferFunction1D.h	/^    Misc::CallbackList& getColorMapChangedCallbacks(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
TransferFunction1D::getTransferFunction1D	TransferFunction1D.cpp	/^Storage* TransferFunction1D::getTransferFunction1D(void) const {$/;"	f	class:TransferFunction1D	signature:(void) const
TransferFunction1D::getTransferFunction1D	TransferFunction1D.h	/^    Storage* getTransferFunction1D(void) const;$/;"	p	class:TransferFunction1D	access:public	signature:(void) const
TransferFunction1D::initialize	TransferFunction1D.cpp	/^void TransferFunction1D::initialize(void) {$/;"	f	class:TransferFunction1D	signature:(void)
TransferFunction1D::initialize	TransferFunction1D.h	/^    void initialize(void);$/;"	p	class:TransferFunction1D	access:private	signature:(void)
TransferFunction1D::interactive	TransferFunction1D.h	/^    bool interactive;$/;"	m	class:TransferFunction1D	access:private
TransferFunction1D::interactiveToggleButton	TransferFunction1D.h	/^    GLMotif::ToggleButton* interactiveToggleButton;$/;"	m	class:TransferFunction1D	access:private
TransferFunction1D::interactiveToggleButtonCallback	TransferFunction1D.cpp	/^void TransferFunction1D::interactiveToggleButtonCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:TransferFunction1D	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
TransferFunction1D::interactiveToggleButtonCallback	TransferFunction1D.h	/^    void interactiveToggleButtonCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:TransferFunction1D	access:private	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
TransferFunction1D::isDragging	TransferFunction1D.cpp	/^bool TransferFunction1D::isDragging(void) const {$/;"	f	class:TransferFunction1D	signature:(void) const
TransferFunction1D::isDragging	TransferFunction1D.h	/^    bool isDragging(void) const;$/;"	p	class:TransferFunction1D	access:public	signature:(void) const
TransferFunction1D::isInteractive	TransferFunction1D.cpp	/^bool TransferFunction1D::isInteractive(void) {$/;"	f	class:TransferFunction1D	signature:(void)
TransferFunction1D::isInteractive	TransferFunction1D.h	/^    bool isInteractive(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
TransferFunction1D::removeAlphaControlPointCallback	TransferFunction1D.cpp	/^void TransferFunction1D::removeAlphaControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::removeAlphaControlPointCallback	TransferFunction1D.h	/^    void removeAlphaControlPointCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::removeControlPointCallback	TransferFunction1D.cpp	/^void TransferFunction1D::removeControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::removeControlPointCallback	TransferFunction1D.h	/^    void removeControlPointCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
TransferFunction1D::setInteractive	TransferFunction1D.cpp	/^void TransferFunction1D::setInteractive(bool interactive) {$/;"	f	class:TransferFunction1D	signature:(bool interactive)
TransferFunction1D::setInteractive	TransferFunction1D.h	/^    void setInteractive(bool interactive);$/;"	p	class:TransferFunction1D	access:public	signature:(bool interactive)
TransferFunction1D::setTransferFunction1D	TransferFunction1D.cpp	/^void TransferFunction1D::setTransferFunction1D(Storage* storage) {$/;"	f	class:TransferFunction1D	signature:(Storage* storage)
TransferFunction1D::setTransferFunction1D	TransferFunction1D.h	/^    void setTransferFunction1D(Storage* storage);$/;"	p	class:TransferFunction1D	access:public	signature:(Storage* storage)
TransferFunction1D::swatchesWidget	TransferFunction1D.h	/^    SwatchesWidget * swatchesWidget;$/;"	m	class:TransferFunction1D	access:private
TransferFunction1D::~TransferFunction1D	TransferFunction1D.cpp	/^TransferFunction1D::~TransferFunction1D(void) {$/;"	f	class:TransferFunction1D	signature:(void)
TransferFunction1D::~TransferFunction1D	TransferFunction1D.h	/^    virtual ~TransferFunction1D(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
UP_RAMP	ScalarWidget.h	21;"	d
Update	ExampleVTKReader.cpp	/^    reader->Update();$/;"	p	file:	signature:()
Vector	ColorMap.cpp	/^	colorMapAreaBox.doInset(GLMotif::Vector(marginWidth, marginWidth, 0.0f));$/;"	p	file:	signature:(marginWidth, marginWidth, 0.0f)
Vector	Contours.cpp	/^    alphaComponent->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 20.0, styleSheet.fontHeight * 10.0, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 20.0, styleSheet.fontHeight * 10.0, 0.0f)
Vector	Isosurfaces.cpp	/^    colorMap->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 5.0, styleSheet.fontHeight * 5.0, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 5.0, styleSheet.fontHeight * 5.0, 0.0f)
Vector	Isosurfaces.cpp	/^    colorPane->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 20.0f, styleSheet.fontHeight * 1.0f, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 20.0f, styleSheet.fontHeight * 1.0f, 0.0f)
Vector	Isosurfaces.cpp	/^    swatchesWidget->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 15.0, styleSheet.fontHeight * 5.0, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 15.0, styleSheet.fontHeight * 5.0, 0.0f)
Vector	ScalarWidget.cpp	/^    areaBox.doInset(GLMotif::Vector(marginWidth, marginWidth, 0.0f));$/;"	p	file:	signature:(marginWidth, marginWidth, 0.0f)
Vector	Slices.cpp	/^    colorMap->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 5.0, styleSheet.fontHeight * 5.0, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 5.0, styleSheet.fontHeight * 5.0, 0.0f)
Vector	Slices.cpp	/^    colorPane->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 20.0f, styleSheet.fontHeight * 1.0f, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 20.0f, styleSheet.fontHeight * 1.0f, 0.0f)
Vector	Slices.cpp	/^    swatchesWidget->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 15.0, styleSheet.fontHeight * 5.0, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 15.0, styleSheet.fontHeight * 5.0, 0.0f)
Vector	SwatchesWidget.cpp	/^	swatchesAreaBox.doInset(GLMotif::Vector(marginWidth, marginWidth, 0.0f));$/;"	p	file:	signature:(marginWidth, marginWidth, 0.0f)
Vector	TransferFunction1D.cpp	/^    alphaComponent->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 20.0, styleSheet.fontHeight * 10.0, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 20.0, styleSheet.fontHeight * 10.0, 0.0f)
Vector	TransferFunction1D.cpp	/^    colorMap->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 5.0, styleSheet.fontHeight * 5.0, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 5.0, styleSheet.fontHeight * 5.0, 0.0f)
Vector	TransferFunction1D.cpp	/^    colorPane->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 20.0f, styleSheet.fontHeight * 1.0f, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 20.0f, styleSheet.fontHeight * 1.0f, 0.0f)
Vector	TransferFunction1D.cpp	/^    swatchesWidget->setPreferredSize(GLMotif::Vector(styleSheet.fontHeight * 15.0, styleSheet.fontHeight * 5.0, 0.0f));$/;"	p	file:	signature:(styleSheet.fontHeight * 15.0, styleSheet.fontHeight * 5.0, 0.0f)
Verbose	ExampleVTKReader.h	/^  bool Verbose;$/;"	m	class:ExampleVTKReader	access:private
VisibilityOff	ExampleVTKReader.cpp	/^      dataItem->actor->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actor->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorAContour->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorBContour->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorCContour->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorOutline->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorVolume->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorXContourCutter->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorXCutter->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorYContourCutter->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorYCutter->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorZContourCutter->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOff	ExampleVTKReader.cpp	/^    dataItem->actorZCutter->VisibilityOff();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^      dataItem->actor->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorAContour->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorBContour->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorCContour->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorOutline->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorVolume->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorXContourCutter->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorXCutter->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorYContourCutter->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorYCutter->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorZContourCutter->VisibilityOn();$/;"	p	file:	signature:()
VisibilityOn	ExampleVTKReader.cpp	/^    dataItem->actorZCutter->VisibilityOn();$/;"	p	file:	signature:()
Volume	ExampleVTKReader.h	/^  bool Volume;$/;"	m	class:ExampleVTKReader	access:private
VolumeColormap	ExampleVTKReader.h	/^  double* VolumeColormap;$/;"	m	class:ExampleVTKReader	access:private
Vrui	BaseLocator.h	/^namespace Vrui {$/;"	n
Vrui::popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(ContoursDialog);$/;"	p	class:Vrui	file:	signature:(ContoursDialog)
Vrui::popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(isosurfacesDialog);$/;"	p	class:Vrui	file:	signature:(isosurfacesDialog)
Vrui::popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(renderingDialog);$/;"	p	class:Vrui	file:	signature:(renderingDialog)
Vrui::popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(slicesDialog);$/;"	p	class:Vrui	file:	signature:(slicesDialog)
Vrui::popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(transferFunctionDialog);$/;"	p	class:Vrui	file:	signature:(transferFunctionDialog)
Vrui::requestUpdate	Contours.cpp	/^        Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
Vrui::requestUpdate	Contours.cpp	/^    Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
Vrui::requestUpdate	ExampleVTKReader.cpp	/^  Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
Vrui::requestUpdate	Isosurfaces.cpp	/^        Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
Vrui::requestUpdate	Isosurfaces.cpp	/^    Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
Vrui::requestUpdate	Slices.cpp	/^        Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
Vrui::requestUpdate	Slices.cpp	/^    Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
Vrui::requestUpdate	TransferFunction1D.cpp	/^    Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
Vrui::setMainMenu	ExampleVTKReader.cpp	/^  Vrui::setMainMenu(mainMenu);$/;"	p	class:Vrui	file:	signature:(mainMenu)
Vrui::setNavigationTransformation	ExampleVTKReader.cpp	/^  Vrui::setNavigationTransformation(this->Center, this->Radius);$/;"	p	class:Vrui	file:	signature:(this->Center, this->Radius)
WHITE_TO_BLACK	ColorMap.h	/^static float WHITE_TO_BLACK[2][4] = {$/;"	v
Widget::draw	ColorMap.cpp	/^	Widget::draw(contextData);$/;"	p	class:Widget	file:	signature:(contextData)
Widget::draw	ScalarWidget.cpp	/^    Widget::draw(contextData);$/;"	p	class:Widget	file:	signature:(contextData)
Widget::draw	SwatchesWidget.cpp	/^	Widget::draw(glContextData);$/;"	p	class:Widget	file:	signature:(glContextData)
XContourSlice	ExampleVTKReader.h	/^  bool XContourSlice;$/;"	m	class:ExampleVTKReader	access:private
XSlice	ExampleVTKReader.h	/^  bool XSlice;$/;"	m	class:ExampleVTKReader	access:private
YContourSlice	ExampleVTKReader.h	/^  bool YContourSlice;$/;"	m	class:ExampleVTKReader	access:private
YSlice	ExampleVTKReader.h	/^  bool YSlice;$/;"	m	class:ExampleVTKReader	access:private
ZContourSlice	ExampleVTKReader.h	/^  bool ZContourSlice;$/;"	m	class:ExampleVTKReader	access:private
ZSlice	ExampleVTKReader.h	/^  bool ZSlice;$/;"	m	class:ExampleVTKReader	access:private
_DATAITEM_H	DataItem.h	2;"	d
_EXAMPLEVTKREADER_H	ExampleVTKReader.h	2;"	d
_FLASHLIGHTLOCATOR_H_	FlashlightLocator.h	2;"	d
__FREESLICELOCATOR_H_	FreeSliceLocator.h	2;"	d
_alpha	TransferFunction1D.cpp	/^        float _alpha = alphaComponent->getControlPointScalar();$/;"	l
_color	Isosurfaces.cpp	/^    float* _color = swatchesWidget->getCurrentColor();$/;"	l
_color	Slices.cpp	/^    float* _color = swatchesWidget->getCurrentColor();$/;"	l
_color	SwatchesWidget.cpp	/^	GLubyte* _color = getColorForLocation(_x, _y);$/;"	l
_color	TransferFunction1D.cpp	/^    float* _color = swatchesWidget->getCurrentColor();$/;"	l
_controlPoint	ColorMap.cpp	/^		ControlPoint* _controlPoint=controlPoint;$/;"	l
_controlPoint	ColorMap.cpp	/^		ControlPoint* _controlPoint=new ControlPoint(_storage->getValues(i),_storage->getRGBAColors(i));$/;"	l
_controlPoint	ColorMap.cpp	/^		ControlPoint* _controlPoint[11];$/;"	l
_controlPoint	ColorMap.cpp	/^		ControlPoint* _controlPoint[2];$/;"	l
_controlPoint	ColorMap.cpp	/^		ControlPoint* _controlPoint[3];$/;"	l
_controlPoint	ColorMap.cpp	/^		ControlPoint* _controlPoint[5];$/;"	l
_controlPoint	ColorMap.cpp	/^		ControlPoint* _controlPoint[7];$/;"	l
_controlPoint	ColorMap.cpp	/^	ControlPoint* _controlPoint=0;$/;"	l
_controlPoint	ColorMap.cpp	/^	ControlPoint* _controlPoint=determineControlPoint(event);$/;"	l
_controlPoint	ColorMap.cpp	/^	ControlPoint* _controlPoint=new ControlPoint(_value,rgbaColor);$/;"	l
_controlPoint	ScalarWidget.cpp	/^            ScalarWidgetControlPoint* _controlPoint = controlPoint;$/;"	l
_controlPoint	ScalarWidget.cpp	/^        ScalarWidgetControlPoint* _controlPoint = determineControlPoint(event);$/;"	l
_controlPoint	ScalarWidget.cpp	/^        ScalarWidgetControlPoint* _controlPoint = new ScalarWidgetControlPoint(_storage->getValue(i), _storage->getScalar(i));$/;"	l
_controlPoint	ScalarWidget.cpp	/^        ScalarWidgetControlPoint* _controlPoint[2];$/;"	l
_controlPoint	ScalarWidget.cpp	/^        ScalarWidgetControlPoint* _controlPoint[4];$/;"	l
_controlPoint	ScalarWidget.cpp	/^    ScalarWidgetControlPoint* _controlPoint = 0;$/;"	l
_controlPoint	ScalarWidget.cpp	/^    ScalarWidgetControlPoint* _controlPoint = new ScalarWidgetControlPoint(_value, previousControlPoint->getScalar() * w1$/;"	l
_maximum	ColorMap.cpp	/^	double _maximum=valueRange.second;$/;"	l
_maximum	ScalarWidget.cpp	/^    double _maximum = valueRange.second;$/;"	l
_minimum	ColorMap.cpp	/^	double _minimum=valueRange.first;$/;"	l
_minimum	ScalarWidget.cpp	/^    double _minimum = valueRange.first;$/;"	l
_normal	ColorMap.cpp	/^	GLfloat _normal=1.0f\/Math::sqrt(3.0f);$/;"	l
_normal	ScalarWidget.cpp	/^    GLfloat _normal = 1.0f \/ Math::sqrt(3.0f);$/;"	l
_opacity	ColorMap.cpp	/^		GLfloat _opacity=0.0f;$/;"	l
_point	ColorMap.cpp	/^		GLMotif::Point _point=event.getWidgetPoint().getPoint()-dragOffset;$/;"	l
_point	ScalarWidget.cpp	/^            GLMotif::Point _point = event.getWidgetPoint().getPoint() - dragOffset;$/;"	l
_point	ScalarWidget.cpp	/^        GLMotif::Point _point = event.getWidgetPoint().getPoint() - dragOffset;$/;"	l
_scalar	ScalarWidget.cpp	/^            GLfloat _scalar;$/;"	l
_value	ColorMap.cpp	/^		double _value=(_point[0]-double(colorMapAreaBox.getCorner(0)[0]))*(valueRange.second-valueRange.first)\/double(colorMapAreaBox.getCorner(1)[0]-colorMapAreaBox.getCorner(0)[0])+valueRange.first;$/;"	l
_value	ColorMap.cpp	/^		double _value=(event.getWidgetPoint().getPoint()[0]-double(colorMapAreaBox.getCorner(0)[0]))*(valueRange.second-valueRange.first)\/double(colorMapAreaBox.getCorner(1)[0]-colorMapAreaBox.getCorner(0)[0])+valueRange.first;$/;"	l
_value	ScalarWidget.cpp	/^            double _value = (_point[0] - double(areaBox.getCorner(0)[0])) * (valueRange.second - valueRange.first)$/;"	l
_value	ScalarWidget.cpp	/^            double _value = (event.getWidgetPoint().getPoint()[0] - double(areaBox.getCorner(0)[0])) * (valueRange.second$/;"	l
_x	SwatchesWidget.cpp	/^	GLfloat _x = 0.0f;$/;"	l
_x	SwatchesWidget.cpp	/^	double _x=event.getWidgetPoint().getPoint()[0];$/;"	l
_y	SwatchesWidget.cpp	/^	GLfloat _y = 0.0f;$/;"	l
_y	SwatchesWidget.cpp	/^	double _y=event.getWidgetPoint().getPoint()[1];$/;"	l
aContour	DataItem.h	/^  vtkSmartPointer<vtkContourFilter> aContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
aContourMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> aContourMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
aIsosurface	ExampleVTKReader.h	/^  float aIsosurface;$/;"	m	class:ExampleVTKReader	access:private
abcIsosurfacesRowColumn	Isosurfaces.cpp	/^    GLMotif::RowColumn * abcIsosurfacesRowColumn = new GLMotif::RowColumn("ABCIsosurfacesRowColumn", colorMapDialog, false);$/;"	l
active	ClippingPlane.h	/^	bool active;$/;"	m	class:ClippingPlane	access:private
actor	DataItem.h	/^  vtkSmartPointer<vtkActor> actor;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorAContour	DataItem.h	/^  vtkSmartPointer<vtkActor> actorAContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorBContour	DataItem.h	/^  vtkSmartPointer<vtkActor> actorBContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorCContour	DataItem.h	/^  vtkSmartPointer<vtkActor> actorCContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorOutline	DataItem.h	/^  vtkSmartPointer<vtkActor> actorOutline;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorVolume	DataItem.h	/^  vtkSmartPointer<vtkVolume> actorVolume;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorXContourCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorXContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorXCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorXCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorYContourCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorYContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorYCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorYCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorZContourCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorZContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
actorZCutter	DataItem.h	/^  vtkSmartPointer<vtkActor> actorZCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
addDataItem	ExampleVTKReader.cpp	/^  contextData.addDataItem(this, dataItem);$/;"	p	file:	signature:(this, dataItem)
addGaussian	ScalarWidget.cpp	/^void ScalarWidget::addGaussian(float x, float h, float w, float bx, float by) {$/;"	f	class:ScalarWidget	signature:(float x, float h, float w, float bx, float by)
addGaussian	ScalarWidget.h	/^    void addGaussian(float x, float h, float w, float bx, float by);$/;"	p	class:ScalarWidget	access:public	signature:(float x, float h, float w, float bx, float by)
allocated	ClippingPlane.h	/^	bool allocated;$/;"	m	class:ClippingPlane	access:private
alphaChangedCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::alphaChangedCallback(Misc::CallbackData* callBackData)$/;"	f	class:ExampleVTKReader	signature:(Misc::CallbackData* callBackData)
alphaChangedCallback	ExampleVTKReader.h	/^  void alphaChangedCallback(Misc::CallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Misc::CallbackData* callBackData)
alphaChangedCallbackData	ScalarWidget.cpp	/^    ScalarWidgetChangedCallbackData alphaChangedCallbackData(this);$/;"	p	file:	signature:(this)
alphaComponent	Contours.h	/^    ScalarWidget* alphaComponent;$/;"	m	class:Contours	access:private
alphaComponent	TransferFunction1D.h	/^    ScalarWidget* alphaComponent;$/;"	m	class:TransferFunction1D	access:private
alphaControlPointChangedCallback	Contours.cpp	/^void Contours::alphaControlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Contours	signature:(Misc::CallbackData* _callbackData)
alphaControlPointChangedCallback	Contours.h	/^    void alphaControlPointChangedCallback(Misc::CallbackData* _callbackData);$/;"	p	class:Contours	access:private	signature:(Misc::CallbackData* _callbackData)
alphaControlPointChangedCallback	TransferFunction1D.cpp	/^void TransferFunction1D::alphaControlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
alphaControlPointChangedCallback	TransferFunction1D.h	/^    void alphaControlPointChangedCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
alphaFirst	ScalarWidget.h	/^    ScalarWidgetControlPoint* alphaFirst;$/;"	m	class:ScalarWidget	access:private
alphaGaussian	ScalarWidget.h	/^    bool alphaGaussian;$/;"	m	class:ScalarWidget	access:private
alphaGaussians	ScalarWidget.h	/^    Gaussian alphaGaussians[20];$/;"	m	class:ScalarWidget	access:private
alphaHistogram	ScalarWidget.h	/^    float* alphaHistogram;$/;"	m	class:ScalarWidget	access:private
alphaLast	ScalarWidget.h	/^    ScalarWidgetControlPoint* alphaLast;$/;"	m	class:ScalarWidget	access:private
alphaOpacities	ScalarWidget.h	/^    float * alphaOpacities;$/;"	m	class:ScalarWidget	access:private
alphaSubCascade	ExampleVTKReader.cpp	/^  GLMotif::CascadeButton * alphaSubCascade =$/;"	l
alphaSubMenuPopup	ExampleVTKReader.cpp	/^  GLMotif::Popup * alphaSubMenuPopup = new GLMotif::Popup($/;"	l
alphas	ExampleVTKReader.cpp	/^  GLMotif::RadioBox* alphas = new GLMotif::RadioBox($/;"	l
analysisTool	ExampleVTKReader.h	/^  int analysisTool;$/;"	m	class:ExampleVTKReader	access:private
analysisToolsCascade	ExampleVTKReader.cpp	/^  GLMotif::CascadeButton* analysisToolsCascade =$/;"	l
analysisToolsMenu	ExampleVTKReader.cpp	/^  GLMotif::SubMenu* analysisToolsMenu = new GLMotif::SubMenu($/;"	l
analysisToolsMenuPopup	ExampleVTKReader.cpp	/^  GLMotif::Popup * analysisToolsMenuPopup = new GLMotif::Popup($/;"	l
analysisTools_RadioBox	ExampleVTKReader.cpp	/^  GLMotif::RadioBox * analysisTools_RadioBox = new GLMotif::RadioBox($/;"	l
application	BaseLocator.h	/^	ExampleVTKReader* application;$/;"	m	class:BaseLocator	access:private
application	main.cpp	/^    ExampleVTKReader application(argc, argv);$/;"	p	file:	signature:(argc, argv)
areaBox	ScalarWidget.h	/^    GLMotif::Box areaBox;$/;"	m	class:ScalarWidget	access:private
assign	main.cpp	/^          name.assign(argv[i+1]);$/;"	p	file:	signature:(argv[i+1])
ax	ScalarWidget.cpp	/^    float ax = x * (x2 - x1) + x1;$/;"	l
ay	ScalarWidget.cpp	/^    float ay = y * (y2 - y1) \/ (1.0f - 0.0f) + y1;$/;"	l
az	ScalarWidget.cpp	/^    float az = z;$/;"	l
bContour	DataItem.h	/^  vtkSmartPointer<vtkContourFilter> bContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
bContourMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> bContourMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
bIsosurface	ExampleVTKReader.h	/^  float bIsosurface;$/;"	m	class:ExampleVTKReader	access:private
baseLocators	ExampleVTKReader.h	/^  BaseLocatorList baseLocators;$/;"	m	class:ExampleVTKReader	access:private
blueFirst	ScalarWidget.h	/^    ScalarWidgetControlPoint* blueFirst;$/;"	m	class:ScalarWidget	access:private
blueGaussian	ScalarWidget.h	/^    bool blueGaussian;$/;"	m	class:ScalarWidget	access:private
blueGaussians	ScalarWidget.h	/^    Gaussian blueGaussians[20];$/;"	m	class:ScalarWidget	access:private
blueHistogram	ScalarWidget.h	/^    float* blueHistogram;$/;"	m	class:ScalarWidget	access:private
blueLast	ScalarWidget.h	/^    ScalarWidgetControlPoint* blueLast;$/;"	m	class:ScalarWidget	access:private
blueOpacities	ScalarWidget.h	/^    float * blueOpacities;$/;"	m	class:ScalarWidget	access:private
buttonBox	Contours.cpp	/^    GLMotif::RowColumn * buttonBox = new GLMotif::RowColumn("ButtonBox", colorMapDialog, false);$/;"	l
buttonBox	Contours.cpp	/^    GLMotif::RowColumn* buttonBox = createButtonBox(contoursDialog);$/;"	l
buttonBox	Isosurfaces.cpp	/^    GLMotif::RowColumn * buttonBox = new GLMotif::RowColumn("ButtonBox", colorMapDialog, false);$/;"	l
buttonBox	Isosurfaces.cpp	/^    GLMotif::RowColumn* buttonBox = createButtonBox(colorMapDialog);$/;"	l
buttonBox	Slices.cpp	/^    GLMotif::RowColumn * buttonBox = new GLMotif::RowColumn("ButtonBox", colorMapDialog, false);$/;"	l
buttonBox	Slices.cpp	/^    GLMotif::RowColumn* buttonBox = createButtonBox(colorMapDialog);$/;"	l
buttonBox	TransferFunction1D.cpp	/^    GLMotif::RowColumn* buttonBox = createButtonBox(colorMapDialog);$/;"	l
buttonBox	TransferFunction1D.cpp	/^    GLMotif::RowColumn* buttonBox = new GLMotif::RowColumn("ButtonBox", colorMapDialog, false);$/;"	l
buttonPressCallback	ClippingPlaneLocator.cpp	/^void ClippingPlaneLocator::buttonPressCallback($/;"	f	class:ClippingPlaneLocator	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
buttonPressCallback	ClippingPlaneLocator.h	/^	virtual void buttonPressCallback($/;"	p	class:ClippingPlaneLocator	access:public	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
buttonPressCallback	FlashlightLocator.cpp	/^void FlashlightLocator::buttonPressCallback($/;"	f	class:FlashlightLocator	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
buttonPressCallback	FlashlightLocator.h	/^  virtual void buttonPressCallback($/;"	p	class:FlashlightLocator	access:public	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
buttonPressCallback	FreeSliceLocator.cpp	/^void FreeSliceLocator::buttonPressCallback($/;"	f	class:FreeSliceLocator	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
buttonPressCallback	FreeSliceLocator.h	/^  virtual void buttonPressCallback($/;"	p	class:FreeSliceLocator	access:public	signature:( Vrui::LocatorTool::ButtonPressCallbackData* callbackData)
buttonReleaseCallback	ClippingPlaneLocator.cpp	/^void ClippingPlaneLocator::buttonReleaseCallback($/;"	f	class:ClippingPlaneLocator	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
buttonReleaseCallback	ClippingPlaneLocator.h	/^	virtual void buttonReleaseCallback($/;"	p	class:ClippingPlaneLocator	access:public	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
buttonReleaseCallback	FlashlightLocator.cpp	/^void FlashlightLocator::buttonReleaseCallback($/;"	f	class:FlashlightLocator	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
buttonReleaseCallback	FlashlightLocator.h	/^  virtual void buttonReleaseCallback($/;"	p	class:FlashlightLocator	access:public	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
buttonReleaseCallback	FreeSliceLocator.cpp	/^void FreeSliceLocator::buttonReleaseCallback($/;"	f	class:FreeSliceLocator	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
buttonReleaseCallback	FreeSliceLocator.h	/^  virtual void buttonReleaseCallback($/;"	p	class:FreeSliceLocator	access:public	signature:( Vrui::LocatorTool::ButtonReleaseCallbackData* callbackData)
bx	Gaussian.h	/^    float bx;$/;"	m	class:Gaussian	access:private
by	Gaussian.h	/^    float by;$/;"	m	class:Gaussian	access:private
cContour	DataItem.h	/^  vtkSmartPointer<vtkContourFilter> cContour;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
cContourMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> cContourMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
cIsosurface	ExampleVTKReader.h	/^  float cIsosurface;$/;"	m	class:ExampleVTKReader	access:private
calcNaturalSize	ColorMap.cpp	/^GLMotif::Vector ColorMap::calcNaturalSize(void) const {$/;"	f	class:ColorMap	signature:(void) const
calcNaturalSize	ColorMap.h	/^	virtual GLMotif::Vector calcNaturalSize(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
calcNaturalSize	ScalarWidget.cpp	/^GLMotif::Vector ScalarWidget::calcNaturalSize(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
calcNaturalSize	ScalarWidget.h	/^    virtual GLMotif::Vector calcNaturalSize(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
calcNaturalSize	SwatchesWidget.cpp	/^GLMotif::Vector SwatchesWidget::calcNaturalSize(void) const {$/;"	f	class:SwatchesWidget	signature:(void) const
calcNaturalSize	SwatchesWidget.h	/^	virtual GLMotif::Vector calcNaturalSize(void) const;$/;"	p	class:SwatchesWidget	access:public	signature:(void) const
calculateHistogram	ScalarWidget.cpp	/^void ScalarWidget::calculateHistogram(void) {$/;"	f	class:ScalarWidget	signature:(void)
calculateHistogram	ScalarWidget.h	/^    void calculateHistogram(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
callbackData	ColorMap.cpp	/^		ControlPointChangedCallbackData callbackData(this, controlPoint, 0);$/;"	p	file:	signature:(this, controlPoint, 0)
callbackData	ColorMap.cpp	/^		ControlPointChangedCallbackData callbackData(this, controlPoint, _controlPoint);$/;"	p	file:	signature:(this, controlPoint, _controlPoint)
callbackData	ColorMap.cpp	/^	ControlPointChangedCallbackData callbackData(this, controlPoint, controlPointPtr);$/;"	p	file:	signature:(this, controlPoint, controlPointPtr)
callbackData	Isosurfaces.cpp	/^    ControlPointChangedCallbackData* callbackData = static_cast<ControlPointChangedCallbackData*> (_callbackData);$/;"	l
callbackData	ScalarWidget.cpp	/^        ScalarWidgetChangedCallbackData callbackData(this);$/;"	p	file:	signature:(this)
callbackData	ScalarWidget.cpp	/^    ScalarWidgetChangedCallbackData callbackData(this);$/;"	p	file:	signature:(this)
callbackData	Slices.cpp	/^    ControlPointChangedCallbackData* callbackData = static_cast<ControlPointChangedCallbackData*> (_callbackData);$/;"	l
callbackData	SwatchesWidget.cpp	/^	Misc::CallbackData callbackData;$/;"	l
callbackData	TransferFunction1D.cpp	/^    ControlPointChangedCallbackData* callbackData = static_cast<ControlPointChangedCallbackData*> (_callbackData);$/;"	l
callbackData	TransferFunction1D.cpp	/^    ScalarWidgetControlPointChangedCallbackData* callbackData =$/;"	l
centerDisplayButton	ExampleVTKReader.cpp	/^  GLMotif::Button* centerDisplayButton = new GLMotif::Button($/;"	l
centerDisplayCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::centerDisplayCallback(Misc::CallbackData* callBackData)$/;"	f	class:ExampleVTKReader	signature:(Misc::CallbackData* callBackData)
centerDisplayCallback	ExampleVTKReader.h	/^  void centerDisplayCallback(Misc::CallbackData* cbData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Misc::CallbackData* cbData)
changeAlpha	ExampleVTKReader.cpp	/^  transferFunctionDialog->changeAlpha(value);$/;"	p	file:	signature:(value)
changeAlpha	TransferFunction1D.cpp	/^void TransferFunction1D::changeAlpha(int ramp) const {$/;"	f	class:TransferFunction1D	signature:(int ramp) const
changeAlpha	TransferFunction1D.h	/^    void changeAlpha(int ramp) const;$/;"	p	class:TransferFunction1D	access:public	signature:(int ramp) const
changeAlphaCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::changeAlphaCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::RadioBox::ValueChangedCallbackData* callBackData)
changeAlphaCallback	ExampleVTKReader.h	/^  void changeAlphaCallback(GLMotif::RadioBox::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::RadioBox::ValueChangedCallbackData* callBackData)
changeAnalysisToolsCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::changeAnalysisToolsCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
changeAnalysisToolsCallback	ExampleVTKReader.h	/^  void changeAnalysisToolsCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
changeColorMap	ExampleVTKReader.cpp	/^  transferFunctionDialog->changeColorMap(value);$/;"	p	file:	signature:(value)
changeColorMap	TransferFunction1D.cpp	/^void TransferFunction1D::changeColorMap(int colormap) const {$/;"	f	class:TransferFunction1D	signature:(int colormap) const
changeColorMap	TransferFunction1D.h	/^    void changeColorMap(int colormap) const;$/;"	p	class:TransferFunction1D	access:public	signature:(int colormap) const
changeColorMapCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::changeColorMapCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::RadioBox::ValueChangedCallbackData* callBackData)
changeColorMapCallback	ExampleVTKReader.h	/^  void changeColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::RadioBox::ValueChangedCallbackData* callBackData)
changeIsosurfacesColorMap	Isosurfaces.cpp	/^void Isosurfaces::changeIsosurfacesColorMap(int colormap) const {$/;"	f	class:Isosurfaces	signature:(int colormap) const
changeIsosurfacesColorMap	Isosurfaces.h	/^    void changeIsosurfacesColorMap(int colormap) const;$/;"	p	class:Isosurfaces	access:public	signature:(int colormap) const
changeIsosurfacesColorMapCallback	Isosurfaces.cpp	/^void Isosurfaces::changeIsosurfacesColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData * callBackData) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RadioBox::ValueChangedCallbackData * callBackData)
changeIsosurfacesColorMapCallback	Isosurfaces.h	/^    void changeIsosurfacesColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData * callBackData);$/;"	p	class:Isosurfaces	access:public	signature:(GLMotif::RadioBox::ValueChangedCallbackData * callBackData)
changeRepresentationCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::changeRepresentationCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
changeRepresentationCallback	ExampleVTKReader.h	/^  void changeRepresentationCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
changeSlicesColorMap	Slices.cpp	/^void Slices::changeSlicesColorMap(int colormap) const {$/;"	f	class:Slices	signature:(int colormap) const
changeSlicesColorMap	Slices.h	/^    void changeSlicesColorMap(int colormap) const;$/;"	p	class:Slices	access:public	signature:(int colormap) const
changeSlicesColorMapCallback	Slices.cpp	/^void Slices::changeSlicesColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData * callBackData) {$/;"	f	class:Slices	signature:(GLMotif::RadioBox::ValueChangedCallbackData * callBackData)
changeSlicesColorMapCallback	Slices.h	/^    void changeSlicesColorMapCallback(GLMotif::RadioBox::ValueChangedCallbackData * callBackData);$/;"	p	class:Slices	access:public	signature:(GLMotif::RadioBox::ValueChangedCallbackData * callBackData)
changedCallbackData	ScalarWidget.cpp	/^                ScalarWidgetChangedCallbackData changedCallbackData(this);$/;"	p	file:	signature:(this)
changedCallbackData	ScalarWidget.cpp	/^            ScalarWidgetChangedCallbackData changedCallbackData(this);$/;"	p	file:	signature:(this)
changedCallbackData	ScalarWidget.cpp	/^        ScalarWidgetChangedCallbackData changedCallbackData(this);$/;"	p	file:	signature:(this)
changedCallbackData	ScalarWidget.cpp	/^    ScalarWidgetChangedCallbackData changedCallbackData(this);$/;"	p	file:	signature:(this)
changedCallbacks	ScalarWidget.h	/^    Misc::CallbackList changedCallbacks;$/;"	m	class:ScalarWidget	access:private
clippingPlane	ClippingPlaneLocator.h	/^	ClippingPlane * clippingPlane;$/;"	m	class:ClippingPlaneLocator	access:private
clippingPlane	ExampleVTKReader.cpp	/^      GLdouble clippingPlane[4];$/;"	l
clippingPlaneIndex	ExampleVTKReader.cpp	/^  int clippingPlaneIndex = 0;$/;"	l
clippingPlanes	ClippingPlaneLocator.cpp	/^	ClippingPlane * clippingPlanes = ExampleVTKReader->getClippingPlanes();$/;"	l
colorChangedCallbacks	SwatchesWidget.h	/^	Misc::CallbackList colorChangedCallbacks;$/;"	m	class:SwatchesWidget	access:private
colorEditor	Isosurfaces.cpp	/^    GLMotif::RowColumn* colorEditor = createColorEditor(styleSheet, colorMapDialog);$/;"	l
colorEditor	Isosurfaces.cpp	/^    GLMotif::RowColumn* colorEditor = new GLMotif::RowColumn("ColorEditor", colorMapDialog, false);$/;"	l
colorEditor	Slices.cpp	/^    GLMotif::RowColumn* colorEditor = createColorEditor(styleSheet, colorMapDialog);$/;"	l
colorEditor	Slices.cpp	/^    GLMotif::RowColumn* colorEditor = new GLMotif::RowColumn("ColorEditor", colorMapDialog, false);$/;"	l
colorEditor	TransferFunction1D.cpp	/^    GLMotif::RowColumn* colorEditor = createColorEditor(styleSheet, colorMapDialog);$/;"	l
colorEditor	TransferFunction1D.cpp	/^    GLMotif::RowColumn* colorEditor = new GLMotif::RowColumn("ColorEditor", colorMapDialog, false);$/;"	l
colorFunction	DataItem.h	/^  vtkSmartPointer<vtkColorTransferFunction> colorFunction;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
colorMap	ColorMapCallbackData.h	/^	ColorMap* colorMap;$/;"	m	class:ColorMapCallbackData	access:public
colorMap	Isosurfaces.h	/^    ColorMap * colorMap;$/;"	m	class:Isosurfaces	access:private
colorMap	Slices.h	/^    ColorMap * colorMap;$/;"	m	class:Slices	access:private
colorMap	TransferFunction1D.h	/^    ColorMap* colorMap;$/;"	m	class:TransferFunction1D	access:private
colorMapAreaBox	ColorMap.h	/^	GLMotif::Box colorMapAreaBox;$/;"	m	class:ColorMap	access:private
colorMapChangedCallback	Isosurfaces.h	/^    void colorMapChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
colorMapChangedCallback	Slices.h	/^    void colorMapChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
colorMapChangedCallback	TransferFunction1D.h	/^    void colorMapChangedCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
colorMapChangedCallbackData	ColorMap.cpp	/^		ColorMapChangedCallbackData colorMapChangedCallbackData(this);$/;"	p	file:	signature:(this)
colorMapChangedCallbackData	ColorMap.cpp	/^	ColorMapChangedCallbackData colorMapChangedCallbackData(this);$/;"	p	file:	signature:(this)
colorMapChangedCallbacks	ColorMap.h	/^	Misc::CallbackList colorMapChangedCallbacks;$/;"	m	class:ColorMap	access:private
colorMapDialog	Isosurfaces.cpp	/^    GLMotif::RowColumn* colorMapDialog = new GLMotif::RowColumn("ColorMapDialog", this, false);$/;"	l
colorMapDialog	Slices.cpp	/^    GLMotif::RowColumn* colorMapDialog = new GLMotif::RowColumn("ColorMapDialog", this, false);$/;"	l
colorMapDialog	TransferFunction1D.cpp	/^    GLMotif::RowColumn* colorMapDialog = new GLMotif::RowColumn("ColorMapDialog", this, false);$/;"	l
colorMapSubCascade	ExampleVTKReader.cpp	/^  GLMotif::CascadeButton * colorMapSubCascade =$/;"	l
colorMapSubMenuPopup	ExampleVTKReader.cpp	/^  GLMotif::Popup * colorMapSubMenuPopup = new GLMotif::Popup($/;"	l
colorMaps	ExampleVTKReader.cpp	/^  GLMotif::RadioBox* colorMaps = new GLMotif::RadioBox($/;"	l
colorPane	Contours.h	/^    GLMotif::Blind * colorPane;$/;"	m	class:Contours	access:private
colorPane	Isosurfaces.h	/^    GLMotif::Blind * colorPane;$/;"	m	class:Isosurfaces	access:private
colorPane	Slices.h	/^    GLMotif::Blind * colorPane;$/;"	m	class:Slices	access:private
colorPane	TransferFunction1D.h	/^    GLMotif::Blind* colorPane;$/;"	m	class:TransferFunction1D	access:private
colorPanel	Isosurfaces.cpp	/^    GLMotif::RowColumn* colorPanel = new GLMotif::RowColumn("ColorPanel", colorMapDialog, false);$/;"	l
colorPanel	Slices.cpp	/^    GLMotif::RowColumn* colorPanel = new GLMotif::RowColumn("ColorPanel", colorMapDialog, false);$/;"	l
colorPanel	TransferFunction1D.cpp	/^    GLMotif::RowColumn* colorPanel = new GLMotif::RowColumn("ColorPanel", colorMapDialog, false);$/;"	l
colorSlider	Isosurfaces.cpp	/^    GLMotif::Slider* colorSlider = new GLMotif::Slider(title, colorSlidersBox, GLMotif::Slider::VERTICAL, styleSheet.fontHeight$/;"	l
colorSlider	Slices.cpp	/^    GLMotif::Slider* colorSlider = new GLMotif::Slider(title, colorSlidersBox, GLMotif::Slider::VERTICAL, styleSheet.fontHeight$/;"	l
colorSlider	TransferFunction1D.cpp	/^    GLMotif::Slider* colorSlider = new GLMotif::Slider(title, colorSlidersBox, GLMotif::Slider::VERTICAL, styleSheet.fontHeight$/;"	l
colorSliderCallback	Isosurfaces.cpp	/^void Isosurfaces::colorSliderCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData* _callbackData)
colorSliderCallback	Isosurfaces.h	/^    void colorSliderCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
colorSliderCallback	Slices.cpp	/^void Slices::colorSliderCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData* _callbackData)
colorSliderCallback	Slices.h	/^    void colorSliderCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
colorSliderCallback	TransferFunction1D.cpp	/^void TransferFunction1D::colorSliderCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
colorSliderCallback	TransferFunction1D.h	/^    void colorSliderCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
colorSliders	Contours.h	/^    GLMotif::Slider * colorSliders[3];$/;"	m	class:Contours	access:private
colorSliders	Isosurfaces.h	/^    GLMotif::Slider * colorSliders[3];$/;"	m	class:Isosurfaces	access:private
colorSliders	Slices.h	/^    GLMotif::Slider * colorSliders[3];$/;"	m	class:Slices	access:private
colorSliders	TransferFunction1D.h	/^    GLMotif::Slider* colorSliders[3];$/;"	m	class:TransferFunction1D	access:private
colorSlidersBox	Isosurfaces.cpp	/^    GLMotif::RowColumn* colorSlidersBox = createColorSliderBox(styleSheet, colorEditor);$/;"	l
colorSlidersBox	Isosurfaces.cpp	/^    GLMotif::RowColumn* colorSlidersBox = new GLMotif::RowColumn("ColorSliders", colorEditor, false);$/;"	l
colorSlidersBox	Slices.cpp	/^    GLMotif::RowColumn* colorSlidersBox = createColorSliderBox(styleSheet, colorEditor);$/;"	l
colorSlidersBox	Slices.cpp	/^    GLMotif::RowColumn* colorSlidersBox = new GLMotif::RowColumn("ColorSliders", colorEditor, false);$/;"	l
colorSlidersBox	TransferFunction1D.cpp	/^    GLMotif::RowColumn* colorSlidersBox = createColorSliderBox(styleSheet, colorEditor);$/;"	l
colorSlidersBox	TransferFunction1D.cpp	/^    GLMotif::RowColumn* colorSlidersBox = new GLMotif::RowColumn("ColorSliders", colorEditor, false);$/;"	l
colorSwatchesWidgetCallback	Isosurfaces.cpp	/^void Isosurfaces::colorSwatchesWidgetCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData* _callbackData)
colorSwatchesWidgetCallback	Isosurfaces.h	/^    void colorSwatchesWidgetCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
colorSwatchesWidgetCallback	Slices.cpp	/^void Slices::colorSwatchesWidgetCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData* _callbackData)
colorSwatchesWidgetCallback	Slices.h	/^    void colorSwatchesWidgetCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
colorSwatchesWidgetCallback	TransferFunction1D.cpp	/^void TransferFunction1D::colorSwatchesWidgetCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
colorSwatchesWidgetCallback	TransferFunction1D.h	/^    void colorSwatchesWidgetCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
column	SwatchesWidget.cpp	/^	int column = int(((x-x1) \/ width)*double(numberOfColumns));$/;"	l
component	ScalarWidget.h	/^    int component;$/;"	m	class:ScalarWidget	access:private
contourActor	DataItem.h	/^  vtkSmartPointer<vtkActor> contourActor;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
contourFilter	DataItem.h	/^  vtkSmartPointer<vtkContourFilter> contourFilter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
contourLabel	Contours.cpp	/^    GLMotif::Label * contourLabel = new GLMotif::Label($/;"	l
contourMapper	ExampleVTKReader.cpp	/^  vtkNew<vtkPolyDataMapper> contourMapper;$/;"	l
contourValueChangedCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::contourValueChangedCallback(Misc::CallbackData* callBackData)$/;"	f	class:ExampleVTKReader	signature:(Misc::CallbackData* callBackData)
contourValueChangedCallback	ExampleVTKReader.h	/^  void contourValueChangedCallback(Misc::CallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Misc::CallbackData* callBackData)
contoursDialog	Contours.cpp	/^    GLMotif::RowColumn* contoursDialog =$/;"	l
controlPoint	ColorMap.h	/^	ControlPoint* controlPoint;$/;"	m	class:ColorMap	access:private
controlPoint	ScalarWidget.h	/^    ScalarWidgetControlPoint* controlPoint;$/;"	m	class:ScalarWidget	access:private
controlPointChangedCallback	Contours.cpp	/^void Contours::controlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Contours	signature:(Misc::CallbackData* _callbackData)
controlPointChangedCallback	Contours.h	/^    void controlPointChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Contours	access:private	signature:(Misc::CallbackData * callbackData)
controlPointChangedCallback	Isosurfaces.cpp	/^void Isosurfaces::controlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData* _callbackData)
controlPointChangedCallback	Isosurfaces.h	/^    void controlPointChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
controlPointChangedCallback	Slices.cpp	/^void Slices::controlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData* _callbackData)
controlPointChangedCallback	Slices.h	/^    void controlPointChangedCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
controlPointChangedCallback	TransferFunction1D.cpp	/^void TransferFunction1D::controlPointChangedCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
controlPointChangedCallback	TransferFunction1D.h	/^    void controlPointChangedCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
controlPointChangedCallbackData	ColorMap.cpp	/^		ControlPointChangedCallbackData controlPointChangedCallbackData(this, controlPoint, 0);$/;"	p	file:	signature:(this, controlPoint, 0)
controlPointChangedCallbackData	ColorMap.cpp	/^	ControlPointChangedCallbackData controlPointChangedCallbackData(this, controlPoint, _controlPoint);$/;"	p	file:	signature:(this, controlPoint, _controlPoint)
controlPointChangedCallbackData	ScalarWidget.cpp	/^            ScalarWidgetControlPointChangedCallbackData controlPointChangedCallbackData(this, controlPoint, 0);$/;"	p	file:	signature:(this, controlPoint, 0)
controlPointChangedCallbackData	ScalarWidget.cpp	/^            ScalarWidgetControlPointChangedCallbackData controlPointChangedCallbackData(this, controlPoint, _controlPoint);$/;"	p	file:	signature:(this, controlPoint, _controlPoint)
controlPointChangedCallbackData	ScalarWidget.cpp	/^        ScalarWidgetControlPointChangedCallbackData controlPointChangedCallbackData(this, controlPoint, 0);$/;"	p	file:	signature:(this, controlPoint, 0)
controlPointChangedCallbackData	ScalarWidget.cpp	/^    ScalarWidgetControlPointChangedCallbackData controlPointChangedCallbackData(this, controlPoint, _controlPoint);$/;"	p	file:	signature:(this, controlPoint, _controlPoint)
controlPointChangedCallbackData	ScalarWidget.cpp	/^    ScalarWidgetControlPointChangedCallbackData controlPointChangedCallbackData(this, controlPoint, controlPointPtr);$/;"	p	file:	signature:(this, controlPoint, controlPointPtr)
controlPointChangedCallbacks	ColorMap.h	/^	Misc::CallbackList controlPointChangedCallbacks;$/;"	m	class:ColorMap	access:private
controlPointChangedCallbacks	ScalarWidget.h	/^    Misc::CallbackList controlPointChangedCallbacks;$/;"	m	class:ScalarWidget	access:private
controlPointColor	ColorMap.h	/^	RGBAColor* controlPointColor;$/;"	m	class:ColorMap	access:private
controlPointPtr	ColorMap.cpp	/^	ControlPoint* controlPointPtr=0;$/;"	l
controlPointPtr	ColorMap.cpp	/^	ControlPoint* controlPointPtr=first->right;$/;"	l
controlPointPtr	ScalarWidget.cpp	/^    ScalarWidgetControlPoint* controlPointPtr = 0;$/;"	l
controlPointPtr	ScalarWidget.cpp	/^    ScalarWidgetControlPoint* controlPointPtr = first->right;$/;"	l
controlPointScalar	ScalarWidget.h	/^    float controlPointScalar;$/;"	m	class:ScalarWidget	access:private
controlPointSize	ColorMap.h	/^	GLfloat controlPointSize;$/;"	m	class:ColorMap	access:private
controlPointSize	ScalarWidget.h	/^    GLfloat controlPointSize;$/;"	m	class:ScalarWidget	access:private
controlPointValues	ScalarWidget.cpp	/^  std::vector<double> controlPointValues;$/;"	l
create	ScalarWidget.cpp	/^void ScalarWidget::create(int ramp) {$/;"	f	class:ScalarWidget	signature:(int ramp)
create	ScalarWidget.cpp	/^void ScalarWidget::create(int ramp, double _minimum, double _maximum, int component) {$/;"	f	class:ScalarWidget	signature:(int ramp, double _minimum, double _maximum, int component)
create	ScalarWidget.cpp	/^void ScalarWidget::create(int ramp, int component) {$/;"	f	class:ScalarWidget	signature:(int ramp, int component)
create	ScalarWidget.cpp	/^void ScalarWidget::create(int rampCreationType, double _minimum, double _maximum) {$/;"	f	class:ScalarWidget	signature:(int rampCreationType, double _minimum, double _maximum)
create	ScalarWidget.h	/^    void create(int ramp);$/;"	p	class:ScalarWidget	access:public	signature:(int ramp)
create	ScalarWidget.h	/^    void create(int ramp, double _minimum, double _maximum, int component);$/;"	p	class:ScalarWidget	access:public	signature:(int ramp, double _minimum, double _maximum, int component)
create	ScalarWidget.h	/^    void create(int ramp, int component);$/;"	p	class:ScalarWidget	access:public	signature:(int ramp, int component)
create	ScalarWidget.h	/^    void create(int rampCreationType, double _minimum, double _maximum);$/;"	p	class:ScalarWidget	access:public	signature:(int rampCreationType, double _minimum, double _maximum)
create	TransferFunction1D.cpp	/^    alphaComponent->create(ramp);$/;"	p	file:	signature:(ramp)
create	TransferFunction1D.cpp	/^    alphaComponent->create(rampCreationType, _minimum, _maximum);$/;"	p	file:	signature:(rampCreationType, _minimum, _maximum)
createABCIsosurfaces	Isosurfaces.cpp	/^void Isosurfaces::createABCIsosurfaces(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createABCIsosurfaces	Isosurfaces.h	/^    void createABCIsosurfaces(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createAIsosurfaces	Isosurfaces.cpp	/^void Isosurfaces::createAIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
createAIsosurfaces	Isosurfaces.h	/^    void createAIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Isosurfaces	access:private	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
createAlphaComponent	Contours.cpp	/^void Contours::createAlphaComponent(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& contoursDialog) {$/;"	f	class:Contours	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& contoursDialog)
createAlphaComponent	Contours.h	/^    void createAlphaComponent(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:Contours	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createAlphaComponent	TransferFunction1D.cpp	/^void TransferFunction1D::createAlphaComponent(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createAlphaComponent	TransferFunction1D.h	/^    void createAlphaComponent(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createAlphaSubMenu	ExampleVTKReader.cpp	/^  alphaSubCascade->setPopup(createAlphaSubMenu());$/;"	p	file:	signature:()
createAlphaSubMenu	ExampleVTKReader.cpp	/^GLMotif::Popup*  ExampleVTKReader::createAlphaSubMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
createAlphaSubMenu	ExampleVTKReader.h	/^  GLMotif::Popup*  createAlphaSubMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
createAnalysisToolsMenu	ExampleVTKReader.cpp	/^  analysisToolsCascade->setPopup(createAnalysisToolsMenu());$/;"	p	file:	signature:()
createAnalysisToolsMenu	ExampleVTKReader.cpp	/^GLMotif::Popup * ExampleVTKReader::createAnalysisToolsMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
createAnalysisToolsMenu	ExampleVTKReader.h	/^  GLMotif::Popup* createAnalysisToolsMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
createBIsosurfaces	Isosurfaces.cpp	/^void Isosurfaces::createBIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
createBIsosurfaces	Isosurfaces.h	/^    void createBIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Isosurfaces	access:private	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
createButtonBox	Contours.cpp	/^GLMotif::RowColumn * Contours::createButtonBox(GLMotif::RowColumn * & colorMapDialog) {$/;"	f	class:Contours	signature:(GLMotif::RowColumn * & colorMapDialog)
createButtonBox	Contours.h	/^    GLMotif::RowColumn * createButtonBox(GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Contours	access:private	signature:(GLMotif::RowColumn * & colorMapDialog)
createButtonBox	Isosurfaces.cpp	/^GLMotif::RowColumn * Isosurfaces::createButtonBox(GLMotif::RowColumn * & colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RowColumn * & colorMapDialog)
createButtonBox	Isosurfaces.h	/^    GLMotif::RowColumn * createButtonBox(GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(GLMotif::RowColumn * & colorMapDialog)
createButtonBox	Slices.cpp	/^GLMotif::RowColumn * Slices::createButtonBox(GLMotif::RowColumn * & colorMapDialog) {$/;"	f	class:Slices	signature:(GLMotif::RowColumn * & colorMapDialog)
createButtonBox	Slices.h	/^    GLMotif::RowColumn * createButtonBox(GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(GLMotif::RowColumn * & colorMapDialog)
createButtonBox	TransferFunction1D.cpp	/^GLMotif::RowColumn* TransferFunction1D::createButtonBox(GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:TransferFunction1D	signature:(GLMotif::RowColumn*& colorMapDialog)
createButtonBox	TransferFunction1D.h	/^    GLMotif::RowColumn* createButtonBox(GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(GLMotif::RowColumn*& colorMapDialog)
createCIsosurfaces	Isosurfaces.cpp	/^void Isosurfaces::createCIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Isosurfaces	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
createCIsosurfaces	Isosurfaces.h	/^    void createCIsosurfaces(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Isosurfaces	access:private	signature:(GLMotif::RowColumn * & abcIsosurfacesRowColumn, const GLMotif::StyleSheet & styleSheet)
createColorEditor	Isosurfaces.cpp	/^GLMotif::RowColumn* Isosurfaces::createColorEditor(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorEditor	Isosurfaces.h	/^    GLMotif::RowColumn * createColorEditor(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createColorEditor	Slices.cpp	/^GLMotif::RowColumn* Slices::createColorEditor(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorEditor	Slices.h	/^    GLMotif::RowColumn * createColorEditor(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createColorEditor	TransferFunction1D.cpp	/^GLMotif::RowColumn* TransferFunction1D::createColorEditor(const GLMotif::StyleSheet& styleSheet,$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorEditor	TransferFunction1D.h	/^    GLMotif::RowColumn* createColorEditor(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorMap	ColorMap.cpp	/^void ColorMap::createColorMap(int colorMapCreationType, double _minimum, double _maximum) {$/;"	f	class:ColorMap	signature:(int colorMapCreationType, double _minimum, double _maximum)
createColorMap	ColorMap.cpp	/^void ColorMap::createColorMap(int colormap) {$/;"	f	class:ColorMap	signature:(int colormap)
createColorMap	ColorMap.h	/^	void createColorMap(int colorMapCreationType, double _minimum, double _maximum);$/;"	p	class:ColorMap	access:public	signature:(int colorMapCreationType, double _minimum, double _maximum)
createColorMap	ColorMap.h	/^	void createColorMap(int colormap);$/;"	p	class:ColorMap	access:public	signature:(int colormap)
createColorMap	Isosurfaces.cpp	/^    colorMap->createColorMap(colorMapCreationType, _minimum, _maximum);$/;"	p	file:	signature:(colorMapCreationType, _minimum, _maximum)
createColorMap	Isosurfaces.cpp	/^    colorMap->createColorMap(colormap);$/;"	p	file:	signature:(colormap)
createColorMap	Isosurfaces.cpp	/^void Isosurfaces::createColorMap(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorMap	Isosurfaces.h	/^    void createColorMap(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createColorMap	Slices.cpp	/^    colorMap->createColorMap(colorMapCreationType, _minimum, _maximum);$/;"	p	file:	signature:(colorMapCreationType, _minimum, _maximum)
createColorMap	Slices.cpp	/^    colorMap->createColorMap(colormap);$/;"	p	file:	signature:(colormap)
createColorMap	Slices.cpp	/^void Slices::createColorMap(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorMap	Slices.h	/^    void createColorMap(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createColorMap	TransferFunction1D.cpp	/^    colorMap->createColorMap(colorMapCreationType, _minimum, _maximum);$/;"	p	file:	signature:(colorMapCreationType, _minimum, _maximum)
createColorMap	TransferFunction1D.cpp	/^    colorMap->createColorMap(colormap);$/;"	p	file:	signature:(colormap)
createColorMap	TransferFunction1D.cpp	/^void TransferFunction1D::createColorMap(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorMap	TransferFunction1D.h	/^    void createColorMap(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorMapDialog	Isosurfaces.cpp	/^void Isosurfaces::createColorMapDialog(const GLMotif::StyleSheet& styleSheet) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet)
createColorMapDialog	Isosurfaces.h	/^    void createColorMapDialog(const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet)
createColorMapDialog	Slices.cpp	/^void Slices::createColorMapDialog(const GLMotif::StyleSheet& styleSheet) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet)
createColorMapDialog	Slices.h	/^    void createColorMapDialog(const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet)
createColorMapDialog	TransferFunction1D.cpp	/^void TransferFunction1D::createColorMapDialog(const GLMotif::StyleSheet& styleSheet) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet)
createColorMapDialog	TransferFunction1D.h	/^    void createColorMapDialog(const GLMotif::StyleSheet& styleSheet);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet)
createColorMapSubMenu	ExampleVTKReader.cpp	/^  colorMapSubCascade->setPopup(createColorMapSubMenu());$/;"	p	file:	signature:()
createColorMapSubMenu	ExampleVTKReader.cpp	/^GLMotif::Popup* ExampleVTKReader::createColorMapSubMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
createColorMapSubMenu	ExampleVTKReader.h	/^  GLMotif::Popup*  createColorMapSubMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
createColorPanel	Isosurfaces.cpp	/^void Isosurfaces::createColorPanel(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorPanel	Isosurfaces.h	/^    void createColorPanel(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createColorPanel	Slices.cpp	/^void Slices::createColorPanel(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorPanel	Slices.h	/^    void createColorPanel(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createColorPanel	TransferFunction1D.cpp	/^void TransferFunction1D::createColorPanel(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorPanel	TransferFunction1D.h	/^    void createColorPanel(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createColorSlider	Isosurfaces.cpp	/^GLMotif::Slider* Isosurfaces::createColorSlider(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet,$/;"	f	class:Isosurfaces	signature:(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
createColorSlider	Isosurfaces.h	/^    GLMotif::Slider * createColorSlider(const char * title, GLMotif::Color color, const GLMotif::StyleSheet & styleSheet,$/;"	p	class:Isosurfaces	access:private	signature:(const char * title, GLMotif::Color color, const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorSlidersBox)
createColorSlider	Slices.cpp	/^GLMotif::Slider* Slices::createColorSlider(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet,$/;"	f	class:Slices	signature:(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
createColorSlider	Slices.h	/^    GLMotif::Slider * createColorSlider(const char * title, GLMotif::Color color, const GLMotif::StyleSheet & styleSheet,$/;"	p	class:Slices	access:private	signature:(const char * title, GLMotif::Color color, const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorSlidersBox)
createColorSlider	TransferFunction1D.cpp	/^GLMotif::Slider* TransferFunction1D::createColorSlider(const char* title, GLMotif::Color color,$/;"	f	class:TransferFunction1D	signature:(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
createColorSlider	TransferFunction1D.h	/^    GLMotif::Slider* createColorSlider(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet,$/;"	p	class:TransferFunction1D	access:private	signature:(const char* title, GLMotif::Color color, const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
createColorSliderBox	Isosurfaces.cpp	/^GLMotif::RowColumn* Isosurfaces::createColorSliderBox(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor)
createColorSliderBox	Isosurfaces.h	/^    GLMotif::RowColumn * createColorSliderBox(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor)
createColorSliderBox	Slices.cpp	/^GLMotif::RowColumn* Slices::createColorSliderBox(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor)
createColorSliderBox	Slices.h	/^    GLMotif::RowColumn * createColorSliderBox(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor)
createColorSliderBox	TransferFunction1D.cpp	/^GLMotif::RowColumn* TransferFunction1D::createColorSliderBox(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor)
createColorSliderBox	TransferFunction1D.h	/^    GLMotif::RowColumn* createColorSliderBox(const GLMotif::StyleSheet &styleSheet, GLMotif::RowColumn* colorEditor);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet &styleSheet, GLMotif::RowColumn* colorEditor)
createColorSliders	Isosurfaces.cpp	/^void Isosurfaces::createColorSliders(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
createColorSliders	Isosurfaces.h	/^    void createColorSliders(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor)
createColorSliders	Slices.cpp	/^void Slices::createColorSliders(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
createColorSliders	Slices.h	/^    void createColorSliders(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * colorEditor)
createColorSliders	TransferFunction1D.cpp	/^void TransferFunction1D::createColorSliders(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorSlidersBox)
createColorSliders	TransferFunction1D.h	/^    void createColorSliders(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn* colorEditor)
createColorSwatchesWidget	Isosurfaces.cpp	/^void Isosurfaces::createColorSwatchesWidget(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor) {$/;"	f	class:Isosurfaces	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor)
createColorSwatchesWidget	Isosurfaces.h	/^    void createColorSwatchesWidget(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorEditor);$/;"	p	class:Isosurfaces	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorEditor)
createColorSwatchesWidget	Slices.cpp	/^void Slices::createColorSwatchesWidget(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor)
createColorSwatchesWidget	Slices.h	/^    void createColorSwatchesWidget(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorEditor);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorEditor)
createColorSwatchesWidget	TransferFunction1D.cpp	/^void TransferFunction1D::createColorSwatchesWidget(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor) {$/;"	f	class:TransferFunction1D	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor)
createColorSwatchesWidget	TransferFunction1D.h	/^    void createColorSwatchesWidget(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor);$/;"	p	class:TransferFunction1D	access:private	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorEditor)
createContoursDialog	Contours.cpp	/^void Contours::createContoursDialog(const GLMotif::StyleSheet& styleSheet) {$/;"	f	class:Contours	signature:(const GLMotif::StyleSheet& styleSheet)
createContoursDialog	Contours.h	/^    void createContoursDialog(const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Contours	access:private	signature:(const GLMotif::StyleSheet & styleSheet)
createIsosurfaceColorMapSubMenu	Isosurfaces.cpp	/^    isosurfaceColorMapSubCascade->setPopup(createIsosurfaceColorMapSubMenu());$/;"	p	file:	signature:()
createIsosurfaceColorMapSubMenu	Isosurfaces.cpp	/^GLMotif::Popup * Isosurfaces::createIsosurfaceColorMapSubMenu(void) {$/;"	f	class:Isosurfaces	signature:(void)
createIsosurfaceColorMapSubMenu	Isosurfaces.h	/^    GLMotif::Popup * createIsosurfaceColorMapSubMenu(void);$/;"	p	class:Isosurfaces	access:private	signature:(void)
createMainMenu	ExampleVTKReader.cpp	/^GLMotif::PopupMenu* ExampleVTKReader::createMainMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
createMainMenu	ExampleVTKReader.h	/^  GLMotif::PopupMenu* createMainMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
createRenderingDialog	ExampleVTKReader.cpp	/^GLMotif::PopupWindow* ExampleVTKReader::createRenderingDialog(void)$/;"	f	class:ExampleVTKReader	signature:(void)
createRenderingDialog	ExampleVTKReader.h	/^  GLMotif::PopupWindow* createRenderingDialog(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
createRepresentationMenu	ExampleVTKReader.cpp	/^  representationCascade->setPopup(createRepresentationMenu());$/;"	p	file:	signature:()
createRepresentationMenu	ExampleVTKReader.cpp	/^GLMotif::Popup* ExampleVTKReader::createRepresentationMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
createRepresentationMenu	ExampleVTKReader.h	/^  GLMotif::Popup* createRepresentationMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
createSliceColorMapSubMenu	Slices.cpp	/^    sliceColorMapSubCascade->setPopup(createSliceColorMapSubMenu());$/;"	p	file:	signature:()
createSliceColorMapSubMenu	Slices.cpp	/^GLMotif::Popup * Slices::createSliceColorMapSubMenu(void) {$/;"	f	class:Slices	signature:(void)
createSliceColorMapSubMenu	Slices.h	/^    GLMotif::Popup * createSliceColorMapSubMenu(void);$/;"	p	class:Slices	access:private	signature:(void)
createTransferFunction1D	ExampleVTKReader.cpp	/^    transferFunctionDialog->createTransferFunction1D(CINVERSE_RAINBOW,$/;"	p	file:	signature:(CINVERSE_RAINBOW, UP_RAMP, 0.0, 1.0)
createTransferFunction1D	TransferFunction1D.cpp	/^void TransferFunction1D::createTransferFunction1D(int colorMapCreationType, int rampCreationType, double _minimum, double _maximum) {$/;"	f	class:TransferFunction1D	signature:(int colorMapCreationType, int rampCreationType, double _minimum, double _maximum)
createTransferFunction1D	TransferFunction1D.h	/^    void createTransferFunction1D(int colorMapCreationType, int rampCreationType, double _minimum, double _maximum);$/;"	p	class:TransferFunction1D	access:public	signature:(int colorMapCreationType, int rampCreationType, double _minimum, double _maximum)
createWidgetsMenu	ExampleVTKReader.cpp	/^  widgetsCascade->setPopup(createWidgetsMenu());$/;"	p	file:	signature:()
createWidgetsMenu	ExampleVTKReader.cpp	/^GLMotif::Popup * ExampleVTKReader::createWidgetsMenu(void)$/;"	f	class:ExampleVTKReader	signature:(void)
createWidgetsMenu	ExampleVTKReader.h	/^  GLMotif::Popup* createWidgetsMenu(void);$/;"	p	class:ExampleVTKReader	access:private	signature:(void)
createXContours	Contours.cpp	/^void Contours::createXContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Contours	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
createXContours	Contours.h	/^    void createXContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Contours	access:private	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
createXSlices	Slices.cpp	/^void Slices::createXSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Slices	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
createXSlices	Slices.h	/^    void createXSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Slices	access:private	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
createXYZContours	Contours.cpp	/^void Contours::createXYZContours(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Contours	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createXYZContours	Contours.h	/^    void createXYZContours(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Contours	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createXYZSlices	Slices.cpp	/^void Slices::createXYZSlices(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog) {$/;"	f	class:Slices	signature:(const GLMotif::StyleSheet& styleSheet, GLMotif::RowColumn*& colorMapDialog)
createXYZSlices	Slices.h	/^    void createXYZSlices(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog);$/;"	p	class:Slices	access:private	signature:(const GLMotif::StyleSheet & styleSheet, GLMotif::RowColumn * & colorMapDialog)
createYContours	Contours.cpp	/^void Contours::createYContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Contours	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
createYContours	Contours.h	/^    void createYContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Contours	access:private	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
createYSlices	Slices.cpp	/^void Slices::createYSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Slices	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
createYSlices	Slices.h	/^    void createYSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Slices	access:private	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
createZContours	Contours.cpp	/^void Contours::createZContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Contours	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
createZContours	Contours.h	/^    void createZContours(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Contours	access:private	signature:(GLMotif::RowColumn * & xyzContoursRowColumn, const GLMotif::StyleSheet & styleSheet)
createZSlices	Slices.cpp	/^void Slices::createZSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet) {$/;"	f	class:Slices	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
createZSlices	Slices.h	/^    void createZSlices(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet);$/;"	p	class:Slices	access:private	signature:(GLMotif::RowColumn * & xyzSlicesRowColumn, const GLMotif::StyleSheet & styleSheet)
currentColor	SwatchesWidget.h	/^	float* currentColor;$/;"	m	class:SwatchesWidget	access:private
currentControlPoint	ControlPointChangedCallbackData.h	/^	ControlPoint* currentControlPoint;$/;"	m	class:ControlPointChangedCallbackData	access:private
currentControlPoint	ScalarWidgetControlPointChangedCallbackData.h	/^    ScalarWidgetControlPoint* currentControlPoint;$/;"	m	class:ScalarWidgetControlPointChangedCallbackData	access:private
currentGaussian	ScalarWidget.h	/^    int currentGaussian;$/;"	m	class:ScalarWidget	access:private
currentMode	ScalarWidget.h	/^    Mode currentMode;$/;"	m	class:ScalarWidget	access:private
currentPoint	ScalarWidget.cpp	/^        GLMotif::Point currentPoint;$/;"	l
d1	ScalarWidget.cpp	/^        float d1 = dist3(ax, ay, az, xc, y0, z0);$/;"	l
d2	ScalarWidget.cpp	/^        float d2 = dist3(ax, ay, az, xc, yc, z0);$/;"	l
d3	ScalarWidget.cpp	/^        float d3 = dist3(ax, ay, az, xr, y0, z0);$/;"	l
d4	ScalarWidget.cpp	/^        float d4 = dist3(ax, ay, az, xl, y0, z0);$/;"	l
d5	ScalarWidget.cpp	/^        float d5 = dist3(ax, ay, az, xc, yb, z0);$/;"	l
dataItem	ExampleVTKReader.cpp	/^  DataItem* dataItem = contextData.retrieveDataItem<DataItem>(this);$/;"	l
dataItem	ExampleVTKReader.cpp	/^  DataItem* dataItem = new DataItem();$/;"	l
dataOutline	ExampleVTKReader.cpp	/^  vtkNew<vtkOutlineFilter> dataOutline;$/;"	l
defaultSwatchSize	SwatchesWidget.h	/^	double defaultSwatchSize[2];$/;"	m	class:SwatchesWidget	access:private
deleteColorMap	ColorMap.cpp	/^void ColorMap::deleteColorMap(void) {$/;"	f	class:ColorMap	signature:(void)
deleteColorMap	ColorMap.h	/^	void deleteColorMap(void);$/;"	p	class:ColorMap	access:private	signature:(void)
deleteControlPoint	ColorMap.cpp	/^void ColorMap::deleteControlPoint(void) {$/;"	f	class:ColorMap	signature:(void)
deleteControlPoint	ColorMap.h	/^	void deleteControlPoint(void);$/;"	p	class:ColorMap	access:public	signature:(void)
deleteControlPoint	Contours.cpp	/^    alphaComponent->deleteControlPoint();$/;"	p	file:	signature:()
deleteControlPoint	Isosurfaces.cpp	/^    colorMap->deleteControlPoint();$/;"	p	file:	signature:()
deleteControlPoint	ScalarWidget.cpp	/^void ScalarWidget::deleteControlPoint(void) {$/;"	f	class:ScalarWidget	signature:(void)
deleteControlPoint	ScalarWidget.h	/^    void deleteControlPoint(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
deleteControlPoint	Slices.cpp	/^    colorMap->deleteControlPoint();$/;"	p	file:	signature:()
deleteControlPoint	TransferFunction1D.cpp	/^    alphaComponent->deleteControlPoint();$/;"	p	file:	signature:()
deleteControlPoint	TransferFunction1D.cpp	/^    colorMap->deleteControlPoint();$/;"	p	file:	signature:()
deleteControlPoints	ScalarWidget.cpp	/^void ScalarWidget::deleteControlPoints(void) {$/;"	f	class:ScalarWidget	signature:(void)
deleteControlPoints	ScalarWidget.h	/^    void deleteControlPoints(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
determineControlPoint	ColorMap.cpp	/^ControlPoint* ColorMap::determineControlPoint(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
determineControlPoint	ColorMap.h	/^	ControlPoint* determineControlPoint(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
determineControlPoint	ScalarWidget.cpp	/^ScalarWidgetControlPoint* ScalarWidget::determineControlPoint(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
determineControlPoint	ScalarWidget.h	/^    ScalarWidgetControlPoint* determineControlPoint(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
dialog	ExampleVTKReader.cpp	/^  GLMotif::RowColumn * dialog = new GLMotif::RowColumn($/;"	l
dialogPopup	ExampleVTKReader.cpp	/^  GLMotif::PopupWindow * dialogPopup = new GLMotif::PopupWindow($/;"	l
display	ExampleVTKReader.cpp	/^void ExampleVTKReader::display(GLContextData& contextData) const$/;"	f	class:ExampleVTKReader	signature:(GLContextData& contextData) const
display	ExampleVTKReader.h	/^  virtual void display(GLContextData& contextData) const;$/;"	p	class:ExampleVTKReader	access:public	signature:(GLContextData& contextData) const
dist2	ScalarWidget.h	26;"	d
dist3	ScalarWidget.h	27;"	d
distanceSquared	ColorMap.cpp	/^		GLfloat distanceSquared=Geometry::sqrDist(currentPoint, event.getWidgetPoint().getPoint());$/;"	l
distanceSquared	ScalarWidget.cpp	/^        GLfloat distanceSquared = Geometry::sqrDist(currentPoint, event.getWidgetPoint().getPoint());$/;"	l
dragOffset	ColorMap.h	/^	GLMotif::Point::Vector dragOffset;$/;"	m	class:ColorMap	access:private
dragOffset	ScalarWidget.h	/^    GLMotif::Point::Vector dragOffset;$/;"	m	class:ScalarWidget	access:private
dragging	ScalarWidget.h	/^    bool dragging;$/;"	m	class:ScalarWidget	access:private
draw	ColorMap.cpp	/^	Widget::draw(contextData);$/;"	p	class:Widget	file:	signature:(contextData)
draw	ColorMap.cpp	/^void ColorMap::draw(GLContextData& contextData) const {$/;"	f	class:ColorMap	signature:(GLContextData& contextData) const
draw	ColorMap.h	/^	virtual void draw(GLContextData& contextData) const;$/;"	p	class:ColorMap	access:public	signature:(GLContextData& contextData) const
draw	ScalarWidget.cpp	/^    Widget::draw(contextData);$/;"	p	class:Widget	file:	signature:(contextData)
draw	ScalarWidget.cpp	/^void ScalarWidget::draw(GLContextData& contextData) const {$/;"	f	class:ScalarWidget	signature:(GLContextData& contextData) const
draw	ScalarWidget.h	/^    virtual void draw(GLContextData& contextData) const;$/;"	p	class:ScalarWidget	access:public	signature:(GLContextData& contextData) const
draw	SwatchesWidget.cpp	/^	Widget::draw(glContextData);$/;"	p	class:Widget	file:	signature:(glContextData)
draw	SwatchesWidget.cpp	/^void SwatchesWidget::draw(GLContextData& glContextData) const {$/;"	f	class:SwatchesWidget	signature:(GLContextData& glContextData) const
draw	SwatchesWidget.h	/^	virtual void draw(GLContextData& contextData) const;$/;"	p	class:SwatchesWidget	access:public	signature:(GLContextData& contextData) const
drawArea	ScalarWidget.cpp	/^void ScalarWidget::drawArea(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
drawArea	ScalarWidget.h	/^    void drawArea(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
drawColorMap	ColorMap.cpp	/^void ColorMap::drawColorMap(void) const {$/;"	f	class:ColorMap	signature:(void) const
drawColorMap	ColorMap.h	/^	void drawColorMap(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
drawControlPoints	ColorMap.cpp	/^void ColorMap::drawControlPoints(void) const {$/;"	f	class:ColorMap	signature:(void) const
drawControlPoints	ColorMap.h	/^	void drawControlPoints(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
drawControlPoints	ScalarWidget.cpp	/^void ScalarWidget::drawControlPoints(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
drawControlPoints	ScalarWidget.h	/^    void drawControlPoints(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
drawHistogram	Contours.cpp	/^    alphaComponent->drawHistogram();$/;"	p	file:	signature:()
drawHistogram	ScalarWidget.cpp	/^void ScalarWidget::drawHistogram(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
drawHistogram	ScalarWidget.h	/^    void drawHistogram(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
drawHistogram	TransferFunction1D.cpp	/^    alphaComponent->drawHistogram();$/;"	p	file:	signature:()
drawLine	ScalarWidget.cpp	/^void ScalarWidget::drawLine(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
drawLine	ScalarWidget.h	/^    void drawLine(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
drawMargin	ColorMap.cpp	/^void ColorMap::drawMargin(void) const {$/;"	f	class:ColorMap	signature:(void) const
drawMargin	ColorMap.h	/^	void drawMargin(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
drawMargin	ScalarWidget.cpp	/^void ScalarWidget::drawMargin(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
drawMargin	ScalarWidget.h	/^    void drawMargin(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
drawMargin	SwatchesWidget.cpp	/^void SwatchesWidget::drawMargin(void) const {$/;"	f	class:SwatchesWidget	signature:(void) const
drawMargin	SwatchesWidget.h	/^	void drawMargin(void) const;$/;"	p	class:SwatchesWidget	access:public	signature:(void) const
drawSwatchesWidget	SwatchesWidget.cpp	/^void SwatchesWidget::drawSwatchesWidget(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) const {$/;"	f	class:SwatchesWidget	signature:(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) const
drawSwatchesWidget	SwatchesWidget.h	/^	void drawSwatchesWidget(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) const;$/;"	p	class:SwatchesWidget	access:public	signature:(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) const
drawSwatchesWidgetArea	SwatchesWidget.cpp	/^void SwatchesWidget::drawSwatchesWidgetArea(void) const {$/;"	f	class:SwatchesWidget	signature:(void) const
drawSwatchesWidgetArea	SwatchesWidget.h	/^	void drawSwatchesWidgetArea(void) const;$/;"	p	class:SwatchesWidget	access:public	signature:(void) const
endl	ExampleVTKReader.cpp	/^    std::cerr << "ERROR: Data bounds not set!!" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    " -vruiVerbose, -vruiHelp, etc.\\n" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\nExampleVTKReader - Render VTK objects in the VRUI context" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\nUSAGE:\\n\\t.\/ExampleVTKReader [-f <string>] [-h]" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\nWhere:" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\t-f <string>, -fileName <string>" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\t-h, -help" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\t-r <digit>, -renderMode <digit>" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\tDisplay this usage information and exit." << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\tName of VTK file to load using VTK.\\n" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^  std::cout << "\\tRender mode to request for vtkSmartVolumeMapper.\\n" << std::endl;$/;"	m	class:std	file:
erase	ExampleVTKReader.cpp	/^        baseLocators.erase(blIt);$/;"	p	file:	signature:(blIt)
exampleVTKReader	Contours.h	/^    ExampleVTKReader * exampleVTKReader;$/;"	m	class:Contours	access:public
exampleVTKReader	Isosurfaces.h	/^    ExampleVTKReader * exampleVTKReader;$/;"	m	class:Isosurfaces	access:public
exampleVTKReader	Slices.h	/^    ExampleVTKReader * exampleVTKReader;$/;"	m	class:Slices	access:public
exampleVTKReader	TransferFunction1D.h	/^    ExampleVTKReader * exampleVTKReader;$/;"	m	class:TransferFunction1D	access:private
exportAlpha	ExampleVTKReader.cpp	/^  transferFunctionDialog->exportAlpha(this->VolumeColormap);$/;"	p	file:	signature:(this->VolumeColormap)
exportAlpha	TransferFunction1D.cpp	/^void TransferFunction1D::exportAlpha(double* colormap) const {$/;"	f	class:TransferFunction1D	signature:(double* colormap) const
exportAlpha	TransferFunction1D.h	/^    void exportAlpha(double* colormap) const;$/;"	p	class:TransferFunction1D	access:public	signature:(double* colormap) const
exportColorMap	ColorMap.cpp	/^void ColorMap::exportColorMap(double* colormap) const {$/;"	f	class:ColorMap	signature:(double* colormap) const
exportColorMap	ColorMap.h	/^	void exportColorMap(double* colormap) const;$/;"	p	class:ColorMap	access:public	signature:(double* colormap) const
exportColorMap	ExampleVTKReader.cpp	/^  transferFunctionDialog->exportColorMap(this->VolumeColormap);$/;"	p	file:	signature:(this->VolumeColormap)
exportColorMap	Isosurfaces.cpp	/^    colorMap->exportColorMap(colormap);$/;"	p	file:	signature:(colormap)
exportColorMap	Slices.cpp	/^    colorMap->exportColorMap(colormap);$/;"	p	file:	signature:(colormap)
exportColorMap	TransferFunction1D.cpp	/^    colorMap->exportColorMap(colormap);$/;"	p	file:	signature:(colormap)
exportColorMap	TransferFunction1D.cpp	/^void TransferFunction1D::exportColorMap(double* colormap) const {$/;"	f	class:TransferFunction1D	signature:(double* colormap) const
exportColorMap	TransferFunction1D.h	/^    void exportColorMap(double* colormap) const;$/;"	p	class:TransferFunction1D	access:public	signature:(double* colormap) const
exportControlPointValues	ScalarWidget.cpp	/^std::vector<double> ScalarWidget::exportControlPointValues( void )$/;"	f	class:ScalarWidget	signature:( void )
exportControlPointValues	ScalarWidget.h	/^    std::vector<double> exportControlPointValues(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
exportIsosurfacesColorMap	ExampleVTKReader.cpp	/^    this->isosurfacesDialog->exportIsosurfacesColorMap(this->IsosurfaceColormap);$/;"	p	file:	signature:(this->IsosurfaceColormap)
exportIsosurfacesColorMap	Isosurfaces.cpp	/^void Isosurfaces::exportIsosurfacesColorMap(double* colormap) const {$/;"	f	class:Isosurfaces	signature:(double* colormap) const
exportIsosurfacesColorMap	Isosurfaces.h	/^    void exportIsosurfacesColorMap(double* colormap) const;$/;"	p	class:Isosurfaces	access:public	signature:(double* colormap) const
exportScalar	ScalarWidget.cpp	/^void ScalarWidget::exportScalar(double* colormap) const {$/;"	f	class:ScalarWidget	signature:(double* colormap) const
exportScalar	ScalarWidget.cpp	/^void ScalarWidget::exportScalar(double* colormap, int component) {$/;"	f	class:ScalarWidget	signature:(double* colormap, int component)
exportScalar	ScalarWidget.h	/^    void exportScalar(double* _scalar) const;$/;"	p	class:ScalarWidget	access:public	signature:(double* _scalar) const
exportScalar	ScalarWidget.h	/^    void exportScalar(double* colormap, int component);$/;"	p	class:ScalarWidget	access:public	signature:(double* colormap, int component)
exportScalar	TransferFunction1D.cpp	/^    alphaComponent->exportScalar(colormap);$/;"	p	file:	signature:(colormap)
exportSlicesColorMap	ExampleVTKReader.cpp	/^    this->slicesDialog->exportSlicesColorMap(this->SliceColormap);$/;"	p	file:	signature:(this->SliceColormap)
exportSlicesColorMap	Slices.cpp	/^void Slices::exportSlicesColorMap(double* colormap) const {$/;"	f	class:Slices	signature:(double* colormap) const
exportSlicesColorMap	Slices.h	/^    void exportSlicesColorMap(double* colormap) const;$/;"	p	class:Slices	access:public	signature:(double* colormap) const
externalVTKWidget	DataItem.h	/^  vtkSmartPointer<ExternalVTKWidget> externalVTKWidget;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
fabs	ScalarWidget.cpp	/^                        gaussians[currentGaussian].setW(fabs(gaussians[currentGaussian].getBx()));$/;"	p	file:	signature:(gaussians[currentGaussian].getBx())
findGaussianControlPoint	ScalarWidget.cpp	/^bool ScalarWidget::findGaussianControlPoint(float x, float y, float z) {$/;"	f	class:ScalarWidget	signature:(float x, float y, float z)
findGaussianControlPoint	ScalarWidget.h	/^    bool findGaussianControlPoint(float x, float y, float z);$/;"	p	class:ScalarWidget	access:public	signature:(float x, float y, float z)
findRecipient	ColorMap.cpp	/^bool ColorMap::findRecipient(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
findRecipient	ColorMap.h	/^	virtual bool findRecipient(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
findRecipient	ScalarWidget.cpp	/^bool ScalarWidget::findRecipient(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
findRecipient	ScalarWidget.h	/^    virtual bool findRecipient(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
findRecipient	SwatchesWidget.cpp	/^bool SwatchesWidget::findRecipient(GLMotif::Event& event) {$/;"	f	class:SwatchesWidget	signature:(GLMotif::Event& event)
findRecipient	SwatchesWidget.h	/^	virtual bool findRecipient(GLMotif::Event& event);$/;"	p	class:SwatchesWidget	access:public	signature:(GLMotif::Event& event)
first	ColorMap.h	/^	ControlPoint* first;$/;"	m	class:ColorMap	access:private
first	ScalarWidget.h	/^    ScalarWidgetControlPoint* first;$/;"	m	class:ScalarWidget	access:private
flashlight	DataItem.h	/^  vtkSmartPointer<vtkLight> flashlight;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
found	ScalarWidget.cpp	/^    bool found = false;$/;"	l
frame	ExampleVTKReader.cpp	/^void ExampleVTKReader::frame(void)$/;"	f	class:ExampleVTKReader	signature:(void)
frame	ExampleVTKReader.h	/^  virtual void frame(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
freeSliceActor	DataItem.h	/^  vtkSmartPointer<vtkActor> freeSliceActor;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
freeSliceCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> freeSliceCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
freeSliceMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> freeSliceMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
freeSlicePlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> freeSlicePlane;$/;"	m	class:ExampleVTKReader	access:private
gap	SwatchesWidget.h	/^	double gap[2];$/;"	m	class:SwatchesWidget	access:private
gaussian	ScalarWidget.h	/^    bool gaussian;$/;"	m	class:ScalarWidget	access:private
gaussianToggleButtonCallback	TransferFunction1D.cpp	/^void TransferFunction1D::gaussianToggleButtonCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:TransferFunction1D	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
gaussianToggleButtonCallback	TransferFunction1D.h	/^    void gaussianToggleButtonCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:TransferFunction1D	access:private	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
gaussians	ScalarWidget.cpp	/^                    gaussians[currentGaussian].setW($/;"	p	file:	signature:(gaussians[currentGaussian].getX() - x) > 0.01 ? (gaussians[currentGaussian].getX() - x) : 0.01
gaussians	ScalarWidget.cpp	/^                    gaussians[currentGaussian].setW((x - gaussians[currentGaussian].getX()) > 0.01 ? (x$/;"	p	file:	signature:(x - gaussians[currentGaussian].getX()) > 0.01 ? (x - gaussians[currentGaussian].getX()) : 0.01
gaussians	ScalarWidget.h	/^    Gaussian * gaussians;$/;"	m	class:ScalarWidget	access:private
getAlphaChangedCallbacks	Contours.cpp	/^Misc::CallbackList& Contours::getAlphaChangedCallbacks(void) {$/;"	f	class:Contours	signature:(void)
getAlphaChangedCallbacks	Contours.h	/^    Misc::CallbackList& getAlphaChangedCallbacks(void);$/;"	p	class:Contours	access:public	signature:(void)
getAlphaChangedCallbacks	TransferFunction1D.cpp	/^Misc::CallbackList& TransferFunction1D::getAlphaChangedCallbacks(void) {$/;"	f	class:TransferFunction1D	signature:(void)
getAlphaChangedCallbacks	TransferFunction1D.h	/^    Misc::CallbackList& getAlphaChangedCallbacks(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
getBx	Gaussian.cpp	/^float Gaussian::getBx(void) const {$/;"	f	class:Gaussian	signature:(void) const
getBx	Gaussian.h	/^    float getBx(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
getBy	Gaussian.cpp	/^float Gaussian::getBy(void) const {$/;"	f	class:Gaussian	signature:(void) const
getBy	Gaussian.h	/^    float getBy(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
getChangedCallbacks	ScalarWidget.cpp	/^Misc::CallbackList& ScalarWidget::getChangedCallbacks(void) {$/;"	f	class:ScalarWidget	signature:(void)
getChangedCallbacks	ScalarWidget.h	/^    Misc::CallbackList& getChangedCallbacks(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
getClippingPlanes	ExampleVTKReader.cpp	/^ClippingPlane * ExampleVTKReader::getClippingPlanes(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getClippingPlanes	ExampleVTKReader.h	/^  ClippingPlane * getClippingPlanes(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getColor	RGBAColor.cpp	/^float * RGBAColor::getColor(void) const {$/;"	f	class:RGBAColor	signature:(void) const
getColor	RGBAColor.h	/^	float * getColor(void) const;$/;"	p	class:RGBAColor	access:public	signature:(void) const
getColorChangedCallbacks	SwatchesWidget.cpp	/^Misc::CallbackList& SwatchesWidget::getColorChangedCallbacks(void) {$/;"	f	class:SwatchesWidget	signature:(void)
getColorChangedCallbacks	SwatchesWidget.h	/^	Misc::CallbackList& getColorChangedCallbacks(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
getColorForCell	SwatchesWidget.cpp	/^			glColor3ubv(getColorForCell(column, row));$/;"	p	file:	signature:(column, row)
getColorForCell	SwatchesWidget.cpp	/^GLubyte* SwatchesWidget::getColorForCell(int column, int row) const {$/;"	f	class:SwatchesWidget	signature:(int column, int row) const
getColorForCell	SwatchesWidget.h	/^	GLubyte* getColorForCell(int column, int row) const;$/;"	p	class:SwatchesWidget	access:public	signature:(int column, int row) const
getColorForLocation	SwatchesWidget.cpp	/^GLubyte* SwatchesWidget::getColorForLocation(double x, double y) {$/;"	f	class:SwatchesWidget	signature:(double x, double y)
getColorForLocation	SwatchesWidget.h	/^	GLubyte* getColorForLocation(double x, double y);$/;"	p	class:SwatchesWidget	access:public	signature:(double x, double y)
getColorMap	ColorMap.cpp	/^Storage* ColorMap::getColorMap(void) const {$/;"	f	class:ColorMap	signature:(void) const
getColorMap	ColorMap.h	/^	Storage* getColorMap(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
getColorMap	Isosurfaces.cpp	/^Storage * Isosurfaces::getColorMap(void) const {$/;"	f	class:Isosurfaces	signature:(void) const
getColorMap	Isosurfaces.h	/^    Storage * getColorMap(void) const;$/;"	p	class:Isosurfaces	access:public	signature:(void) const
getColorMap	Slices.cpp	/^Storage * Slices::getColorMap(void) const {$/;"	f	class:Slices	signature:(void) const
getColorMap	Slices.h	/^    Storage * getColorMap(void) const;$/;"	p	class:Slices	access:public	signature:(void) const
getColorMap	TransferFunction1D.cpp	/^ColorMap* TransferFunction1D::getColorMap(void) {$/;"	f	class:TransferFunction1D	signature:(void)
getColorMap	TransferFunction1D.cpp	/^const ColorMap* TransferFunction1D::getColorMap(void) const {$/;"	f	class:TransferFunction1D	signature:(void) const
getColorMap	TransferFunction1D.h	/^    ColorMap* getColorMap(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
getColorMap	TransferFunction1D.h	/^    const ColorMap* getColorMap(void) const;$/;"	p	class:TransferFunction1D	access:public	signature:(void) const
getColorMapChangedCallbacks	ColorMap.cpp	/^Misc::CallbackList& ColorMap::getColorMapChangedCallbacks(void) {$/;"	f	class:ColorMap	signature:(void)
getColorMapChangedCallbacks	ColorMap.h	/^	Misc::CallbackList& getColorMapChangedCallbacks(void);$/;"	p	class:ColorMap	access:public	signature:(void)
getColorMapChangedCallbacks	TransferFunction1D.cpp	/^Misc::CallbackList& TransferFunction1D::getColorMapChangedCallbacks(void) {$/;"	f	class:TransferFunction1D	signature:(void)
getColorMapChangedCallbacks	TransferFunction1D.h	/^    Misc::CallbackList& getColorMapChangedCallbacks(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
getContourValues	Contours.cpp	/^std::vector<double> Contours::getContourValues(void)$/;"	f	class:Contours	signature:(void)
getContourValues	Contours.h	/^    std::vector<double> getContourValues(void);$/;"	p	class:Contours	access:public	signature:(void)
getContourValues	ExampleVTKReader.cpp	/^std::vector<double> ExampleVTKReader::getContourValues(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getContourValues	ExampleVTKReader.h	/^  std::vector<double> getContourValues();$/;"	p	class:ExampleVTKReader	access:public	signature:()
getControlPointChangedCallbacks	ColorMap.cpp	/^Misc::CallbackList& ColorMap::getControlPointChangedCallbacks(void) {$/;"	f	class:ColorMap	signature:(void)
getControlPointChangedCallbacks	ColorMap.h	/^	Misc::CallbackList& getControlPointChangedCallbacks(void);$/;"	p	class:ColorMap	access:public	signature:(void)
getControlPointChangedCallbacks	ScalarWidget.cpp	/^Misc::CallbackList& ScalarWidget::getControlPointChangedCallbacks(void) {$/;"	f	class:ScalarWidget	signature:(void)
getControlPointChangedCallbacks	ScalarWidget.h	/^    Misc::CallbackList& getControlPointChangedCallbacks(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
getControlPointColor	ColorMap.cpp	/^RGBAColor* ColorMap::getControlPointColor(void) {$/;"	f	class:ColorMap	signature:(void)
getControlPointColor	ColorMap.h	/^	RGBAColor* getControlPointColor(void);$/;"	p	class:ColorMap	access:public	signature:(void)
getControlPointScalar	ScalarWidget.cpp	/^float ScalarWidget::getControlPointScalar(void) {$/;"	f	class:ScalarWidget	signature:(void)
getControlPointScalar	ScalarWidget.h	/^    float getControlPointScalar(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
getCurrentColor	SwatchesWidget.cpp	/^float* SwatchesWidget::getCurrentColor(void) {$/;"	f	class:SwatchesWidget	signature:(void)
getCurrentColor	SwatchesWidget.h	/^	float* getCurrentColor(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
getCurrentControlPoint	ControlPointChangedCallbackData.cpp	/^ControlPoint* ControlPointChangedCallbackData::getCurrentControlPoint(void) {$/;"	f	class:ControlPointChangedCallbackData	signature:(void)
getCurrentControlPoint	ControlPointChangedCallbackData.h	/^	ControlPoint* getCurrentControlPoint(void);$/;"	p	class:ControlPointChangedCallbackData	access:public	signature:(void)
getCurrentControlPoint	ScalarWidgetControlPointChangedCallbackData.cpp	/^ScalarWidgetControlPoint* ScalarWidgetControlPointChangedCallbackData::getCurrentControlPoint(void) {$/;"	f	class:ScalarWidgetControlPointChangedCallbackData	signature:(void)
getCurrentControlPoint	ScalarWidgetControlPointChangedCallbackData.h	/^	ScalarWidgetControlPoint* getCurrentControlPoint(void);$/;"	p	class:ScalarWidgetControlPointChangedCallbackData	access:public	signature:(void)
getDataIncrement	ExampleVTKReader.cpp	/^float ExampleVTKReader::getDataIncrement(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getDataIncrement	ExampleVTKReader.h	/^  float getDataIncrement(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getDataMaximum	ExampleVTKReader.cpp	/^float ExampleVTKReader::getDataMaximum(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getDataMaximum	ExampleVTKReader.h	/^  float getDataMaximum(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getDataMidPoint	ExampleVTKReader.cpp	/^float ExampleVTKReader::getDataMidPoint(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getDataMidPoint	ExampleVTKReader.h	/^  float getDataMidPoint(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getDataMinimum	ExampleVTKReader.cpp	/^float ExampleVTKReader::getDataMinimum(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getDataMinimum	ExampleVTKReader.h	/^  float getDataMinimum(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getFileName	ExampleVTKReader.cpp	/^const char* ExampleVTKReader::getFileName(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getFileName	ExampleVTKReader.h	/^  const char* getFileName(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getFlashlightDirection	ExampleVTKReader.cpp	/^double * ExampleVTKReader::getFlashlightDirection(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getFlashlightDirection	ExampleVTKReader.h	/^  double * getFlashlightDirection(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getFlashlightPosition	ExampleVTKReader.cpp	/^double * ExampleVTKReader::getFlashlightPosition(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getFlashlightPosition	ExampleVTKReader.h	/^  double * getFlashlightPosition(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getFlashlightSwitch	ExampleVTKReader.cpp	/^int * ExampleVTKReader::getFlashlightSwitch(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getFlashlightSwitch	ExampleVTKReader.h	/^  int * getFlashlightSwitch(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getFreeSliceNormal	ExampleVTKReader.cpp	/^double * ExampleVTKReader::getFreeSliceNormal(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getFreeSliceNormal	ExampleVTKReader.h	/^  double * getFreeSliceNormal(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getFreeSliceOrigin	ExampleVTKReader.cpp	/^double * ExampleVTKReader::getFreeSliceOrigin(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getFreeSliceOrigin	ExampleVTKReader.h	/^  double * getFreeSliceOrigin(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getFreeSliceVisibility	ExampleVTKReader.cpp	/^int * ExampleVTKReader::getFreeSliceVisibility(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getFreeSliceVisibility	ExampleVTKReader.h	/^  int * getFreeSliceVisibility(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getGaussian	ScalarWidget.cpp	/^bool ScalarWidget::getGaussian(void) {$/;"	f	class:ScalarWidget	signature:(void)
getGaussian	ScalarWidget.h	/^    bool getGaussian(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
getH	Gaussian.cpp	/^float Gaussian::getH(void) const {$/;"	f	class:Gaussian	signature:(void) const
getH	Gaussian.h	/^    float getH(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
getHeight	ExampleVTKReader.cpp	/^int ExampleVTKReader::getHeight(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getHeight	ExampleVTKReader.h	/^  int getHeight(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getHistogram	ExampleVTKReader.cpp	/^float * ExampleVTKReader::getHistogram(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getHistogram	ExampleVTKReader.h	/^  float * getHistogram();$/;"	p	class:ExampleVTKReader	access:public	signature:()
getIsosurfacesColorMap	Isosurfaces.cpp	/^ColorMap * Isosurfaces::getIsosurfacesColorMap(void) {$/;"	f	class:Isosurfaces	signature:(void)
getIsosurfacesColorMap	Isosurfaces.cpp	/^const ColorMap * Isosurfaces::getIsosurfacesColorMap(void) const {$/;"	f	class:Isosurfaces	signature:(void) const
getIsosurfacesColorMap	Isosurfaces.h	/^    ColorMap* getIsosurfacesColorMap(void);$/;"	p	class:Isosurfaces	access:public	signature:(void)
getIsosurfacesColorMap	Isosurfaces.h	/^    const ColorMap* getIsosurfacesColorMap(void) const;$/;"	p	class:Isosurfaces	access:public	signature:(void) const
getIsosurfacesColorMapChangedCallbacks	Isosurfaces.cpp	/^Misc::CallbackList& Isosurfaces::getIsosurfacesColorMapChangedCallbacks(void) {$/;"	f	class:Isosurfaces	signature:(void)
getIsosurfacesColorMapChangedCallbacks	Isosurfaces.h	/^    Misc::CallbackList& getIsosurfacesColorMapChangedCallbacks(void);$/;"	p	class:Isosurfaces	access:public	signature:(void)
getLength	ExampleVTKReader.cpp	/^int ExampleVTKReader::getLength(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getLength	ExampleVTKReader.h	/^  int getLength(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getNumberOfClippingPlanes	ExampleVTKReader.cpp	/^int ExampleVTKReader::getNumberOfClippingPlanes(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getNumberOfClippingPlanes	ExampleVTKReader.h	/^  int getNumberOfClippingPlanes(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getNumberOfControlPoints	ColorMap.cpp	/^int ColorMap::getNumberOfControlPoints(void) const {$/;"	f	class:ColorMap	signature:(void) const
getNumberOfControlPoints	ColorMap.h	/^	int getNumberOfControlPoints(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
getNumberOfControlPoints	ScalarWidget.cpp	/^int ScalarWidget::getNumberOfControlPoints(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
getNumberOfControlPoints	ScalarWidget.h	/^    int getNumberOfControlPoints(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
getNumberOfControlPoints	ScalarWidgetStorage.cpp	/^int ScalarWidgetStorage::getNumberOfControlPoints() {$/;"	f	class:ScalarWidgetStorage	signature:()
getNumberOfControlPoints	ScalarWidgetStorage.h	/^	int getNumberOfControlPoints();$/;"	p	class:ScalarWidgetStorage	access:public	signature:()
getNumberOfControlPoints	Storage.cpp	/^int Storage::getNumberOfControlPoints() {$/;"	f	class:Storage	signature:()
getNumberOfControlPoints	Storage.h	/^	int getNumberOfControlPoints();$/;"	p	class:Storage	access:public	signature:()
getOpacities	ScalarWidget.cpp	/^void ScalarWidget::getOpacities(int component) {$/;"	f	class:ScalarWidget	signature:(int component)
getOpacities	ScalarWidget.cpp	/^void ScalarWidget::getOpacities(void) {$/;"	f	class:ScalarWidget	signature:(void)
getOpacities	ScalarWidget.h	/^    void getOpacities(int component);$/;"	p	class:ScalarWidget	access:public	signature:(int component)
getOpacities	ScalarWidget.h	/^    void getOpacities(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
getPlane	ClippingPlane.cpp	/^Vrui::Plane ClippingPlane::getPlane(void) {$/;"	f	class:ClippingPlane	signature:(void)
getPlane	ClippingPlane.h	/^	Vrui::Plane getPlane(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
getRGBAColors	Storage.cpp	/^RGBAColor* Storage::getRGBAColors() {$/;"	f	class:Storage	signature:()
getRGBAColors	Storage.cpp	/^RGBAColor* Storage::getRGBAColors(int i) {$/;"	f	class:Storage	signature:(int i)
getRGBAColors	Storage.h	/^	RGBAColor* getRGBAColors();$/;"	p	class:Storage	access:public	signature:()
getRGBAColors	Storage.h	/^	RGBAColor* getRGBAColors(int i);$/;"	p	class:Storage	access:public	signature:(int i)
getRequestedRenderMode	ExampleVTKReader.cpp	/^int ExampleVTKReader::getRequestedRenderMode(void) const$/;"	f	class:ExampleVTKReader	signature:(void) const
getRequestedRenderMode	ExampleVTKReader.h	/^  int getRequestedRenderMode(void) const;$/;"	p	class:ExampleVTKReader	access:public	signature:(void) const
getScalar	ScalarWidget.cpp	/^void ScalarWidget::getScalar(float* _scalar) {$/;"	f	class:ScalarWidget	signature:(float* _scalar)
getScalar	ScalarWidget.h	/^    void getScalar(float* _scalar);$/;"	p	class:ScalarWidget	access:public	signature:(float* _scalar)
getScalar	ScalarWidgetControlPoint.cpp	/^float ScalarWidgetControlPoint::getScalar(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
getScalar	ScalarWidgetControlPoint.h	/^	float getScalar(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
getScalar	ScalarWidgetStorage.cpp	/^float ScalarWidgetStorage::getScalar(int i) {$/;"	f	class:ScalarWidgetStorage	signature:(int i)
getScalar	ScalarWidgetStorage.h	/^	float getScalar(int i);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(int i)
getScalars	ScalarWidgetStorage.cpp	/^float* ScalarWidgetStorage::getScalars() {$/;"	f	class:ScalarWidgetStorage	signature:()
getScalars	ScalarWidgetStorage.h	/^	float* getScalars();$/;"	p	class:ScalarWidgetStorage	access:public	signature:()
getSlicesColorMap	Slices.cpp	/^ColorMap * Slices::getSlicesColorMap(void) {$/;"	f	class:Slices	signature:(void)
getSlicesColorMap	Slices.cpp	/^const ColorMap * Slices::getSlicesColorMap(void) const {$/;"	f	class:Slices	signature:(void) const
getSlicesColorMap	Slices.h	/^    ColorMap* getSlicesColorMap(void);$/;"	p	class:Slices	access:public	signature:(void)
getSlicesColorMap	Slices.h	/^    const ColorMap* getSlicesColorMap(void) const;$/;"	p	class:Slices	access:public	signature:(void) const
getSlicesColorMapChangedCallbacks	Slices.cpp	/^Misc::CallbackList& Slices::getSlicesColorMapChangedCallbacks(void) {$/;"	f	class:Slices	signature:(void)
getSlicesColorMapChangedCallbacks	Slices.h	/^    Misc::CallbackList& getSlicesColorMapChangedCallbacks(void);$/;"	p	class:Slices	access:public	signature:(void)
getStorage	ScalarWidget.cpp	/^ScalarWidgetStorage* ScalarWidget::getStorage(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
getStorage	ScalarWidget.h	/^    ScalarWidgetStorage* getStorage(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
getTransferFunction1D	TransferFunction1D.cpp	/^Storage* TransferFunction1D::getTransferFunction1D(void) const {$/;"	f	class:TransferFunction1D	signature:(void) const
getTransferFunction1D	TransferFunction1D.h	/^    Storage* getTransferFunction1D(void) const;$/;"	p	class:TransferFunction1D	access:public	signature:(void) const
getValue	ScalarWidgetControlPoint.cpp	/^double ScalarWidgetControlPoint::getValue(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
getValue	ScalarWidgetControlPoint.h	/^	double getValue(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
getValue	ScalarWidgetStorage.cpp	/^double ScalarWidgetStorage::getValue(int i) {$/;"	f	class:ScalarWidgetStorage	signature:(int i)
getValue	ScalarWidgetStorage.h	/^	double getValue(int i);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(int i)
getValueRange	ColorMap.cpp	/^const std::pair<double,double>& ColorMap::getValueRange(void) const {$/;"	f	class:ColorMap	signature:(void) const
getValueRange	ColorMap.h	/^	const std::pair<double,double>& getValueRange(void) const;$/;"	p	class:ColorMap	access:public	signature:(void) const
getValueRange	ScalarWidget.cpp	/^const std::pair<double, double>& ScalarWidget::getValueRange(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
getValueRange	ScalarWidget.h	/^    const std::pair<double,double>& getValueRange(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
getValues	RGBAColor.cpp	/^float RGBAColor::getValues(int i) {$/;"	f	class:RGBAColor	signature:(int i)
getValues	RGBAColor.cpp	/^float* RGBAColor::getValues(void) {$/;"	f	class:RGBAColor	signature:(void)
getValues	RGBAColor.h	/^	float * getValues(void);$/;"	p	class:RGBAColor	access:public	signature:(void)
getValues	RGBAColor.h	/^	float getValues(int i);$/;"	p	class:RGBAColor	access:public	signature:(int i)
getValues	ScalarWidgetStorage.cpp	/^double* ScalarWidgetStorage::getValues() {$/;"	f	class:ScalarWidgetStorage	signature:()
getValues	ScalarWidgetStorage.h	/^	double* getValues();$/;"	p	class:ScalarWidgetStorage	access:public	signature:()
getValues	Storage.cpp	/^double Storage::getValues(int i) {$/;"	f	class:Storage	signature:(int i)
getValues	Storage.cpp	/^double* Storage::getValues() {$/;"	f	class:Storage	signature:()
getValues	Storage.h	/^	double getValues(int i);$/;"	p	class:Storage	access:public	signature:(int i)
getValues	Storage.h	/^	double* getValues();$/;"	p	class:Storage	access:public	signature:()
getVerbose	ExampleVTKReader.cpp	/^bool ExampleVTKReader::getVerbose(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getVerbose	ExampleVTKReader.h	/^  bool getVerbose(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getW	Gaussian.cpp	/^float Gaussian::getW(void) const {$/;"	f	class:Gaussian	signature:(void) const
getW	Gaussian.h	/^    float getW(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
getWidth	ExampleVTKReader.cpp	/^int ExampleVTKReader::getWidth(void)$/;"	f	class:ExampleVTKReader	signature:(void)
getWidth	ExampleVTKReader.h	/^  int getWidth(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
getX	Gaussian.cpp	/^float Gaussian::getX(void) const {$/;"	f	class:Gaussian	signature:(void) const
getX	Gaussian.h	/^    float getX(void) const;$/;"	p	class:Gaussian	access:public	signature:(void) const
getX	ScalarWidgetControlPoint.cpp	/^GLfloat ScalarWidgetControlPoint::getX(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
getX	ScalarWidgetControlPoint.h	/^	GLfloat getX(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
getY	ScalarWidgetControlPoint.cpp	/^GLfloat ScalarWidgetControlPoint::getY(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
getY	ScalarWidgetControlPoint.h	/^	GLfloat getY(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
glRenderAction	BaseLocator.cpp	/^void BaseLocator::glRenderAction(GLContextData& glContextData) const {$/;"	f	class:BaseLocator	signature:(GLContextData& glContextData) const
glRenderAction	BaseLocator.h	/^	virtual void glRenderAction(GLContextData& contextData) const;$/;"	p	class:BaseLocator	access:public	signature:(GLContextData& contextData) const
glRenderActionTransparent	BaseLocator.cpp	/^void BaseLocator::glRenderActionTransparent(GLContextData& glContextData) const {$/;"	f	class:BaseLocator	signature:(GLContextData& glContextData) const
glRenderActionTransparent	BaseLocator.h	/^	virtual void glRenderActionTransparent(GLContextData& contextData) const;$/;"	p	class:BaseLocator	access:public	signature:(GLContextData& contextData) const
greenFirst	ScalarWidget.h	/^    ScalarWidgetControlPoint* greenFirst;$/;"	m	class:ScalarWidget	access:private
greenGaussian	ScalarWidget.h	/^     bool greenGaussian;$/;"	m	class:ScalarWidget	access:private
greenGaussians	ScalarWidget.h	/^     Gaussian greenGaussians[20];$/;"	m	class:ScalarWidget	access:private
greenHistogram	ScalarWidget.h	/^     float* greenHistogram;$/;"	m	class:ScalarWidget	access:private
greenLast	ScalarWidget.h	/^     ScalarWidgetControlPoint* greenLast;$/;"	m	class:ScalarWidget	access:private
greenOpacities	ScalarWidget.h	/^     float * greenOpacities;$/;"	m	class:ScalarWidget	access:private
guassianToggleButton	TransferFunction1D.cpp	/^    GLMotif::ToggleButton* guassianToggleButton = new GLMotif::ToggleButton("GuassianToggleButton", buttonBox, "Gaussian");$/;"	l
h	Gaussian.h	/^    float h;$/;"	m	class:Gaussian	access:private
h0a	ScalarWidget.cpp	/^            float h0a = exp(-(4 * x1 * x1));$/;"	l
h0b	ScalarWidget.cpp	/^            float h0b = 1. - x1 * x1;$/;"	l
h0c	ScalarWidget.cpp	/^            float h0c = 1.;$/;"	l
h1	ScalarWidget.cpp	/^            float h1;$/;"	l
h2	ScalarWidget.cpp	/^            float h2 = height * h1;$/;"	l
height	ScalarWidget.cpp	/^            float height = gaussians[p].getH();$/;"	l
height	ScalarWidget.cpp	/^        float height = gaussians[p].getH();$/;"	l
height	SwatchesWidget.cpp	/^	GLfloat height = y2-y1;$/;"	l
highlightLocator	BaseLocator.cpp	/^void BaseLocator::highlightLocator(GLContextData& glContextData) const {$/;"	f	class:BaseLocator	signature:(GLContextData& glContextData) const
highlightLocator	BaseLocator.h	/^	virtual void highlightLocator(GLContextData& contextData) const;$/;"	p	class:BaseLocator	access:public	signature:(GLContextData& contextData) const
histogram	ScalarWidget.h	/^    float* histogram;$/;"	m	class:ScalarWidget	access:private
i	ScalarWidgetStorage.cpp	/^	int i=0;$/;"	l
i	Storage.cpp	/^	int i=0;$/;"	l
imageData	ExampleVTKReader.cpp	/^    vtkNew<vtkImageData> imageData;$/;"	l
initContext	ExampleVTKReader.cpp	/^void ExampleVTKReader::initContext(GLContextData& contextData) const$/;"	f	class:ExampleVTKReader	signature:(GLContextData& contextData) const
initContext	ExampleVTKReader.h	/^  virtual void initContext(GLContextData& contextData) const;$/;"	p	class:ExampleVTKReader	access:public	signature:(GLContextData& contextData) const
initialize	Contours.cpp	/^void Contours::initialize(void) {$/;"	f	class:Contours	signature:(void)
initialize	Contours.h	/^    void initialize(void);$/;"	p	class:Contours	access:private	signature:(void)
initialize	ExampleVTKReader.cpp	/^void ExampleVTKReader::initialize(void)$/;"	f	class:ExampleVTKReader	signature:(void)
initialize	ExampleVTKReader.h	/^  void initialize(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
initialize	Isosurfaces.cpp	/^void Isosurfaces::initialize(void) {$/;"	f	class:Isosurfaces	signature:(void)
initialize	Isosurfaces.h	/^    void initialize(void);$/;"	p	class:Isosurfaces	access:private	signature:(void)
initialize	Slices.cpp	/^void Slices::initialize(void) {$/;"	f	class:Slices	signature:(void)
initialize	Slices.h	/^    void initialize(void);$/;"	p	class:Slices	access:private	signature:(void)
initialize	TransferFunction1D.cpp	/^void TransferFunction1D::initialize(void) {$/;"	f	class:TransferFunction1D	signature:(void)
initialize	TransferFunction1D.h	/^    void initialize(void);$/;"	p	class:TransferFunction1D	access:private	signature:(void)
insertControlPoint	ColorMap.cpp	/^void ColorMap::insertControlPoint(double _value) {$/;"	f	class:ColorMap	signature:(double _value)
insertControlPoint	ColorMap.h	/^	void insertControlPoint(double _value);$/;"	p	class:ColorMap	access:public	signature:(double _value)
insertControlPoint	ScalarWidget.cpp	/^void ScalarWidget::insertControlPoint(double _value) {$/;"	f	class:ScalarWidget	signature:(double _value)
insertControlPoint	ScalarWidget.h	/^    void insertControlPoint(double _value);$/;"	p	class:ScalarWidget	access:public	signature:(double _value)
interactive	TransferFunction1D.h	/^    bool interactive;$/;"	m	class:TransferFunction1D	access:private
interactiveToggleButton	TransferFunction1D.h	/^    GLMotif::ToggleButton* interactiveToggleButton;$/;"	m	class:TransferFunction1D	access:private
interactiveToggleButtonCallback	TransferFunction1D.cpp	/^void TransferFunction1D::interactiveToggleButtonCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:TransferFunction1D	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
interactiveToggleButtonCallback	TransferFunction1D.h	/^    void interactiveToggleButtonCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:TransferFunction1D	access:private	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
is1D	ScalarWidget.h	/^    bool is1D;$/;"	m	class:ScalarWidget	access:private
isActive	ClippingPlane.cpp	/^bool ClippingPlane::isActive(void) {$/;"	f	class:ClippingPlane	signature:(void)
isActive	ClippingPlane.h	/^	bool isActive(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
isAllocated	ClippingPlane.cpp	/^bool ClippingPlane::isAllocated(void) {$/;"	f	class:ClippingPlane	signature:(void)
isAllocated	ClippingPlane.h	/^	bool isAllocated(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
isDragging	ColorMap.h	/^	bool isDragging;$/;"	m	class:ColorMap	access:private
isDragging	ScalarWidget.cpp	/^bool ScalarWidget::isDragging(void) const {$/;"	f	class:ScalarWidget	signature:(void) const
isDragging	ScalarWidget.h	/^    bool isDragging(void) const;$/;"	p	class:ScalarWidget	access:public	signature:(void) const
isDragging	TransferFunction1D.cpp	/^bool TransferFunction1D::isDragging(void) const {$/;"	f	class:TransferFunction1D	signature:(void) const
isDragging	TransferFunction1D.h	/^    bool isDragging(void) const;$/;"	p	class:TransferFunction1D	access:public	signature:(void) const
isInteractive	TransferFunction1D.cpp	/^bool TransferFunction1D::isInteractive(void) {$/;"	f	class:TransferFunction1D	signature:(void)
isInteractive	TransferFunction1D.h	/^    bool isInteractive(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
isSelected	SwatchesWidget.h	/^	bool isSelected;$/;"	m	class:SwatchesWidget	access:private
isosurfaceColorMapChangedCallback	Isosurfaces.cpp	/^void Isosurfaces::isosurfaceColorMapChangedCallback(Misc::CallbackData * callBackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData * callBackData)
isosurfaceColorMapChangedCallback	Isosurfaces.h	/^    void isosurfaceColorMapChangedCallback(Misc::CallbackData * callBackData);$/;"	p	class:Isosurfaces	access:public	signature:(Misc::CallbackData * callBackData)
isosurfaceColorMapSubCascade	Isosurfaces.cpp	/^    GLMotif::CascadeButton * isosurfaceColorMapSubCascade =$/;"	l
isosurfaceColorMapSubMenuPopup	Isosurfaces.cpp	/^    GLMotif::Popup * isosurfaceColorMapSubMenuPopup = new GLMotif::Popup("IsosurfaceColorMapSubMenuPopup", Vrui::getWidgetManager());$/;"	l
isosurfaceColorMaps	Isosurfaces.cpp	/^    GLMotif::RadioBox * isosurfaceColorMaps = new GLMotif::RadioBox("IsosurfaceColorMaps", isosurfaceColorMapSubMenuPopup, false);$/;"	l
isosurfaceColormap	Isosurfaces.h	/^    double* isosurfaceColormap;$/;"	m	class:Isosurfaces	access:private
isosurfaceLUT	DataItem.h	/^  vtkSmartPointer<vtkLookupTable> isosurfaceLUT;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
isosurfacesDialog	ExampleVTKReader.h	/^  Isosurfaces* isosurfacesDialog;$/;"	m	class:ExampleVTKReader	access:private
last	ColorMap.h	/^	ControlPoint* last;$/;"	m	class:ColorMap	access:private
last	ScalarWidget.h	/^    ScalarWidgetControlPoint* last;$/;"	m	class:ScalarWidget	access:private
left	ControlPoint.h	/^	ControlPoint* left;$/;"	m	class:ControlPoint	access:public
left	ScalarWidgetControlPoint.h	/^	ScalarWidgetControlPoint* left;$/;"	m	class:ScalarWidgetControlPoint	access:public
leftControlPoint	ColorMap.cpp	/^	ControlPoint* leftControlPoint=first;$/;"	l
leftControlPoint	ScalarWidget.cpp	/^    ScalarWidgetControlPoint* leftControlPoint = first;$/;"	l
lightingEnabled	ColorMap.cpp	/^	GLboolean lightingEnabled=glIsEnabled(GL_LIGHTING);$/;"	l
lightingEnabled	ScalarWidget.cpp	/^    GLboolean lightingEnabled = glIsEnabled(GL_LIGHTING);$/;"	l
lightingEnabled	SwatchesWidget.cpp	/^	GLboolean lightingEnabled=glIsEnabled(GL_LIGHTING);$/;"	l
lineWidth	ColorMap.cpp	/^	GLfloat lineWidth;$/;"	l
lineWidth	ScalarWidget.cpp	/^    GLfloat lineWidth;$/;"	l
locatorTool	ExampleVTKReader.cpp	/^  Vrui::LocatorTool* locatorTool = dynamic_cast<Vrui::LocatorTool*> ($/;"	l
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
mainMenu	ExampleVTKReader.cpp	/^  GLMotif::Menu* mainMenu = new GLMotif::Menu($/;"	l
mainMenu	ExampleVTKReader.h	/^  GLMotif::PopupMenu* mainMenu; \/\/ The program's main menu$/;"	m	class:ExampleVTKReader	access:private
mainMenuPopup	ExampleVTKReader.cpp	/^  GLMotif::PopupMenu* mainMenuPopup = new GLMotif::PopupMenu($/;"	l
manageChild	Contours.cpp	/^    buttonBox->manageChild();$/;"	p	file:	signature:()
manageChild	Contours.cpp	/^    contoursDialog->manageChild();$/;"	p	file:	signature:()
manageChild	Contours.cpp	/^    xyzContoursRowColumn->manageChild();$/;"	p	file:	signature:()
manageChild	ExampleVTKReader.cpp	/^  alphas->manageChild();$/;"	p	file:	signature:()
manageChild	ExampleVTKReader.cpp	/^  analysisToolsMenu->manageChild();$/;"	p	file:	signature:()
manageChild	ExampleVTKReader.cpp	/^  colorMaps->manageChild();$/;"	p	file:	signature:()
manageChild	ExampleVTKReader.cpp	/^  dialog->manageChild();$/;"	p	file:	signature:()
manageChild	ExampleVTKReader.cpp	/^  mainMenu->manageChild();$/;"	p	file:	signature:()
manageChild	ExampleVTKReader.cpp	/^  representationMenu->manageChild();$/;"	p	file:	signature:()
manageChild	ExampleVTKReader.cpp	/^  widgetsMenu->manageChild();$/;"	p	file:	signature:()
manageChild	Isosurfaces.cpp	/^    abcIsosurfacesRowColumn->manageChild();$/;"	p	file:	signature:()
manageChild	Isosurfaces.cpp	/^    buttonBox->manageChild();$/;"	p	file:	signature:()
manageChild	Isosurfaces.cpp	/^    colorEditor->manageChild();$/;"	p	file:	signature:()
manageChild	Isosurfaces.cpp	/^    colorMapDialog->manageChild();$/;"	p	file:	signature:()
manageChild	Isosurfaces.cpp	/^    colorPanel->manageChild();$/;"	p	file:	signature:()
manageChild	Isosurfaces.cpp	/^    colorSlidersBox->manageChild();$/;"	p	file:	signature:()
manageChild	Isosurfaces.cpp	/^    isosurfaceColorMaps->manageChild();$/;"	p	file:	signature:()
manageChild	Slices.cpp	/^    buttonBox->manageChild();$/;"	p	file:	signature:()
manageChild	Slices.cpp	/^    colorEditor->manageChild();$/;"	p	file:	signature:()
manageChild	Slices.cpp	/^    colorMapDialog->manageChild();$/;"	p	file:	signature:()
manageChild	Slices.cpp	/^    colorPanel->manageChild();$/;"	p	file:	signature:()
manageChild	Slices.cpp	/^    colorSlidersBox->manageChild();$/;"	p	file:	signature:()
manageChild	Slices.cpp	/^    sliceColorMaps->manageChild();$/;"	p	file:	signature:()
manageChild	Slices.cpp	/^    xyzSlicesRowColumn->manageChild();$/;"	p	file:	signature:()
manageChild	TransferFunction1D.cpp	/^    buttonBox->manageChild();$/;"	p	file:	signature:()
manageChild	TransferFunction1D.cpp	/^    colorEditor->manageChild();$/;"	p	file:	signature:()
manageChild	TransferFunction1D.cpp	/^    colorMapDialog->manageChild();$/;"	p	file:	signature:()
manageChild	TransferFunction1D.cpp	/^    colorPanel->manageChild();$/;"	p	file:	signature:()
manageChild	TransferFunction1D.cpp	/^    colorSlidersBox->manageChild();$/;"	p	file:	signature:()
mapper	ExampleVTKReader.cpp	/^  vtkNew<vtkDataSetMapper> mapper;$/;"	l
mapperOutline	ExampleVTKReader.cpp	/^  vtkNew<vtkPolyDataMapper> mapperOutline;$/;"	l
mapperVolume	ExampleVTKReader.cpp	/^  vtkNew<vtkSmartVolumeMapper> mapperVolume;$/;"	l
mapperXContourCutter	ExampleVTKReader.cpp	/^  vtkNew<vtkPolyDataMapper> mapperXContourCutter;$/;"	l
mapperYContourCutter	ExampleVTKReader.cpp	/^  vtkNew<vtkPolyDataMapper> mapperYContourCutter;$/;"	l
mapperZContourCutter	ExampleVTKReader.cpp	/^  vtkNew<vtkPolyDataMapper> mapperZContourCutter;$/;"	l
marginWidth	ColorMap.h	/^	GLfloat marginWidth;$/;"	m	class:ColorMap	access:private
marginWidth	ScalarWidget.h	/^    GLfloat marginWidth;$/;"	m	class:ScalarWidget	access:private
marginWidth	SwatchesWidget.h	/^	GLfloat marginWidth;$/;"	m	class:SwatchesWidget	access:private
max_val	ScalarWidget.cpp	/^  float max_val = 1.0f;$/;"	l
min_val	ScalarWidget.cpp	/^  float min_val = 0.0f;$/;"	l
mindist	ScalarWidget.cpp	/^    float mindist = FLT_MAX;$/;"	l
minimumDistanceSquared	ColorMap.cpp	/^	GLfloat minimumDistanceSquared=Math::sqr(controlPointSize*1.5f);$/;"	l
minimumDistanceSquared	ScalarWidget.cpp	/^    GLfloat minimumDistanceSquared = Math::sqr(controlPointSize * 1.5f);$/;"	l
modeB	ScalarWidget.h	/^    modeNone, modeX, modeH, modeW, modeWR, modeWL, modeB$/;"	e	enum:Mode
modeH	ScalarWidget.h	/^    modeNone, modeX, modeH, modeW, modeWR, modeWL, modeB$/;"	e	enum:Mode
modeNone	ScalarWidget.h	/^    modeNone, modeX, modeH, modeW, modeWR, modeWL, modeB$/;"	e	enum:Mode
modeW	ScalarWidget.h	/^    modeNone, modeX, modeH, modeW, modeWR, modeWL, modeB$/;"	e	enum:Mode
modeWL	ScalarWidget.h	/^    modeNone, modeX, modeH, modeW, modeWR, modeWL, modeB$/;"	e	enum:Mode
modeWR	ScalarWidget.h	/^    modeNone, modeX, modeH, modeW, modeWR, modeWL, modeB$/;"	e	enum:Mode
modeX	ScalarWidget.h	/^    modeNone, modeX, modeH, modeW, modeWR, modeWL, modeB$/;"	e	enum:Mode
modelLUT	DataItem.h	/^  vtkSmartPointer<vtkLookupTable> modelLUT;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
motionCallback	ClippingPlaneLocator.cpp	/^void ClippingPlaneLocator::motionCallback($/;"	f	class:ClippingPlaneLocator	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
motionCallback	ClippingPlaneLocator.h	/^	virtual void motionCallback($/;"	p	class:ClippingPlaneLocator	access:public	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
motionCallback	FlashlightLocator.cpp	/^void FlashlightLocator::motionCallback($/;"	f	class:FlashlightLocator	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
motionCallback	FlashlightLocator.h	/^  virtual void motionCallback($/;"	p	class:FlashlightLocator	access:public	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
motionCallback	FreeSliceLocator.cpp	/^void FreeSliceLocator::motionCallback($/;"	f	class:FreeSliceLocator	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
motionCallback	FreeSliceLocator.h	/^  virtual void motionCallback($/;"	p	class:FreeSliceLocator	access:public	signature:( Vrui::LocatorTool::MotionCallbackData* callbackData)
name	main.cpp	/^    std::string name;$/;"	l
newLocator	ExampleVTKReader.cpp	/^    BaseLocator* newLocator;$/;"	l
next	ColorMap.cpp	/^		ControlPoint* next=controlPointPtr->right;$/;"	l
next	ScalarWidget.cpp	/^        ScalarWidgetControlPoint* next = controlPointPtr->right;$/;"	l
nextControlPoint	ColorMap.cpp	/^		ControlPoint* nextControlPoint;$/;"	l
nextControlPoint	ColorMap.cpp	/^	ControlPoint* nextControlPoint;$/;"	l
nextControlPoint	ScalarWidget.cpp	/^            ScalarWidgetControlPoint* nextControlPoint;$/;"	l
nextControlPoint	ScalarWidget.cpp	/^        ScalarWidgetControlPoint* nextControlPoint;$/;"	l
nextControlPoint	ScalarWidget.cpp	/^    ScalarWidgetControlPoint* nextControlPoint;$/;"	l
nextControlPoint	ScalarWidget.cpp	/^  ScalarWidgetControlPoint* nextControlPoint;$/;"	l
numberOfAlphaGaussians	ScalarWidget.h	/^    int numberOfAlphaGaussians;$/;"	m	class:ScalarWidget	access:private
numberOfBlueGaussians	ScalarWidget.h	/^    int numberOfBlueGaussians;$/;"	m	class:ScalarWidget	access:private
numberOfColumns	SwatchesWidget.h	/^	int numberOfColumns;$/;"	m	class:SwatchesWidget	access:private
numberOfControlPoints	ColorMap.cpp	/^	int numberOfControlPoints=0;$/;"	l
numberOfControlPoints	ScalarWidget.cpp	/^    int numberOfControlPoints = 0;$/;"	l
numberOfControlPoints	ScalarWidgetStorage.h	/^	int numberOfControlPoints;$/;"	m	class:ScalarWidgetStorage	access:private
numberOfControlPoints	Storage.h	/^	int numberOfControlPoints;$/;"	m	class:Storage	access:private
numberOfEntries	ColorMap.cpp	/^	int numberOfEntries=256;$/;"	l
numberOfEntries	ScalarWidget.h	/^    int numberOfEntries;$/;"	m	class:ScalarWidget	access:private
numberOfGaussians	ScalarWidget.h	/^    int numberOfGaussians;$/;"	m	class:ScalarWidget	access:private
numberOfGreenGaussians	ScalarWidget.h	/^    int numberOfGreenGaussians;$/;"	m	class:ScalarWidget	access:private
numberOfRedGaussians	ScalarWidget.h	/^    int numberOfRedGaussians;$/;"	m	class:ScalarWidget	access:private
numberOfRows	SwatchesWidget.h	/^	int numberOfRows;$/;"	m	class:SwatchesWidget	access:private
numberOfSupportedClippingPlanes	ExampleVTKReader.cpp	/^  int numberOfSupportedClippingPlanes;$/;"	l
oldGaussian	ScalarWidget.cpp	/^            int oldGaussian = currentGaussian;$/;"	l
oldMode	ScalarWidget.cpp	/^            Mode oldMode = currentMode;$/;"	l
opacities	ScalarWidget.h	/^    float * opacities;$/;"	m	class:ScalarWidget	access:private
opacityFunction	DataItem.h	/^  vtkSmartPointer<vtkPiecewiseFunction> opacityFunction;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
opacitySlider	ExampleVTKReader.cpp	/^  GLMotif::Slider* opacitySlider = new GLMotif::Slider($/;"	l
opacitySliderCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::opacitySliderCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::Slider::ValueChangedCallbackData* callBackData)
opacitySliderCallback	ExampleVTKReader.h	/^  void opacitySliderCallback(GLMotif::Slider::ValueChangedCallbackData* cbData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::Slider::ValueChangedCallbackData* cbData)
opacityValue	ExampleVTKReader.h	/^  GLMotif::TextField* opacityValue;$/;"	m	class:ExampleVTKReader	access:private
operator =	Storage.h	/^	Storage& operator=(const Storage& source);$/;"	p	class:Storage	access:private	signature:(const Storage& source)
pixel	ExampleVTKReader.cpp	/^          unsigned char * pixel = static_cast<unsigned char *>($/;"	l
plane	ClippingPlane.h	/^	Vrui::Plane plane;$/;"	m	class:ClippingPlane	access:private
planeNormal	ClippingPlaneLocator.cpp	/^		Vrui::Vector planeNormal=$/;"	l
planeNormal	FlashlightLocator.cpp	/^          Vrui::Vector planeNormal =$/;"	l
planeNormal	FreeSliceLocator.cpp	/^          Vrui::Vector planeNormal =$/;"	l
planePoint	ClippingPlaneLocator.cpp	/^		Vrui::Point planePoint=callbackData->currentTransformation.getOrigin();$/;"	l
pointerButtonDown	ColorMap.cpp	/^void ColorMap::pointerButtonDown(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
pointerButtonDown	ColorMap.h	/^	virtual void pointerButtonDown(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
pointerButtonDown	ScalarWidget.cpp	/^void ScalarWidget::pointerButtonDown(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
pointerButtonDown	ScalarWidget.h	/^    virtual void pointerButtonDown(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
pointerButtonDown	SwatchesWidget.cpp	/^void SwatchesWidget::pointerButtonDown(GLMotif::Event& event) {$/;"	f	class:SwatchesWidget	signature:(GLMotif::Event& event)
pointerButtonDown	SwatchesWidget.h	/^	virtual void pointerButtonDown(GLMotif::Event& event);$/;"	p	class:SwatchesWidget	access:public	signature:(GLMotif::Event& event)
pointerButtonUp	ColorMap.cpp	/^void ColorMap::pointerButtonUp(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
pointerButtonUp	ColorMap.h	/^	virtual void pointerButtonUp(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
pointerButtonUp	ScalarWidget.cpp	/^void ScalarWidget::pointerButtonUp(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
pointerButtonUp	ScalarWidget.h	/^    virtual void pointerButtonUp(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
pointerButtonUp	SwatchesWidget.cpp	/^void SwatchesWidget::pointerButtonUp(GLMotif::Event& event) {$/;"	f	class:SwatchesWidget	signature:(GLMotif::Event& event)
pointerButtonUp	SwatchesWidget.h	/^	virtual void pointerButtonUp(GLMotif::Event& event);$/;"	p	class:SwatchesWidget	access:public	signature:(GLMotif::Event& event)
pointerMotion	ColorMap.cpp	/^void ColorMap::pointerMotion(GLMotif::Event& event) {$/;"	f	class:ColorMap	signature:(GLMotif::Event& event)
pointerMotion	ColorMap.h	/^	virtual void pointerMotion(GLMotif::Event& event);$/;"	p	class:ColorMap	access:public	signature:(GLMotif::Event& event)
pointerMotion	ScalarWidget.cpp	/^void ScalarWidget::pointerMotion(GLMotif::Event& event) {$/;"	f	class:ScalarWidget	signature:(GLMotif::Event& event)
pointerMotion	ScalarWidget.h	/^    virtual void pointerMotion(GLMotif::Event& event);$/;"	p	class:ScalarWidget	access:public	signature:(GLMotif::Event& event)
pointerMotion	SwatchesWidget.cpp	/^void SwatchesWidget::pointerMotion(GLMotif::Event& event) {$/;"	f	class:SwatchesWidget	signature:(GLMotif::Event& event)
pointerMotion	SwatchesWidget.h	/^	virtual void pointerMotion(GLMotif::Event& event);$/;"	p	class:SwatchesWidget	access:public	signature:(GLMotif::Event& event)
popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(ContoursDialog);$/;"	p	class:Vrui	file:	signature:(ContoursDialog)
popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(isosurfacesDialog);$/;"	p	class:Vrui	file:	signature:(isosurfacesDialog)
popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(renderingDialog);$/;"	p	class:Vrui	file:	signature:(renderingDialog)
popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(slicesDialog);$/;"	p	class:Vrui	file:	signature:(slicesDialog)
popdownPrimaryWidget	ExampleVTKReader.cpp	/^      Vrui::popdownPrimaryWidget(transferFunctionDialog);$/;"	p	class:Vrui	file:	signature:(transferFunctionDialog)
position	FlashlightLocator.cpp	/^          Vrui::Point position = callbackData->currentTransformation.getOrigin();$/;"	l
position	FreeSliceLocator.cpp	/^          Vrui::Point position = callbackData->currentTransformation.getOrigin();$/;"	l
position	ScalarWidget.cpp	/^            float position = gaussians[p].getX();$/;"	l
position	ScalarWidget.cpp	/^        float position = gaussians[p].getX();$/;"	l
preferredSize	ColorMap.h	/^	GLMotif::Vector preferredSize;$/;"	m	class:ColorMap	access:private
preferredSize	ScalarWidget.h	/^    GLMotif::Vector preferredSize;$/;"	m	class:ScalarWidget	access:private
preferredSize	SwatchesWidget.h	/^	GLMotif::Vector preferredSize;$/;"	m	class:SwatchesWidget	access:private
preferredSwatchSize	SwatchesWidget.h	/^	double preferredSwatchSize[2];$/;"	m	class:SwatchesWidget	access:private
previousControlPoint	ColorMap.cpp	/^		ControlPoint* previousControlPoint=first;$/;"	l
previousControlPoint	ColorMap.cpp	/^	ControlPoint* previousControlPoint=first;$/;"	l
previousControlPoint	ControlPointChangedCallbackData.h	/^	ControlPoint* previousControlPoint;$/;"	m	class:ControlPointChangedCallbackData	access:private
previousControlPoint	ScalarWidget.cpp	/^            ScalarWidgetControlPoint* previousControlPoint = first;$/;"	l
previousControlPoint	ScalarWidget.cpp	/^        ScalarWidgetControlPoint* previousControlPoint = first;$/;"	l
previousControlPoint	ScalarWidget.cpp	/^    ScalarWidgetControlPoint* previousControlPoint = first;$/;"	l
previousControlPoint	ScalarWidget.cpp	/^  ScalarWidgetControlPoint* previousControlPoint = first;$/;"	l
previousControlPoint	ScalarWidgetControlPointChangedCallbackData.h	/^    ScalarWidgetControlPoint* previousControlPoint;$/;"	m	class:ScalarWidgetControlPointChangedCallbackData	access:private
printUsage	main.cpp	/^void printUsage(void)$/;"	f	signature:(void)
propertyVolume	DataItem.h	/^  vtkSmartPointer<vtkVolumeProperty> propertyVolume;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
push_back	ExampleVTKReader.cpp	/^      baseLocators.push_back(newLocator);$/;"	p	file:	signature:(newLocator)
rad	ScalarWidget.cpp	/^        float rad = Math::sqr(1.5f * controlPointSize);$/;"	l
reader	ExampleVTKReader.cpp	/^    vtkNew<vtkXMLImageDataReader> reader;$/;"	l
redFirst	ScalarWidget.h	/^    ScalarWidgetControlPoint* redFirst;$/;"	m	class:ScalarWidget	access:private
redGaussian	ScalarWidget.h	/^    bool redGaussian;$/;"	m	class:ScalarWidget	access:private
redGaussians	ScalarWidget.h	/^    Gaussian redGaussians[20];$/;"	m	class:ScalarWidget	access:private
redHistogram	ScalarWidget.h	/^    float* redHistogram;$/;"	m	class:ScalarWidget	access:private
redLast	ScalarWidget.h	/^    ScalarWidgetControlPoint* redLast;$/;"	m	class:ScalarWidget	access:private
redOpacities	ScalarWidget.h	/^    float * redOpacities;$/;"	m	class:ScalarWidget	access:private
removeAlphaControlPointButton	TransferFunction1D.cpp	/^    GLMotif::Button* removeAlphaControlPointButton = new GLMotif::Button("RemoveAlphaControlPointButton", buttonBox,$/;"	l
removeAlphaControlPointCallback	TransferFunction1D.cpp	/^void TransferFunction1D::removeAlphaControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
removeAlphaControlPointCallback	TransferFunction1D.h	/^    void removeAlphaControlPointCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
removeControlPointButton	Contours.cpp	/^    GLMotif::Button * removeControlPointButton =$/;"	l
removeControlPointButton	Isosurfaces.cpp	/^    GLMotif::Button * removeControlPointButton =$/;"	l
removeControlPointButton	Slices.cpp	/^    GLMotif::Button * removeControlPointButton =$/;"	l
removeControlPointButton	TransferFunction1D.cpp	/^    GLMotif::Button* removeControlPointButton = new GLMotif::Button("RemoveControlPointButton", buttonBox, "Remove RGB Point");$/;"	l
removeControlPointCallback	Contours.cpp	/^void Contours::removeControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Contours	signature:(Misc::CallbackData* _callbackData)
removeControlPointCallback	Contours.h	/^    void removeControlPointCallback(Misc::CallbackData * callbackData);$/;"	p	class:Contours	access:private	signature:(Misc::CallbackData * callbackData)
removeControlPointCallback	Isosurfaces.cpp	/^void Isosurfaces::removeControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Isosurfaces	signature:(Misc::CallbackData* _callbackData)
removeControlPointCallback	Isosurfaces.h	/^    void removeControlPointCallback(Misc::CallbackData * callbackData);$/;"	p	class:Isosurfaces	access:private	signature:(Misc::CallbackData * callbackData)
removeControlPointCallback	Slices.cpp	/^void Slices::removeControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData* _callbackData)
removeControlPointCallback	Slices.h	/^    void removeControlPointCallback(Misc::CallbackData * callbackData);$/;"	p	class:Slices	access:private	signature:(Misc::CallbackData * callbackData)
removeControlPointCallback	TransferFunction1D.cpp	/^void TransferFunction1D::removeControlPointCallback(Misc::CallbackData* _callbackData) {$/;"	f	class:TransferFunction1D	signature:(Misc::CallbackData* _callbackData)
removeControlPointCallback	TransferFunction1D.h	/^    void removeControlPointCallback(Misc::CallbackData* _callbackData);$/;"	p	class:TransferFunction1D	access:private	signature:(Misc::CallbackData* _callbackData)
removeGaussian	ScalarWidget.cpp	/^void ScalarWidget::removeGaussian(int which) {$/;"	f	class:ScalarWidget	signature:(int which)
removeGaussian	ScalarWidget.h	/^    void removeGaussian(int which);$/;"	p	class:ScalarWidget	access:public	signature:(int which)
renderMode	main.cpp	/^    int renderMode = -1;$/;"	l
renderingDialog	ExampleVTKReader.h	/^  GLMotif::PopupWindow* renderingDialog;$/;"	m	class:ExampleVTKReader	access:private
representationCascade	ExampleVTKReader.cpp	/^  GLMotif::CascadeButton* representationCascade =$/;"	l
representationMenu	ExampleVTKReader.cpp	/^  GLMotif::SubMenu* representationMenu = new GLMotif::SubMenu($/;"	l
representationMenuPopup	ExampleVTKReader.cpp	/^  GLMotif::Popup* representationMenuPopup = new GLMotif::Popup($/;"	l
representation_Label	ExampleVTKReader.cpp	/^  GLMotif::Label* representation_Label = new GLMotif::Label($/;"	l
representation_RadioBox	ExampleVTKReader.cpp	/^  GLMotif::RadioBox* representation_RadioBox = new GLMotif::RadioBox($/;"	l
requestResize	ColorMap.cpp	/^		parent->requestResize(this, calcNaturalSize());$/;"	p	file:	signature:(this, calcNaturalSize())
requestResize	ScalarWidget.cpp	/^        parent->requestResize(this, calcNaturalSize());$/;"	p	file:	signature:(this, calcNaturalSize())
requestResize	SwatchesWidget.cpp	/^		parent->requestResize(this, calcNaturalSize());$/;"	p	file:	signature:(this, calcNaturalSize())
requestUpdate	Contours.cpp	/^        Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
requestUpdate	Contours.cpp	/^    Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
requestUpdate	ExampleVTKReader.cpp	/^  Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
requestUpdate	Isosurfaces.cpp	/^        Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
requestUpdate	Isosurfaces.cpp	/^    Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
requestUpdate	Slices.cpp	/^        Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
requestUpdate	Slices.cpp	/^    Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
requestUpdate	TransferFunction1D.cpp	/^    Vrui::requestUpdate();$/;"	p	class:Vrui	file:	signature:()
resize	ColorMap.cpp	/^	GLMotif::Widget::resize(_exterior);$/;"	p	class:GLMotif::Widget	file:	signature:(_exterior)
resize	ColorMap.cpp	/^void ColorMap::resize(const GLMotif::Box& _exterior) {$/;"	f	class:ColorMap	signature:(const GLMotif::Box& _exterior)
resize	ColorMap.h	/^	virtual void resize(const GLMotif::Box& _exterior);$/;"	p	class:ColorMap	access:public	signature:(const GLMotif::Box& _exterior)
resize	ScalarWidget.cpp	/^    GLMotif::Widget::resize(_exterior);$/;"	p	class:GLMotif::Widget	file:	signature:(_exterior)
resize	ScalarWidget.cpp	/^void ScalarWidget::resize(const GLMotif::Box& _exterior) {$/;"	f	class:ScalarWidget	signature:(const GLMotif::Box& _exterior)
resize	ScalarWidget.h	/^    virtual void resize(const GLMotif::Box& _exterior);$/;"	p	class:ScalarWidget	access:public	signature:(const GLMotif::Box& _exterior)
resize	SwatchesWidget.cpp	/^	GLMotif::Widget::resize(_exterior);$/;"	p	class:GLMotif::Widget	file:	signature:(_exterior)
resize	SwatchesWidget.cpp	/^void SwatchesWidget::resize(const GLMotif::Box& _exterior) {$/;"	f	class:SwatchesWidget	signature:(const GLMotif::Box& _exterior)
resize	SwatchesWidget.h	/^	virtual void resize(const GLMotif::Box& _exterior);$/;"	p	class:SwatchesWidget	access:public	signature:(const GLMotif::Box& _exterior)
result	ColorMap.cpp	/^	GLMotif::Vector result=preferredSize;$/;"	l
result	ScalarWidget.cpp	/^    GLMotif::Vector result = preferredSize;$/;"	l
result	SwatchesWidget.cpp	/^	GLMotif::Vector result=preferredSize;$/;"	l
rgbaColor	ColorMap.cpp	/^	RGBAColor* rgbaColor = new RGBAColor(0.0f,0.0f,0.0f,0.0f);$/;"	l
rgbaColor	ControlPoint.h	/^	RGBAColor* rgbaColor;$/;"	m	class:ControlPoint	access:public
rgbaColor	Isosurfaces.cpp	/^        RGBAColor* rgbaColor = colorMap->getControlPointColor();$/;"	l
rgbaColor	Isosurfaces.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(0.0f, 0.0f, 0.0f, 0.0f);$/;"	l
rgbaColor	Isosurfaces.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(1.0f, 0.0f, 0.0f, 1.0f);$/;"	l
rgbaColor	Isosurfaces.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(_color[0], _color[1], _color[2], 1.0f);$/;"	l
rgbaColor	Slices.cpp	/^        RGBAColor* rgbaColor = colorMap->getControlPointColor();$/;"	l
rgbaColor	Slices.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(0.0f, 0.0f, 0.0f, 0.0f);$/;"	l
rgbaColor	Slices.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(1.0f, 0.0f, 0.0f, 1.0f);$/;"	l
rgbaColor	Slices.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(_color[0], _color[1], _color[2], 1.0f);$/;"	l
rgbaColor	TransferFunction1D.cpp	/^        RGBAColor* rgbaColor = colorMap->getControlPointColor();$/;"	l
rgbaColor	TransferFunction1D.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(0.0f, 0.0f, 0.0f, 0.0f);$/;"	l
rgbaColor	TransferFunction1D.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(1.0f, 0.0f, 0.0f, 1.0f);$/;"	l
rgbaColor	TransferFunction1D.cpp	/^    RGBAColor* rgbaColor = new RGBAColor(_color[0], _color[1], _color[2], 1.0f);$/;"	l
rgbaColors	Storage.h	/^	RGBAColor* rgbaColors;$/;"	m	class:Storage	access:private
right	ControlPoint.h	/^	ControlPoint* right;$/;"	m	class:ControlPoint	access:public
right	ScalarWidgetControlPoint.h	/^	ScalarWidgetControlPoint* right;$/;"	m	class:ScalarWidgetControlPoint	access:public
row	SwatchesWidget.cpp	/^	int row = int(((y-y1) \/ height)*double(numberOfRows));$/;"	l
run	main.cpp	/^    application.run();$/;"	p	file:	signature:()
saveState	ScalarWidget.cpp	/^void ScalarWidget::saveState(void) {$/;"	f	class:ScalarWidget	signature:(void)
saveState	ScalarWidget.h	/^    void saveState(void);$/;"	p	class:ScalarWidget	access:private	signature:(void)
scalar	ScalarWidgetControlPoint.h	/^	float scalar;$/;"	m	class:ScalarWidgetControlPoint	access:private
scalarWidget	ScalarWidgetCallbackData.h	/^	ScalarWidget* scalarWidget;$/;"	m	class:ScalarWidgetCallbackData	access:public
scalars	ScalarWidgetStorage.h	/^	float* scalars;$/;"	m	class:ScalarWidgetStorage	access:private
selectControlPoint	ColorMap.cpp	/^void ColorMap::selectControlPoint(int i) {$/;"	f	class:ColorMap	signature:(int i)
selectControlPoint	ColorMap.h	/^	void selectControlPoint(int i);$/;"	p	class:ColorMap	access:public	signature:(int i)
selectControlPoint	ScalarWidget.cpp	/^void ScalarWidget::selectControlPoint(int i) {$/;"	f	class:ScalarWidget	signature:(int i)
selectControlPoint	ScalarWidget.h	/^    void selectControlPoint(int i);$/;"	p	class:ScalarWidget	access:public	signature:(int i)
setAIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::setAIsosurface(float aIsosurface)$/;"	f	class:ExampleVTKReader	signature:(float aIsosurface)
setAIsosurface	ExampleVTKReader.h	/^  void setAIsosurface(float aIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(float aIsosurface)
setAIsosurface	Isosurfaces.cpp	/^        exampleVTKReader->setAIsosurface(float(callBackData->value));$/;"	p	file:	signature:(float(callBackData->value))
setActive	ClippingPlane.cpp	/^void ClippingPlane::setActive(bool _active) {$/;"	f	class:ClippingPlane	signature:(bool _active)
setActive	ClippingPlane.h	/^	void setActive(bool _active);$/;"	p	class:ClippingPlane	access:public	signature:(bool _active)
setActive	ClippingPlaneLocator.cpp	/^		clippingPlane->setActive(false);$/;"	p	file:	signature:(false)
setActive	ClippingPlaneLocator.cpp	/^		clippingPlane->setActive(true);$/;"	p	file:	signature:(true)
setActive	ExampleVTKReader.cpp	/^    ClippingPlanes[i].setActive(false);$/;"	p	file:	signature:(false)
setAllocated	ClippingPlane.cpp	/^void ClippingPlane::setAllocated(bool _allocated) {$/;"	f	class:ClippingPlane	signature:(bool _allocated)
setAllocated	ClippingPlane.h	/^	void setAllocated(bool _allocated);$/;"	p	class:ClippingPlane	access:public	signature:(bool _allocated)
setAllocated	ClippingPlaneLocator.cpp	/^		clippingPlane->setAllocated(false);$/;"	p	file:	signature:(false)
setAllocated	ClippingPlaneLocator.cpp	/^		clippingPlane->setAllocated(true);$/;"	p	file:	signature:(true)
setAllocated	ExampleVTKReader.cpp	/^    ClippingPlanes[i].setAllocated(false);$/;"	p	file:	signature:(false)
setBIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::setBIsosurface(float bIsosurface)$/;"	f	class:ExampleVTKReader	signature:(float bIsosurface)
setBIsosurface	ExampleVTKReader.h	/^  void setBIsosurface(float bIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(float bIsosurface)
setBIsosurface	Isosurfaces.cpp	/^        exampleVTKReader->setBIsosurface(float(callBackData->value));$/;"	p	file:	signature:(float(callBackData->value))
setBorderType	Contours.cpp	/^    alphaComponent->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	Isosurfaces.cpp	/^    colorMap->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	Isosurfaces.cpp	/^    colorPane->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	Isosurfaces.cpp	/^    swatchesWidget->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	Slices.cpp	/^    colorMap->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	Slices.cpp	/^    colorPane->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	Slices.cpp	/^    swatchesWidget->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	TransferFunction1D.cpp	/^    alphaComponent->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	TransferFunction1D.cpp	/^    colorMap->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	TransferFunction1D.cpp	/^    colorPane->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderType	TransferFunction1D.cpp	/^    swatchesWidget->setBorderType(GLMotif::Widget::LOWERED);$/;"	p	file:	signature:(GLMotif::Widget::LOWERED)
setBorderWidth	Contours.cpp	/^    alphaComponent->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	Isosurfaces.cpp	/^    colorMap->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	Isosurfaces.cpp	/^    colorPane->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	Isosurfaces.cpp	/^    swatchesWidget->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	Slices.cpp	/^    colorMap->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	Slices.cpp	/^    colorPane->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	Slices.cpp	/^    swatchesWidget->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	TransferFunction1D.cpp	/^    alphaComponent->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	TransferFunction1D.cpp	/^    colorMap->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	TransferFunction1D.cpp	/^    colorPane->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBorderWidth	TransferFunction1D.cpp	/^    swatchesWidget->setBorderWidth(styleSheet.size * 0.5f);$/;"	p	file:	signature:(styleSheet.size * 0.5f)
setBounds	SwatchesWidget.cpp	/^void SwatchesWidget::setBounds(GLfloat width, GLfloat height) {$/;"	f	class:SwatchesWidget	signature:(GLfloat width, GLfloat height)
setBounds	SwatchesWidget.h	/^	void setBounds(GLfloat width, GLfloat height);$/;"	p	class:SwatchesWidget	access:public	signature:(GLfloat width, GLfloat height)
setBx	Gaussian.cpp	/^void Gaussian::setBx(float bx) {$/;"	f	class:Gaussian	signature:(float bx)
setBx	Gaussian.h	/^    void setBx(float bx);$/;"	p	class:Gaussian	access:public	signature:(float bx)
setBx	ScalarWidget.cpp	/^                        gaussians[currentGaussian].setBx(gaussians[currentGaussian].getW());$/;"	p	file:	signature:(gaussians[currentGaussian].getW())
setBy	Gaussian.cpp	/^void Gaussian::setBy(float by) {$/;"	f	class:Gaussian	signature:(float by)
setBy	Gaussian.h	/^    void setBy(float by);$/;"	p	class:Gaussian	access:public	signature:(float by)
setCIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::setCIsosurface(float cIsosurface)$/;"	f	class:ExampleVTKReader	signature:(float cIsosurface)
setCIsosurface	ExampleVTKReader.h	/^  void setCIsosurface(float cIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(float cIsosurface)
setCIsosurface	Isosurfaces.cpp	/^        exampleVTKReader->setCIsosurface(float(callBackData->value));$/;"	p	file:	signature:(float(callBackData->value))
setColorMap	ColorMap.cpp	/^void ColorMap::setColorMap(Storage* _storage) {$/;"	f	class:ColorMap	signature:(Storage* _storage)
setColorMap	ColorMap.h	/^	void setColorMap(Storage* _colorMap);$/;"	p	class:ColorMap	access:public	signature:(Storage* _colorMap)
setColorMap	Isosurfaces.cpp	/^    colorMap->setColorMap(storage);$/;"	p	file:	signature:(storage)
setColorMap	Isosurfaces.cpp	/^void Isosurfaces::setColorMap(Storage* storage) {$/;"	f	class:Isosurfaces	signature:(Storage* storage)
setColorMap	Isosurfaces.h	/^    void setColorMap(Storage* storage);$/;"	p	class:Isosurfaces	access:public	signature:(Storage* storage)
setColorMap	Slices.cpp	/^    colorMap->setColorMap(storage);$/;"	p	file:	signature:(storage)
setColorMap	Slices.cpp	/^void Slices::setColorMap(Storage* storage) {$/;"	f	class:Slices	signature:(Storage* storage)
setColorMap	Slices.h	/^    void setColorMap(Storage* storage);$/;"	p	class:Slices	access:public	signature:(Storage* storage)
setColorMap	TransferFunction1D.cpp	/^    colorMap->setColorMap(storage);$/;"	p	file:	signature:(storage)
setComponent	ScalarWidget.cpp	/^void ScalarWidget::setComponent(int component) {$/;"	f	class:ScalarWidget	signature:(int component)
setComponent	ScalarWidget.h	/^    void setComponent(int component);$/;"	p	class:ScalarWidget	access:public	signature:(int component)
setContourVisible	ExampleVTKReader.cpp	/^void ExampleVTKReader::setContourVisible(bool visible)$/;"	f	class:ExampleVTKReader	signature:(bool visible)
setContourVisible	ExampleVTKReader.h	/^  void setContourVisible(bool visible);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool visible)
setControlPointColor	ColorMap.cpp	/^void ColorMap::setControlPointColor(RGBAColor rgbaColor) {$/;"	f	class:ColorMap	signature:(RGBAColor rgbaColor)
setControlPointColor	ColorMap.cpp	/^void ColorMap::setControlPointColor(RGBAColor* _rgbaColor) {$/;"	f	class:ColorMap	signature:(RGBAColor* _rgbaColor)
setControlPointColor	ColorMap.h	/^	void setControlPointColor(RGBAColor _rgbaColor);$/;"	p	class:ColorMap	access:public	signature:(RGBAColor _rgbaColor)
setControlPointColor	ColorMap.h	/^	void setControlPointColor(RGBAColor* _rgbaColor);$/;"	p	class:ColorMap	access:public	signature:(RGBAColor* _rgbaColor)
setControlPointColor	Isosurfaces.cpp	/^    colorMap->setControlPointColor(rgbaColor);$/;"	p	file:	signature:(rgbaColor)
setControlPointColor	Slices.cpp	/^    colorMap->setControlPointColor(rgbaColor);$/;"	p	file:	signature:(rgbaColor)
setControlPointColor	TransferFunction1D.cpp	/^    colorMap->setControlPointColor(rgbaColor);$/;"	p	file:	signature:(rgbaColor)
setControlPointScalar	ScalarWidget.cpp	/^void ScalarWidget::setControlPointScalar(float _scalar) {$/;"	f	class:ScalarWidget	signature:(float _scalar)
setControlPointScalar	ScalarWidget.h	/^    void setControlPointScalar(float _scalar);$/;"	p	class:ScalarWidget	access:public	signature:(float _scalar)
setControlPointSize	ColorMap.cpp	/^void ColorMap::setControlPointSize(GLfloat _controlPointSize) {$/;"	f	class:ColorMap	signature:(GLfloat _controlPointSize)
setControlPointSize	ColorMap.h	/^	void setControlPointSize(GLfloat _controlPointSize);$/;"	p	class:ColorMap	access:public	signature:(GLfloat _controlPointSize)
setControlPointSize	Contours.cpp	/^    alphaComponent->setControlPointSize(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setControlPointSize	Isosurfaces.cpp	/^    colorMap->setControlPointSize(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setControlPointSize	ScalarWidget.cpp	/^void ScalarWidget::setControlPointSize(GLfloat _controlPointSize) {$/;"	f	class:ScalarWidget	signature:(GLfloat _controlPointSize)
setControlPointSize	ScalarWidget.h	/^    void setControlPointSize(GLfloat _controlPointSize);$/;"	p	class:ScalarWidget	access:public	signature:(GLfloat _controlPointSize)
setControlPointSize	Slices.cpp	/^    colorMap->setControlPointSize(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setControlPointSize	TransferFunction1D.cpp	/^    alphaComponent->setControlPointSize(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setControlPointSize	TransferFunction1D.cpp	/^    colorMap->setControlPointSize(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setControlPointValue	ColorMap.cpp	/^void ColorMap::setControlPointValue(double _value) {$/;"	f	class:ColorMap	signature:(double _value)
setControlPointValue	ColorMap.h	/^	void setControlPointValue(double _value);$/;"	p	class:ColorMap	access:public	signature:(double _value)
setControlPointValue	ScalarWidget.cpp	/^void ScalarWidget::setControlPointValue(double _value) {$/;"	f	class:ScalarWidget	signature:(double _value)
setControlPointValue	ScalarWidget.h	/^    void setControlPointValue(double _value);$/;"	p	class:ScalarWidget	access:public	signature:(double _value)
setFileName	ExampleVTKReader.cpp	/^void ExampleVTKReader::setFileName(const char* name)$/;"	f	class:ExampleVTKReader	signature:(const char* name)
setFileName	ExampleVTKReader.h	/^  void setFileName(const char* name);$/;"	p	class:ExampleVTKReader	access:public	signature:(const char* name)
setFileName	main.cpp	/^      application.setFileName(name.c_str());$/;"	p	file:	signature:(name.c_str())
setGaussian	ScalarWidget.cpp	/^void ScalarWidget::setGaussian(bool gaussian) {$/;"	f	class:ScalarWidget	signature:(bool gaussian)
setGaussian	ScalarWidget.h	/^    void setGaussian(bool gaussian);$/;"	p	class:ScalarWidget	access:public	signature:(bool gaussian)
setH	Gaussian.cpp	/^void Gaussian::setH(float h) {$/;"	f	class:Gaussian	signature:(float h)
setH	Gaussian.h	/^    void setH(float h);$/;"	p	class:Gaussian	access:public	signature:(float h)
setH	ScalarWidget.cpp	/^                    gaussians[currentGaussian].setH(y);$/;"	p	file:	signature:(y)
setHistogram	Contours.cpp	/^    alphaComponent->setHistogram(this->exampleVTKReader->getHistogram());$/;"	p	file:	signature:(this->exampleVTKReader->getHistogram())
setHistogram	ScalarWidget.cpp	/^void ScalarWidget::setHistogram(float* hist)$/;"	f	class:ScalarWidget	signature:(float* hist)
setHistogram	ScalarWidget.h	/^    void setHistogram(float* hist);$/;"	p	class:ScalarWidget	access:public	signature:(float* hist)
setHistogram	TransferFunction1D.cpp	/^    alphaComponent->setHistogram(this->exampleVTKReader->getHistogram());$/;"	p	file:	signature:(this->exampleVTKReader->getHistogram())
setInteractive	TransferFunction1D.cpp	/^void TransferFunction1D::setInteractive(bool interactive) {$/;"	f	class:TransferFunction1D	signature:(bool interactive)
setInteractive	TransferFunction1D.h	/^    void setInteractive(bool interactive);$/;"	p	class:TransferFunction1D	access:public	signature:(bool interactive)
setIsosurfaceColorMapChanged	ExampleVTKReader.h	/^  void setIsosurfaceColorMapChanged(bool SliceColorMapChanged);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool SliceColorMapChanged)
setIsosurfacesColorMap	ExampleVTKReader.cpp	/^    this->isosurfacesDialog->setIsosurfacesColorMap(CINVERSE_RAINBOW, 0.0, 1.0);$/;"	p	file:	signature:(CINVERSE_RAINBOW, 0.0, 1.0)
setIsosurfacesColorMap	Isosurfaces.cpp	/^void Isosurfaces::setIsosurfacesColorMap(int colorMapCreationType, double _minimum, double _maximum) {$/;"	f	class:Isosurfaces	signature:(int colorMapCreationType, double _minimum, double _maximum)
setIsosurfacesColorMap	Isosurfaces.h	/^    void setIsosurfacesColorMap(int colorMapCreationType, double _minimum, double _maximum);$/;"	p	class:Isosurfaces	access:public	signature:(int colorMapCreationType, double _minimum, double _maximum)
setMainMenu	ExampleVTKReader.cpp	/^  Vrui::setMainMenu(mainMenu);$/;"	p	class:Vrui	file:	signature:(mainMenu)
setMarginWidth	ColorMap.cpp	/^void ColorMap::setMarginWidth(GLfloat _marginWidth) {$/;"	f	class:ColorMap	signature:(GLfloat _marginWidth)
setMarginWidth	ColorMap.h	/^	void setMarginWidth(GLfloat _marginWidth);$/;"	p	class:ColorMap	access:public	signature:(GLfloat _marginWidth)
setMarginWidth	Contours.cpp	/^    alphaComponent->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	Isosurfaces.cpp	/^    colorMap->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	Isosurfaces.cpp	/^    colorPanel->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	Isosurfaces.cpp	/^    swatchesWidget->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	ScalarWidget.cpp	/^void ScalarWidget::setMarginWidth(GLfloat _marginWidth) {$/;"	f	class:ScalarWidget	signature:(GLfloat _marginWidth)
setMarginWidth	ScalarWidget.h	/^    void setMarginWidth(GLfloat _marginWidth);$/;"	p	class:ScalarWidget	access:public	signature:(GLfloat _marginWidth)
setMarginWidth	Slices.cpp	/^    colorMap->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	Slices.cpp	/^    colorPanel->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	Slices.cpp	/^    swatchesWidget->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	SwatchesWidget.cpp	/^void SwatchesWidget::setMarginWidth(GLfloat _marginWidth) {$/;"	f	class:SwatchesWidget	signature:(GLfloat _marginWidth)
setMarginWidth	SwatchesWidget.h	/^	void setMarginWidth(GLfloat _marginWidth);$/;"	p	class:SwatchesWidget	access:public	signature:(GLfloat _marginWidth)
setMarginWidth	TransferFunction1D.cpp	/^    alphaComponent->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	TransferFunction1D.cpp	/^    colorMap->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	TransferFunction1D.cpp	/^    colorPanel->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setMarginWidth	TransferFunction1D.cpp	/^    swatchesWidget->setMarginWidth(styleSheet.size);$/;"	p	file:	signature:(styleSheet.size)
setNavigationTransformation	ExampleVTKReader.cpp	/^  Vrui::setNavigationTransformation(this->Center, this->Radius);$/;"	p	class:Vrui	file:	signature:(this->Center, this->Radius)
setOrientation	Contours.cpp	/^    buttonBox->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Contours.cpp	/^    xyzContoursRowColumn->setOrientation(GLMotif::RowColumn::VERTICAL);$/;"	p	file:	signature:(GLMotif::RowColumn::VERTICAL)
setOrientation	ExampleVTKReader.cpp	/^  dialog->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Isosurfaces.cpp	/^    abcIsosurfacesRowColumn->setOrientation(GLMotif::RowColumn::VERTICAL);$/;"	p	file:	signature:(GLMotif::RowColumn::VERTICAL)
setOrientation	Isosurfaces.cpp	/^    buttonBox->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Isosurfaces.cpp	/^    colorEditor->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Isosurfaces.cpp	/^    colorPanel->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Isosurfaces.cpp	/^    colorSlidersBox->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Slices.cpp	/^    buttonBox->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Slices.cpp	/^    colorEditor->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Slices.cpp	/^    colorPanel->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Slices.cpp	/^    colorSlidersBox->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	Slices.cpp	/^    xyzSlicesRowColumn->setOrientation(GLMotif::RowColumn::VERTICAL);$/;"	p	file:	signature:(GLMotif::RowColumn::VERTICAL)
setOrientation	TransferFunction1D.cpp	/^    buttonBox->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	TransferFunction1D.cpp	/^    colorEditor->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	TransferFunction1D.cpp	/^    colorPanel->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setOrientation	TransferFunction1D.cpp	/^    colorSlidersBox->setOrientation(GLMotif::RowColumn::HORIZONTAL);$/;"	p	file:	signature:(GLMotif::RowColumn::HORIZONTAL)
setPacking	Isosurfaces.cpp	/^    colorSlidersBox->setPacking(GLMotif::RowColumn::PACK_GRID);$/;"	p	file:	signature:(GLMotif::RowColumn::PACK_GRID)
setPacking	Slices.cpp	/^    colorSlidersBox->setPacking(GLMotif::RowColumn::PACK_GRID);$/;"	p	file:	signature:(GLMotif::RowColumn::PACK_GRID)
setPacking	TransferFunction1D.cpp	/^    buttonBox->setPacking(GLMotif::RowColumn::PACK_GRID);$/;"	p	file:	signature:(GLMotif::RowColumn::PACK_GRID)
setPacking	TransferFunction1D.cpp	/^    colorSlidersBox->setPacking(GLMotif::RowColumn::PACK_GRID);$/;"	p	file:	signature:(GLMotif::RowColumn::PACK_GRID)
setPlane	ClippingPlane.cpp	/^void ClippingPlane::setPlane(Vrui::Plane _plane) {$/;"	f	class:ClippingPlane	signature:(Vrui::Plane _plane)
setPlane	ClippingPlane.h	/^	void setPlane(Vrui::Plane plane);$/;"	p	class:ClippingPlane	access:public	signature:(Vrui::Plane plane)
setPreferredSize	ColorMap.cpp	/^void ColorMap::setPreferredSize(const GLMotif::Vector& _preferredSize) {$/;"	f	class:ColorMap	signature:(const GLMotif::Vector& _preferredSize)
setPreferredSize	ColorMap.h	/^	void setPreferredSize(const GLMotif::Vector& _preferredSize);$/;"	p	class:ColorMap	access:public	signature:(const GLMotif::Vector& _preferredSize)
setPreferredSize	ScalarWidget.cpp	/^void ScalarWidget::setPreferredSize(const GLMotif::Vector& _preferredSize) {$/;"	f	class:ScalarWidget	signature:(const GLMotif::Vector& _preferredSize)
setPreferredSize	ScalarWidget.h	/^    void setPreferredSize(const GLMotif::Vector& _preferredSize);$/;"	p	class:ScalarWidget	access:public	signature:(const GLMotif::Vector& _preferredSize)
setPreferredSize	SwatchesWidget.cpp	/^void SwatchesWidget::setPreferredSize(const GLMotif::Vector& _preferredSize) {$/;"	f	class:SwatchesWidget	signature:(const GLMotif::Vector& _preferredSize)
setPreferredSize	SwatchesWidget.h	/^	void setPreferredSize(const GLMotif::Vector& _preferredSize);$/;"	p	class:SwatchesWidget	access:public	signature:(const GLMotif::Vector& _preferredSize)
setPreferredSwatchSize	SwatchesWidget.cpp	/^void SwatchesWidget::setPreferredSwatchSize(void) {$/;"	f	class:SwatchesWidget	signature:(void)
setPreferredSwatchSize	SwatchesWidget.h	/^	void setPreferredSwatchSize(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
setRequestedRenderMode	ExampleVTKReader.cpp	/^void ExampleVTKReader::setRequestedRenderMode(int mode)$/;"	f	class:ExampleVTKReader	signature:(int mode)
setRequestedRenderMode	ExampleVTKReader.h	/^  void setRequestedRenderMode(int mode);$/;"	p	class:ExampleVTKReader	access:public	signature:(int mode)
setRequestedRenderMode	main.cpp	/^      application.setRequestedRenderMode(renderMode);$/;"	p	file:	signature:(renderMode)
setScalar	ScalarWidget.cpp	/^            controlPoint->setScalar(_scalar);$/;"	p	file:	signature:(_scalar)
setScalar	ScalarWidget.cpp	/^        controlPoint->setScalar(_scalar);$/;"	p	file:	signature:(_scalar)
setScalar	ScalarWidgetControlPoint.cpp	/^void ScalarWidgetControlPoint::setScalar(float _scalar) {$/;"	f	class:ScalarWidgetControlPoint	signature:(float _scalar)
setScalar	ScalarWidgetControlPoint.h	/^	void setScalar(float _scalar);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(float _scalar)
setSelectedToggle	ExampleVTKReader.cpp	/^  analysisTools_RadioBox->setSelectedToggle(showClippingPlane);$/;"	p	file:	signature:(showClippingPlane)
setSelectedToggle	ExampleVTKReader.cpp	/^  representation_RadioBox->setSelectedToggle(showSurface);$/;"	p	file:	signature:(showSurface)
setSelectionMode	ExampleVTKReader.cpp	/^  alphas->setSelectionMode(GLMotif::RadioBox::ALWAYS_ONE);$/;"	p	file:	signature:(GLMotif::RadioBox::ALWAYS_ONE)
setSelectionMode	ExampleVTKReader.cpp	/^  analysisTools_RadioBox->setSelectionMode(GLMotif::RadioBox::ALWAYS_ONE);$/;"	p	file:	signature:(GLMotif::RadioBox::ALWAYS_ONE)
setSelectionMode	ExampleVTKReader.cpp	/^  colorMaps->setSelectionMode(GLMotif::RadioBox::ALWAYS_ONE);$/;"	p	file:	signature:(GLMotif::RadioBox::ALWAYS_ONE)
setSelectionMode	ExampleVTKReader.cpp	/^  representation_RadioBox->setSelectionMode(GLMotif::RadioBox::ATMOST_ONE);$/;"	p	file:	signature:(GLMotif::RadioBox::ATMOST_ONE)
setSelectionMode	Isosurfaces.cpp	/^    isosurfaceColorMaps->setSelectionMode(GLMotif::RadioBox::ALWAYS_ONE);$/;"	p	file:	signature:(GLMotif::RadioBox::ALWAYS_ONE)
setSelectionMode	Slices.cpp	/^    sliceColorMaps->setSelectionMode(GLMotif::RadioBox::ALWAYS_ONE);$/;"	p	file:	signature:(GLMotif::RadioBox::ALWAYS_ONE)
setSliceColorMapChanged	ExampleVTKReader.h	/^  void setSliceColorMapChanged(bool SliceColorMapChanged);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool SliceColorMapChanged)
setSlicesColorMap	ExampleVTKReader.cpp	/^    this->slicesDialog->setSlicesColorMap(CINVERSE_RAINBOW, 0.0, 1.0);$/;"	p	file:	signature:(CINVERSE_RAINBOW, 0.0, 1.0)
setSlicesColorMap	Slices.cpp	/^void Slices::setSlicesColorMap(int colorMapCreationType, double _minimum, double _maximum) {$/;"	f	class:Slices	signature:(int colorMapCreationType, double _minimum, double _maximum)
setSlicesColorMap	Slices.h	/^    void setSlicesColorMap(int colorMapCreationType, double _minimum, double _maximum);$/;"	p	class:Slices	access:public	signature:(int colorMapCreationType, double _minimum, double _maximum)
setSliderColor	Isosurfaces.cpp	/^    colorSlider->setSliderColor(color);$/;"	p	file:	signature:(color)
setSliderColor	Slices.cpp	/^    colorSlider->setSliderColor(color);$/;"	p	file:	signature:(color)
setSliderColor	TransferFunction1D.cpp	/^    colorSlider->setSliderColor(color);$/;"	p	file:	signature:(color)
setStorage	ScalarWidget.cpp	/^void ScalarWidget::setStorage(ScalarWidgetStorage* _storage) {$/;"	f	class:ScalarWidget	signature:(ScalarWidgetStorage* _storage)
setStorage	ScalarWidget.h	/^    void setStorage(ScalarWidgetStorage* _scalarStorage);$/;"	p	class:ScalarWidget	access:public	signature:(ScalarWidgetStorage* _scalarStorage)
setSwatchesSize	SwatchesWidget.cpp	/^void SwatchesWidget::setSwatchesSize(void) {$/;"	f	class:SwatchesWidget	signature:(void)
setSwatchesSize	SwatchesWidget.h	/^	void setSwatchesSize(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
setToggle	Contours.cpp	/^    showContoursToggle->setToggle(true);$/;"	p	file:	signature:(true)
setToggle	Contours.cpp	/^    showXSliceToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	Contours.cpp	/^    showYSliceToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	Contours.cpp	/^    showZSliceToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	ExampleVTKReader.cpp	/^  showContoursDialog->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	ExampleVTKReader.cpp	/^  showIsosurfacesDialog->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	ExampleVTKReader.cpp	/^  showOutline->setToggle(true);$/;"	p	file:	signature:(true)
setToggle	ExampleVTKReader.cpp	/^  showRenderingDialog->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	ExampleVTKReader.cpp	/^  showSlicesDialog->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	ExampleVTKReader.cpp	/^  showTransferFunctionDialog->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	Isosurfaces.cpp	/^    showAIsosurfaceToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	Isosurfaces.cpp	/^    showBIsosurfaceToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	Isosurfaces.cpp	/^    showCIsosurfacesToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	Slices.cpp	/^    showXSliceToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	Slices.cpp	/^    showYSliceToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	Slices.cpp	/^    showZSliceToggle->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	TransferFunction1D.cpp	/^    guassianToggleButton->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	TransferFunction1D.cpp	/^    interactiveToggleButton->setToggle(false);$/;"	p	file:	signature:(false)
setToggle	TransferFunction1D.cpp	/^    interactiveToggleButton->setToggle(interactive);$/;"	p	file:	signature:(interactive)
setTransferFunction1D	TransferFunction1D.cpp	/^void TransferFunction1D::setTransferFunction1D(Storage* storage) {$/;"	f	class:TransferFunction1D	signature:(Storage* storage)
setTransferFunction1D	TransferFunction1D.h	/^    void setTransferFunction1D(Storage* storage);$/;"	p	class:TransferFunction1D	access:public	signature:(Storage* storage)
setValue	ExampleVTKReader.cpp	/^  opacitySlider->setValue(Opacity);$/;"	p	file:	signature:(Opacity)
setValue	ExampleVTKReader.cpp	/^  opacityValue->setValue(Opacity);$/;"	p	file:	signature:(Opacity)
setValue	Isosurfaces.cpp	/^        colorSliders[i]->setValue(_color[i]);$/;"	p	file:	signature:(_color[i])
setValue	ScalarWidget.cpp	/^            controlPoint->setValue(_value);$/;"	p	file:	signature:(_value)
setValue	ScalarWidgetControlPoint.cpp	/^void ScalarWidgetControlPoint::setValue(double _value) {$/;"	f	class:ScalarWidgetControlPoint	signature:(double _value)
setValue	ScalarWidgetControlPoint.h	/^	void setValue(double _value);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(double _value)
setValue	Slices.cpp	/^        colorSliders[i]->setValue(_color[i]);$/;"	p	file:	signature:(_color[i])
setValue	TransferFunction1D.cpp	/^        colorSliders[i]->setValue(_color[i]);$/;"	p	file:	signature:(_color[i])
setValues	ColorMap.cpp	/^			controlPoint->rgbaColor->setValues(i, rgbaColor.getValues(i));$/;"	p	file:	signature:(i, rgbaColor.getValues(i))
setValues	ColorMap.cpp	/^		rgbaColor->setValues(i, previousControlPoint->rgbaColor->getValues(i)*w1+nextControlPoint->rgbaColor->getValues(i)*w2);$/;"	p	file:	signature:(i, previousControlPoint->rgbaColor->getValues(i)*w1+nextControlPoint->rgbaColor->getValues(i)*w2)
setValues	Isosurfaces.cpp	/^        rgbaColor->setValues(i, float(colorSliders[i]->getValue()));$/;"	p	file:	signature:(i, float(colorSliders[i]->getValue()))
setValues	RGBAColor.cpp	/^void RGBAColor::setValues(float _values[4]) {$/;"	f	class:RGBAColor	signature:(float _values[4])
setValues	RGBAColor.cpp	/^void RGBAColor::setValues(int i, float value) {$/;"	f	class:RGBAColor	signature:(int i, float value)
setValues	RGBAColor.h	/^	void setValues(float _values[4]);$/;"	p	class:RGBAColor	access:public	signature:(float _values[4])
setValues	RGBAColor.h	/^	void setValues(int i, float value);$/;"	p	class:RGBAColor	access:public	signature:(int i, float value)
setValues	Slices.cpp	/^        rgbaColor->setValues(i, float(colorSliders[i]->getValue()));$/;"	p	file:	signature:(i, float(colorSliders[i]->getValue()))
setValues	Storage.cpp	/^		for(int j=0;j<4;++j) rgbaColors[i].setValues(j,controlPointPointer->rgbaColor->getValues(j));$/;"	p	file:	signature:(j,controlPointPointer->rgbaColor->getValues(j))
setValues	TransferFunction1D.cpp	/^        rgbaColor->setValues(i, float(colorSliders[i]->getValue()));$/;"	p	file:	signature:(i, float(colorSliders[i]->getValue()))
setVerbose	ExampleVTKReader.cpp	/^void ExampleVTKReader::setVerbose(bool verbose)$/;"	f	class:ExampleVTKReader	signature:(bool verbose)
setVerbose	ExampleVTKReader.h	/^  void setVerbose(bool);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool)
setVerbose	main.cpp	/^      application.setVerbose(verbose);$/;"	p	file:	signature:(verbose)
setW	Gaussian.cpp	/^void Gaussian::setW(float w) {$/;"	f	class:Gaussian	signature:(float w)
setW	Gaussian.h	/^    void setW(float w);$/;"	p	class:Gaussian	access:public	signature:(float w)
setX	Gaussian.cpp	/^void Gaussian::setX(float x) {$/;"	f	class:Gaussian	signature:(float x)
setX	Gaussian.h	/^    void setX(float x);$/;"	p	class:Gaussian	access:public	signature:(float x)
setX	ScalarWidgetControlPoint.cpp	/^void ScalarWidgetControlPoint::setX(GLfloat _x) {$/;"	f	class:ScalarWidgetControlPoint	signature:(GLfloat _x)
setX	ScalarWidgetControlPoint.h	/^	void setX(GLfloat _x);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(GLfloat _x)
setXContourSlice	Contours.cpp	/^        exampleVTKReader->setXContourSlice(int(callBackData->value));$/;"	p	file:	signature:(int(callBackData->value))
setXContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setXContourSlice(int xSlice)$/;"	f	class:ExampleVTKReader	signature:(int xSlice)
setXContourSlice	ExampleVTKReader.h	/^  void setXContourSlice(int xSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int xSlice)
setXSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setXSlice(int xSlice)$/;"	f	class:ExampleVTKReader	signature:(int xSlice)
setXSlice	ExampleVTKReader.h	/^  void setXSlice(int xSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int xSlice)
setXSlice	Slices.cpp	/^        exampleVTKReader->setXSlice(int(callBackData->value));$/;"	p	file:	signature:(int(callBackData->value))
setY	ScalarWidget.cpp	/^          controlPointPtr->setY(GLfloat((controlPointPtr->getScalar() - 0.0f) * (y2 - y1) \/ (1.0f - 0.0f) + y1));$/;"	p	file:	signature:(controlPointPtr->getScalar() - 0.0f) * (y2 - y1) / (1.0f - 0.0f) + y1
setY	ScalarWidget.cpp	/^          controlPointPtr->setY(y1);$/;"	p	file:	signature:(y1)
setY	ScalarWidgetControlPoint.cpp	/^void ScalarWidgetControlPoint::setY(GLfloat _y) {$/;"	f	class:ScalarWidgetControlPoint	signature:(GLfloat _y)
setY	ScalarWidgetControlPoint.h	/^	void setY(GLfloat _y);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(GLfloat _y)
setYContourSlice	Contours.cpp	/^        exampleVTKReader->setYContourSlice(int(callBackData->value));$/;"	p	file:	signature:(int(callBackData->value))
setYContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setYContourSlice(int ySlice)$/;"	f	class:ExampleVTKReader	signature:(int ySlice)
setYContourSlice	ExampleVTKReader.h	/^  void setYContourSlice(int ySlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int ySlice)
setYSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setYSlice(int ySlice)$/;"	f	class:ExampleVTKReader	signature:(int ySlice)
setYSlice	ExampleVTKReader.h	/^  void setYSlice(int ySlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int ySlice)
setYSlice	Slices.cpp	/^        exampleVTKReader->setYSlice(int(callBackData->value));$/;"	p	file:	signature:(int(callBackData->value))
setZContourSlice	Contours.cpp	/^        exampleVTKReader->setZContourSlice(int(callBackData->value));$/;"	p	file:	signature:(int(callBackData->value))
setZContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setZContourSlice(int zSlice)$/;"	f	class:ExampleVTKReader	signature:(int zSlice)
setZContourSlice	ExampleVTKReader.h	/^  void setZContourSlice(int zSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int zSlice)
setZSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::setZSlice(int zSlice)$/;"	f	class:ExampleVTKReader	signature:(int zSlice)
setZSlice	ExampleVTKReader.h	/^  void setZSlice(int zSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(int zSlice)
setZSlice	Slices.cpp	/^        exampleVTKReader->setZSlice(int(callBackData->value));$/;"	p	file:	signature:(int(callBackData->value))
showAIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::showAIsosurface(bool AIsosurface)$/;"	f	class:ExampleVTKReader	signature:(bool AIsosurface)
showAIsosurface	ExampleVTKReader.h	/^  void showAIsosurface(bool AIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool AIsosurface)
showAIsosurfaceToggle	Isosurfaces.cpp	/^    GLMotif::ToggleButton * showAIsosurfaceToggle = new GLMotif::ToggleButton("ShowAIsosurfacesToggle", abcIsosurfacesRowColumn, "A");$/;"	l
showBIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::showBIsosurface(bool BIsosurface)$/;"	f	class:ExampleVTKReader	signature:(bool BIsosurface)
showBIsosurface	ExampleVTKReader.h	/^  void showBIsosurface(bool BIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool BIsosurface)
showBIsosurfaceToggle	Isosurfaces.cpp	/^    GLMotif::ToggleButton * showBIsosurfaceToggle = new GLMotif::ToggleButton("ShowBIsosurfacesToggle", abcIsosurfacesRowColumn, "B");$/;"	l
showCIsosurface	ExampleVTKReader.cpp	/^void ExampleVTKReader::showCIsosurface(bool CIsosurface)$/;"	f	class:ExampleVTKReader	signature:(bool CIsosurface)
showCIsosurface	ExampleVTKReader.h	/^  void showCIsosurface(bool CIsosurface);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool CIsosurface)
showCIsosurfacesToggle	Isosurfaces.cpp	/^    GLMotif::ToggleButton * showCIsosurfacesToggle = new GLMotif::ToggleButton("ShowCIsosurfacesToggle", abcIsosurfacesRowColumn, "C");$/;"	l
showClippingPlane	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showClippingPlane=new GLMotif::ToggleButton($/;"	l
showContoursDialog	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton * showContoursDialog = new GLMotif::ToggleButton($/;"	l
showContoursDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showContoursDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showContoursDialogCallback	ExampleVTKReader.h	/^  void showContoursDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showContoursToggle	Contours.cpp	/^    GLMotif::ToggleButton * showContoursToggle = new GLMotif::ToggleButton($/;"	l
showFlashlight	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showFlashlight=new GLMotif::ToggleButton($/;"	l
showFreeSlice	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showFreeSlice=new GLMotif::ToggleButton($/;"	l
showIsosurfacesDialog	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton * showIsosurfacesDialog =$/;"	l
showIsosurfacesDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showIsosurfacesDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showIsosurfacesDialogCallback	ExampleVTKReader.h	/^  void showIsosurfacesDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showNone	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showNone=new GLMotif::ToggleButton($/;"	l
showOutline	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showOutline=new GLMotif::ToggleButton($/;"	l
showPoints	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showPoints=new GLMotif::ToggleButton($/;"	l
showRenderingDialog	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton * showRenderingDialog = new GLMotif::ToggleButton($/;"	l
showRenderingDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showRenderingDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showRenderingDialogCallback	ExampleVTKReader.h	/^  void showRenderingDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showSlicesDialog	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton * showSlicesDialog = new GLMotif::ToggleButton($/;"	l
showSlicesDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showSlicesDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showSlicesDialogCallback	ExampleVTKReader.h	/^  void showSlicesDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showSurface	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showSurface=new GLMotif::ToggleButton($/;"	l
showSurfaceWithEdges	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showSurfaceWithEdges=new GLMotif::ToggleButton($/;"	l
showTransferFunctionDialog	ExampleVTKReader.cpp	/^   GLMotif::ToggleButton * showTransferFunctionDialog =$/;"	l
showTransferFunctionDialogCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::showTransferFunctionDialogCallback($/;"	f	class:ExampleVTKReader	signature:( GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showTransferFunctionDialogCallback	ExampleVTKReader.h	/^  void showTransferFunctionDialogCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
showVolume	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showVolume=new GLMotif::ToggleButton($/;"	l
showWireframe	ExampleVTKReader.cpp	/^  GLMotif::ToggleButton* showWireframe=new GLMotif::ToggleButton($/;"	l
showXContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showXContourSlice(bool XSlice)$/;"	f	class:ExampleVTKReader	signature:(bool XSlice)
showXContourSlice	ExampleVTKReader.h	/^  void showXContourSlice(bool XSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool XSlice)
showXSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showXSlice(bool XSlice)$/;"	f	class:ExampleVTKReader	signature:(bool XSlice)
showXSlice	ExampleVTKReader.h	/^  void showXSlice(bool XSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool XSlice)
showXSliceToggle	Contours.cpp	/^    GLMotif::ToggleButton * showXSliceToggle = new GLMotif::ToggleButton("ShowXSliceToggle", xyzContoursRowColumn, "X");$/;"	l
showXSliceToggle	Slices.cpp	/^    GLMotif::ToggleButton * showXSliceToggle = new GLMotif::ToggleButton("ShowXSliceToggle", xyzSlicesRowColumn, "X");$/;"	l
showYContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showYContourSlice(bool YSlice)$/;"	f	class:ExampleVTKReader	signature:(bool YSlice)
showYContourSlice	ExampleVTKReader.h	/^  void showYContourSlice(bool YSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool YSlice)
showYSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showYSlice(bool YSlice)$/;"	f	class:ExampleVTKReader	signature:(bool YSlice)
showYSlice	ExampleVTKReader.h	/^  void showYSlice(bool YSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool YSlice)
showYSliceToggle	Contours.cpp	/^    GLMotif::ToggleButton * showYSliceToggle = new GLMotif::ToggleButton("ShowYSliceToggle", xyzContoursRowColumn, "Y");$/;"	l
showYSliceToggle	Slices.cpp	/^    GLMotif::ToggleButton * showYSliceToggle = new GLMotif::ToggleButton("ShowYSliceToggle", xyzSlicesRowColumn, "Y");$/;"	l
showZContourSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showZContourSlice(bool ZSlice)$/;"	f	class:ExampleVTKReader	signature:(bool ZSlice)
showZContourSlice	ExampleVTKReader.h	/^  void showZContourSlice(bool ZSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool ZSlice)
showZSlice	ExampleVTKReader.cpp	/^void ExampleVTKReader::showZSlice(bool ZSlice)$/;"	f	class:ExampleVTKReader	signature:(bool ZSlice)
showZSlice	ExampleVTKReader.h	/^  void showZSlice(bool ZSlice);$/;"	p	class:ExampleVTKReader	access:public	signature:(bool ZSlice)
showZSliceToggle	Contours.cpp	/^    GLMotif::ToggleButton * showZSliceToggle = new GLMotif::ToggleButton("ShowZSliceToggle", xyzContoursRowColumn, "Z");$/;"	l
showZSliceToggle	Slices.cpp	/^    GLMotif::ToggleButton * showZSliceToggle = new GLMotif::ToggleButton("ShowZSliceToggle", xyzSlicesRowColumn, "Z");$/;"	l
sliceColorMapChangedCallback	Slices.cpp	/^void Slices::sliceColorMapChangedCallback(Misc::CallbackData * callBackData) {$/;"	f	class:Slices	signature:(Misc::CallbackData * callBackData)
sliceColorMapChangedCallback	Slices.h	/^    void sliceColorMapChangedCallback(Misc::CallbackData * callBackData);$/;"	p	class:Slices	access:public	signature:(Misc::CallbackData * callBackData)
sliceColorMapSubCascade	Slices.cpp	/^    GLMotif::CascadeButton * sliceColorMapSubCascade =$/;"	l
sliceColorMapSubMenuPopup	Slices.cpp	/^    GLMotif::Popup * sliceColorMapSubMenuPopup = new GLMotif::Popup("SliceColorMapSubMenuPopup", Vrui::getWidgetManager());$/;"	l
sliceColorMaps	Slices.cpp	/^    GLMotif::RadioBox * sliceColorMaps = new GLMotif::RadioBox("SliceColorMaps", sliceColorMapSubMenuPopup, false);$/;"	l
sliceColormap	Slices.h	/^    double* sliceColormap;$/;"	m	class:Slices	access:private
sliceContourLabel	Contours.cpp	/^    GLMotif::Label * sliceContourLabel = new GLMotif::Label($/;"	l
sliceLUT	DataItem.h	/^  vtkSmartPointer<vtkLookupTable> sliceLUT;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
slicesDialog	ExampleVTKReader.h	/^  Slices* slicesDialog;$/;"	m	class:ExampleVTKReader	access:private
sliderCallback	Contours.cpp	/^void Contours::sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData) {$/;"	f	class:Contours	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
sliderCallback	Contours.h	/^    void sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData);$/;"	p	class:Contours	access:public	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
sliderCallback	Isosurfaces.cpp	/^void Isosurfaces::sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData) {$/;"	f	class:Isosurfaces	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
sliderCallback	Isosurfaces.h	/^    void sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData);$/;"	p	class:Isosurfaces	access:public	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
sliderCallback	Slices.cpp	/^void Slices::sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData) {$/;"	f	class:Slices	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
sliderCallback	Slices.h	/^    void sliderCallback(GLMotif::Slider::ValueChangedCallbackData * callBackData);$/;"	p	class:Slices	access:public	signature:(GLMotif::Slider::ValueChangedCallbackData * callBackData)
ss	ExampleVTKReader.cpp	/^  const GLMotif::StyleSheet& ss = *Vrui::getWidgetManager()->getStyleSheet();$/;"	l
ss	ExampleVTKReader.cpp	/^  const GLMotif::StyleSheet* ss = Vrui::getWidgetManager()->getStyleSheet();$/;"	l
std::endl	ExampleVTKReader.cpp	/^    std::cerr << "ERROR: Data bounds not set!!" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^    " -vruiVerbose, -vruiHelp, etc.\\n" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\nExampleVTKReader - Render VTK objects in the VRUI context" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\nUSAGE:\\n\\t.\/ExampleVTKReader [-f <string>] [-h]" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\nWhere:" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\t-f <string>, -fileName <string>" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\t-h, -help" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\t-r <digit>, -renderMode <digit>" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\tDisplay this usage information and exit." << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\tName of VTK file to load using VTK.\\n" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^  std::cout << "\\tRender mode to request for vtkSmartVolumeMapper.\\n" << std::endl;$/;"	m	class:std	file:
step	ExampleVTKReader.cpp	/^  double step = (this->DataScalarRange[1] - this->DataScalarRange[0])\/255.0;$/;"	l
styleSheet	Contours.cpp	/^    const GLMotif::StyleSheet& styleSheet = *Vrui::getWidgetManager()->getStyleSheet();$/;"	l
styleSheet	Isosurfaces.cpp	/^    const GLMotif::StyleSheet& styleSheet = *Vrui::getWidgetManager()->getStyleSheet();$/;"	l
styleSheet	Slices.cpp	/^    const GLMotif::StyleSheet& styleSheet = *Vrui::getWidgetManager()->getStyleSheet();$/;"	l
styleSheet	TransferFunction1D.cpp	/^    const GLMotif::StyleSheet& styleSheet = *Vrui::getWidgetManager()->getStyleSheet();$/;"	l
swatchColors	SwatchesWidget.h	/^static GLubyte swatchColors[279][3] = {$/;"	v
swatchSize	SwatchesWidget.h	/^	double swatchSize[2];$/;"	m	class:SwatchesWidget	access:private
swatchesAreaBox	SwatchesWidget.h	/^	GLMotif::Box swatchesAreaBox;$/;"	m	class:SwatchesWidget	access:private
swatchesWidget	Isosurfaces.h	/^    SwatchesWidget * swatchesWidget;$/;"	m	class:Isosurfaces	access:private
swatchesWidget	Slices.h	/^    SwatchesWidget * swatchesWidget;$/;"	m	class:Slices	access:private
swatchesWidget	TransferFunction1D.h	/^    SwatchesWidget * swatchesWidget;$/;"	m	class:TransferFunction1D	access:private
toggleSelectCallback	Contours.cpp	/^void Contours::toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:Contours	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
toggleSelectCallback	Contours.h	/^    void toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData);$/;"	p	class:Contours	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData)
toggleSelectCallback	Isosurfaces.cpp	/^void Isosurfaces::toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:Isosurfaces	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
toggleSelectCallback	Isosurfaces.h	/^    void toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData);$/;"	p	class:Isosurfaces	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData)
toggleSelectCallback	Slices.cpp	/^void Slices::toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData) {$/;"	f	class:Slices	signature:(GLMotif::ToggleButton::ValueChangedCallbackData* callBackData)
toggleSelectCallback	Slices.h	/^    void toggleSelectCallback(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData);$/;"	p	class:Slices	access:public	signature:(GLMotif::ToggleButton::ValueChangedCallbackData * callBackData)
toolCreationCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::toolCreationCallback($/;"	f	class:ExampleVTKReader	signature:( Vrui::ToolManager::ToolCreationCallbackData * callbackData)
toolCreationCallback	ExampleVTKReader.h	/^  virtual void toolCreationCallback(Vrui::ToolManager::ToolCreationCallbackData* cbData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Vrui::ToolManager::ToolCreationCallbackData* cbData)
toolDestructionCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::toolDestructionCallback($/;"	f	class:ExampleVTKReader	signature:( Vrui::ToolManager::ToolDestructionCallbackData * callbackData)
toolDestructionCallback	ExampleVTKReader.h	/^  virtual void toolDestructionCallback(Vrui::ToolManager::ToolDestructionCallbackData* cbData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Vrui::ToolManager::ToolDestructionCallbackData* cbData)
transferFunctionDialog	ExampleVTKReader.h	/^  TransferFunction1D* transferFunctionDialog;$/;"	m	class:ExampleVTKReader	access:private
unselected	ScalarWidget.h	/^    bool unselected;$/;"	m	class:ScalarWidget	access:private
updateAlpha	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateAlpha(void)$/;"	f	class:ExampleVTKReader	signature:(void)
updateAlpha	ExampleVTKReader.h	/^  void updateAlpha(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
updateContourValue	ExampleVTKReader.h	/^  void updateContourValue(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
updateControlPoints	ColorMap.cpp	/^void ColorMap::updateControlPoints(void) {$/;"	f	class:ColorMap	signature:(void)
updateControlPoints	ColorMap.h	/^	void updateControlPoints(void);$/;"	p	class:ColorMap	access:private	signature:(void)
updateControlPoints	ScalarWidget.cpp	/^void ScalarWidget::updateControlPoints(void) {$/;"	f	class:ScalarWidget	signature:(void)
updateControlPoints	ScalarWidget.h	/^    void updateControlPoints(void);$/;"	p	class:ScalarWidget	access:private	signature:(void)
updateIsosurfaceColorMap	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateIsosurfaceColorMap(double* IsosurfaceColormap)$/;"	f	class:ExampleVTKReader	signature:(double* IsosurfaceColormap)
updateIsosurfaceColorMap	ExampleVTKReader.h	/^  void updateIsosurfaceColorMap(double* SliceColormap);$/;"	p	class:ExampleVTKReader	access:public	signature:(double* SliceColormap)
updateIsosurfaceColorMap	Isosurfaces.cpp	/^    exampleVTKReader->updateIsosurfaceColorMap(isosurfaceColormap);$/;"	p	file:	signature:(isosurfaceColormap)
updateModelColorMap	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateModelColorMap(void)$/;"	f	class:ExampleVTKReader	signature:(void)
updateModelColorMap	ExampleVTKReader.h	/^  void updateModelColorMap(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
updatePointers	ScalarWidget.cpp	/^void ScalarWidget::updatePointers(int component) {$/;"	f	class:ScalarWidget	signature:(int component)
updatePointers	ScalarWidget.h	/^    void updatePointers(int component);$/;"	p	class:ScalarWidget	access:private	signature:(int component)
updateSliceColorMap	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateSliceColorMap(double* SliceColormap)$/;"	f	class:ExampleVTKReader	signature:(double* SliceColormap)
updateSliceColorMap	ExampleVTKReader.h	/^  void updateSliceColorMap(double* SliceColormap);$/;"	p	class:ExampleVTKReader	access:public	signature:(double* SliceColormap)
updateSliceColorMap	Slices.cpp	/^    exampleVTKReader->updateSliceColorMap(sliceColormap);$/;"	p	file:	signature:(sliceColormap)
updateVolumeColorMap	ExampleVTKReader.cpp	/^void ExampleVTKReader::updateVolumeColorMap(void)$/;"	f	class:ExampleVTKReader	signature:(void)
updateVolumeColorMap	ExampleVTKReader.h	/^  void updateVolumeColorMap(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
useAs1DWidget	Contours.cpp	/^    alphaComponent->useAs1DWidget(true);$/;"	p	file:	signature:(true)
useAs1DWidget	ScalarWidget.cpp	/^void ScalarWidget::useAs1DWidget(bool enable)$/;"	f	class:ScalarWidget	signature:(bool enable)
useAs1DWidget	ScalarWidget.h	/^    void useAs1DWidget(bool enable);$/;"	p	class:ScalarWidget	access:public	signature:(bool enable)
value	ColorMap.cpp	/^		double value=double(i)*(valueRange.second-valueRange.first)\/double(numberOfEntries-1)+valueRange.first;$/;"	l
value	ControlPoint.h	/^	double value;$/;"	m	class:ControlPoint	access:public
value	ExampleVTKReader.cpp	/^  int value = callBackData->radioBox->getToggleIndex($/;"	l
value	Isosurfaces.cpp	/^    int value = callBackData->radioBox->getToggleIndex(callBackData->newSelectedToggle);$/;"	l
value	ScalarWidget.cpp	/^            double value = double(i) * (valueRange.second - valueRange.first) \/ double(numberOfEntries - 1) + valueRange.first;$/;"	l
value	ScalarWidget.cpp	/^        double value = double(i) * (valueRange.second - valueRange.first) \/ double(numberOfEntries - 1) + valueRange.first;$/;"	l
value	ScalarWidgetControlPoint.h	/^	double value;$/;"	m	class:ScalarWidgetControlPoint	access:private
value	Slices.cpp	/^    int value = callBackData->radioBox->getToggleIndex(callBackData->newSelectedToggle);$/;"	l
valueRange	ColorMap.h	/^	std::pair<double,double> valueRange;$/;"	m	class:ColorMap	access:private
valueRange	ScalarWidget.h	/^    std::pair<double,double> valueRange;$/;"	m	class:ScalarWidget	access:private
values	RGBAColor.h	/^	float * values;$/;"	m	class:RGBAColor	access:private
values	ScalarWidgetStorage.h	/^	double* values;$/;"	m	class:ScalarWidgetStorage	access:private
values	Storage.h	/^	double* values;$/;"	m	class:Storage	access:private
verbose	main.cpp	/^    bool verbose = false;$/;"	l
volumeColorMapChangedCallback	ExampleVTKReader.cpp	/^void ExampleVTKReader::volumeColorMapChangedCallback($/;"	f	class:ExampleVTKReader	signature:( Misc::CallbackData* callBackData)
volumeColorMapChangedCallback	ExampleVTKReader.h	/^  void volumeColorMapChangedCallback(Misc::CallbackData* callBackData);$/;"	p	class:ExampleVTKReader	access:public	signature:(Misc::CallbackData* callBackData)
w	Gaussian.h	/^    float w;$/;"	m	class:Gaussian	access:private
w1	ColorMap.cpp	/^		GLfloat w1=GLfloat((nextControlPoint->value-value)\/(nextControlPoint->value-previousControlPoint->value));$/;"	l
w1	ColorMap.cpp	/^	GLfloat w1=GLfloat((nextControlPoint->value-_value)\/(nextControlPoint->value -previousControlPoint->value));$/;"	l
w1	ScalarWidget.cpp	/^            GLfloat w1 = GLfloat((nextControlPoint->getValue() - value) \/ (nextControlPoint->getValue()$/;"	l
w1	ScalarWidget.cpp	/^        double w1 = (nextControlPoint->getValue() - value) \/ (nextControlPoint->getValue() - previousControlPoint->getValue());$/;"	l
w1	ScalarWidget.cpp	/^    GLfloat w1 = GLfloat((nextControlPoint->getValue() - _value)$/;"	l
w2	ColorMap.cpp	/^		GLfloat w2=GLfloat((value-previousControlPoint->value)\/(nextControlPoint->value-previousControlPoint->value));$/;"	l
w2	ColorMap.cpp	/^	GLfloat w2=GLfloat((_value-previousControlPoint->value)\/(nextControlPoint->value -previousControlPoint->value));$/;"	l
w2	ScalarWidget.cpp	/^            GLfloat w2 = GLfloat((value - previousControlPoint->getValue()) \/ (nextControlPoint->getValue()$/;"	l
w2	ScalarWidget.cpp	/^        double w2 = (value - previousControlPoint->getValue()) \/ (nextControlPoint->getValue() - previousControlPoint->getValue());$/;"	l
w2	ScalarWidget.cpp	/^    GLfloat w2 = GLfloat((_value - previousControlPoint->getValue()) \/ (nextControlPoint->getValue()$/;"	l
widgetsCascade	ExampleVTKReader.cpp	/^  GLMotif::CascadeButton* widgetsCascade =$/;"	l
widgetsMenu	ExampleVTKReader.cpp	/^  GLMotif::SubMenu* widgetsMenu = new GLMotif::SubMenu($/;"	l
widgetsMenuPopup	ExampleVTKReader.cpp	/^  GLMotif::Popup * widgetsMenuPopup = new GLMotif::Popup($/;"	l
width	ScalarWidget.cpp	/^            float width = gaussians[p].getW();$/;"	l
width	ScalarWidget.cpp	/^        float width = gaussians[p].getW();$/;"	l
width	SwatchesWidget.cpp	/^	GLfloat width = x2-x1;$/;"	l
x	ControlPoint.h	/^	GLfloat x, y;$/;"	m	class:ControlPoint	access:public
x	Gaussian.h	/^    float x;$/;"	m	class:Gaussian	access:private
x	ScalarWidget.cpp	/^            GLfloat x = GLfloat((float(i)) \/ (float(256)) * (x2 - x1) + x1);$/;"	l
x	ScalarWidget.cpp	/^            GLfloat x = GLfloat((position + xBias) * (x2 - x1) + x1);$/;"	l
x	ScalarWidget.cpp	/^            float x = float(i) \/ float(255);$/;"	l
x	ScalarWidget.cpp	/^        GLfloat x = GLfloat((float(i)) \/ (float(numberOfEntries)) * (x2 - x1) + x1);$/;"	l
x	ScalarWidget.cpp	/^        float x = (_point[0] - float(areaBox.getCorner(0)[0])) * (valueRange.second - valueRange.first)$/;"	l
x	ScalarWidgetControlPoint.h	/^	GLfloat x, y;$/;"	m	class:ScalarWidgetControlPoint	access:private
x0	ScalarWidget.cpp	/^            float x0;$/;"	l
x1	ColorMap.cpp	/^	GLfloat x1=colorMapAreaBox.getCorner(0)[0];$/;"	l
x1	ScalarWidget.cpp	/^            float x1 = (x0 - position) \/ width;$/;"	l
x1	ScalarWidget.cpp	/^        GLfloat x1 = areaBox.getCorner(0)[0];$/;"	l
x1	ScalarWidget.cpp	/^    GLfloat x1 = areaBox.getCorner(0)[0];$/;"	l
x1	ScalarWidget.cpp	/^    float x1 = areaBox.getCorner(0)[0];$/;"	l
x1	SwatchesWidget.cpp	/^	GLfloat x1=swatchesAreaBox.getCorner(0)[0];$/;"	l
x2	ColorMap.cpp	/^	GLfloat x2=colorMapAreaBox.getCorner(1)[0];$/;"	l
x2	ScalarWidget.cpp	/^        GLfloat x2 = areaBox.getCorner(1)[0];$/;"	l
x2	ScalarWidget.cpp	/^    GLfloat x2 = areaBox.getCorner(1)[0];$/;"	l
x2	ScalarWidget.cpp	/^    float x2 = areaBox.getCorner(1)[0];$/;"	l
x2	SwatchesWidget.cpp	/^	GLfloat x2=swatchesAreaBox.getCorner(1)[0];$/;"	l
xBias	ScalarWidget.cpp	/^            float xBias = gaussians[p].getBx();$/;"	l
xCenter	ExampleVTKReader.h	/^  double xCenter;$/;"	m	class:ExampleVTKReader	access:private
xContourCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> xContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
xContourCutter	ExampleVTKReader.cpp	/^  vtkNew<vtkCutter> xContourCutter;$/;"	l
xContourPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> xContourPlane;$/;"	m	class:ExampleVTKReader	access:private
xContourSlice	ExampleVTKReader.h	/^  int xContourSlice;$/;"	m	class:ExampleVTKReader	access:private
xCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> xCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
xCutterMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> xCutterMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
xOrigin	ExampleVTKReader.h	/^  double xOrigin;$/;"	m	class:ExampleVTKReader	access:private
xPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> xPlane;$/;"	m	class:ExampleVTKReader	access:private
xSlice	ExampleVTKReader.h	/^  int xSlice;$/;"	m	class:ExampleVTKReader	access:private
xSliceSlider	Contours.cpp	/^    GLMotif::Slider * xSliceSlider = new GLMotif::Slider("XSliceSlider", xyzContoursRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
xSliceSlider	Slices.cpp	/^    GLMotif::Slider * xSliceSlider = new GLMotif::Slider("XSliceSlider", xyzSlicesRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
xSliceValue	Contours.h	/^    GLMotif::TextField* xSliceValue;$/;"	m	class:Contours	access:private
xSliceValue	Slices.h	/^    GLMotif::TextField* xSliceValue;$/;"	m	class:Slices	access:private
xbias	ScalarWidget.cpp	/^        float xbias = gaussians[p].getBx();$/;"	l
xc	ScalarWidget.cpp	/^        float xc = float(gaussians[p].getX() + gaussians[p].getBx()) * (x2 - x1) + x1;$/;"	l
xl	ScalarWidget.cpp	/^            GLfloat xl = GLfloat((position - width) * (x2 - x1) + x1);$/;"	l
xl	ScalarWidget.cpp	/^        float xl = float(gaussians[p].getX() - gaussians[p].getW()) * (x2 - x1) + x1;$/;"	l
xr	ScalarWidget.cpp	/^            GLfloat xr = GLfloat((position + width) * (x2 - x1) + x1);$/;"	l
xr	ScalarWidget.cpp	/^        float xr = float(gaussians[p].getX() + gaussians[p].getW()) * (x2 - x1) + x1;$/;"	l
xyzContoursRowColumn	Contours.cpp	/^    GLMotif::RowColumn * xyzContoursRowColumn = new GLMotif::RowColumn("XYZContoursRowColumn", colorMapDialog, false);$/;"	l
xyzSlicesRowColumn	Slices.cpp	/^    GLMotif::RowColumn * xyzSlicesRowColumn = new GLMotif::RowColumn("XYZSlicesRowColumn", colorMapDialog, false);$/;"	l
y	ControlPoint.h	/^	GLfloat x, y;$/;"	m	class:ControlPoint	access:public
y	ScalarWidget.cpp	/^            GLfloat y = GLfloat((height) * (y2 - y1) \/ (1.0f - 0.0f) + y1) - controlPointSize;$/;"	l
y	ScalarWidget.cpp	/^            GLfloat y = GLfloat((opacities[i] - 0.0f) * (y2 - y1) \/ (1.0f - 0.0f) + y1);$/;"	l
y	ScalarWidget.cpp	/^        GLfloat y = GLfloat((histogram[i] - 0.0f) * (y2 - y1) \/ (1.0f - 0.0f) + y1);$/;"	l
y	ScalarWidget.cpp	/^        float y = (_point[1] - areaBox.getCorner(0)[1]) * (1.0f - 0.0f) \/ (areaBox.getCorner(2)[1] - areaBox.getCorner(0)[1])$/;"	l
y	ScalarWidgetControlPoint.h	/^	GLfloat x, y;$/;"	m	class:ScalarWidgetControlPoint	access:private
y0	ScalarWidget.cpp	/^            GLfloat y0 = GLfloat(0.0f * (y2 - y1) \/ (1.0f - 0.0f) + y1);$/;"	l
y0	ScalarWidget.cpp	/^        float y0 = float(0) * (y2 - y1) \/ (1.0f - 0.0f) + y1;$/;"	l
y1	ColorMap.cpp	/^	GLfloat y1=colorMapAreaBox.getCorner(0)[1];$/;"	l
y1	ScalarWidget.cpp	/^        GLfloat y1 = areaBox.getCorner(0)[1];$/;"	l
y1	ScalarWidget.cpp	/^    GLfloat y1 = areaBox.getCorner(0)[1];$/;"	l
y1	ScalarWidget.cpp	/^    float y1 = areaBox.getCorner(0)[1];$/;"	l
y1	SwatchesWidget.cpp	/^	GLfloat y1=swatchesAreaBox.getCorner(0)[1];$/;"	l
y2	ColorMap.cpp	/^	GLfloat y2=colorMapAreaBox.getCorner(2)[1];$/;"	l
y2	ScalarWidget.cpp	/^        GLfloat y2 = areaBox.getCorner(2)[1];$/;"	l
y2	ScalarWidget.cpp	/^    GLfloat y2 = areaBox.getCorner(2)[1];$/;"	l
y2	ScalarWidget.cpp	/^    float y2 = areaBox.getCorner(2)[1];$/;"	l
y2	SwatchesWidget.cpp	/^	GLfloat y2=swatchesAreaBox.getCorner(2)[1];$/;"	l
yBias	ScalarWidget.cpp	/^            float yBias = gaussians[p].getBy();$/;"	l
yCenter	ExampleVTKReader.h	/^  double yCenter;$/;"	m	class:ExampleVTKReader	access:private
yContourCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> yContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
yContourCutter	ExampleVTKReader.cpp	/^  vtkNew<vtkCutter> yContourCutter;$/;"	l
yContourPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> yContourPlane;$/;"	m	class:ExampleVTKReader	access:private
yContourSlice	ExampleVTKReader.h	/^  int yContourSlice;$/;"	m	class:ExampleVTKReader	access:private
yCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> yCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
yCutterMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> yCutterMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
yOrigin	ExampleVTKReader.h	/^  double yOrigin;$/;"	m	class:ExampleVTKReader	access:private
yPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> yPlane;$/;"	m	class:ExampleVTKReader	access:private
ySlice	ExampleVTKReader.h	/^  int ySlice;$/;"	m	class:ExampleVTKReader	access:private
ySliceSlider	Contours.cpp	/^    GLMotif::Slider * ySliceSlider = new GLMotif::Slider("YSliceSlider", xyzContoursRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
ySliceSlider	Slices.cpp	/^    GLMotif::Slider * ySliceSlider = new GLMotif::Slider("YSliceSlider", xyzSlicesRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
ySliceValue	Contours.h	/^    GLMotif::TextField* ySliceValue;$/;"	m	class:Contours	access:private
ySliceValue	Slices.h	/^    GLMotif::TextField* ySliceValue;$/;"	m	class:Slices	access:private
yb	ScalarWidget.cpp	/^            GLfloat yb = GLfloat(((height \/ 4.) + (yBias * height \/ 4.)) * (y2 - y1) \/ (1.0f - 0.0f) + y1);$/;"	l
yb	ScalarWidget.cpp	/^        float yb = float(gaussians[p].getH() \/ 4. + gaussians[p].getBy() * gaussians[p].getH() \/ 4.) * (y2 - y1) \/ (1.0f - 0.0f)$/;"	l
ybias	ScalarWidget.cpp	/^        float ybias = gaussians[p].getBy();$/;"	l
yc	ScalarWidget.cpp	/^        float yc = float(gaussians[p].getH()) * (y2 - y1) \/ (1.0f - 0.0f) + y1;$/;"	l
z	ColorMap.cpp	/^	GLfloat z=colorMapAreaBox.getCorner(0)[2];$/;"	l
z	ScalarWidget.cpp	/^        GLfloat z = areaBox.getCorner(0)[2];$/;"	l
z	ScalarWidget.cpp	/^        float z = _point[2];$/;"	l
z	ScalarWidget.cpp	/^    GLfloat z = areaBox.getCorner(0)[2];$/;"	l
z	SwatchesWidget.cpp	/^	GLfloat z=swatchesAreaBox.getCorner(0)[2];$/;"	l
z0	ScalarWidget.cpp	/^        float z0 = float(areaBox.getCorner(0)[2]);$/;"	l
zCenter	ExampleVTKReader.h	/^  double zCenter;$/;"	m	class:ExampleVTKReader	access:private
zContourCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> zContourCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
zContourCutter	ExampleVTKReader.cpp	/^  vtkNew<vtkCutter> zContourCutter;$/;"	l
zContourPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> zContourPlane;$/;"	m	class:ExampleVTKReader	access:private
zContourSlice	ExampleVTKReader.h	/^  int zContourSlice;$/;"	m	class:ExampleVTKReader	access:private
zCutter	DataItem.h	/^  vtkSmartPointer<vtkCutter> zCutter;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
zCutterMapper	DataItem.h	/^  vtkSmartPointer<vtkPolyDataMapper> zCutterMapper;$/;"	m	struct:ExampleVTKReader::DataItem	access:public
zOrigin	ExampleVTKReader.h	/^  double zOrigin;$/;"	m	class:ExampleVTKReader	access:private
zPlane	ExampleVTKReader.h	/^  vtkSmartPointer<vtkPlane> zPlane;$/;"	m	class:ExampleVTKReader	access:private
zSlice	ExampleVTKReader.h	/^  int zSlice;$/;"	m	class:ExampleVTKReader	access:private
zSliceSlider	Contours.cpp	/^    GLMotif::Slider * zSliceSlider = new GLMotif::Slider("ZSliceSlider", xyzContoursRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
zSliceSlider	Slices.cpp	/^    GLMotif::Slider * zSliceSlider = new GLMotif::Slider("ZSliceSlider", xyzSlicesRowColumn, GLMotif::Slider::HORIZONTAL, styleSheet.fontHeight * 10.0f);$/;"	l
zSliceValue	Contours.h	/^    GLMotif::TextField* zSliceValue;$/;"	m	class:Contours	access:private
zSliceValue	Slices.h	/^    GLMotif::TextField* zSliceValue;$/;"	m	class:Slices	access:private
~BaseLocator	BaseLocator.cpp	/^BaseLocator::~BaseLocator(void) {$/;"	f	class:BaseLocator	signature:(void)
~BaseLocator	BaseLocator.h	/^	~BaseLocator();$/;"	p	class:BaseLocator	access:public	signature:()
~ClippingPlane	ClippingPlane.cpp	/^ClippingPlane::~ClippingPlane(void) {$/;"	f	class:ClippingPlane	signature:(void)
~ClippingPlane	ClippingPlane.h	/^	~ClippingPlane(void);$/;"	p	class:ClippingPlane	access:public	signature:(void)
~ClippingPlaneLocator	ClippingPlaneLocator.cpp	/^ClippingPlaneLocator::~ClippingPlaneLocator(void) {$/;"	f	class:ClippingPlaneLocator	signature:(void)
~ClippingPlaneLocator	ClippingPlaneLocator.h	/^	~ClippingPlaneLocator(void);$/;"	p	class:ClippingPlaneLocator	access:public	signature:(void)
~ColorMap	ColorMap.cpp	/^ColorMap::~ColorMap(void) {$/;"	f	class:ColorMap	signature:(void)
~ColorMap	ColorMap.h	/^	virtual ~ColorMap(void);$/;"	p	class:ColorMap	access:public	signature:(void)
~ColorMapCallbackData	ColorMapCallbackData.cpp	/^ColorMapCallbackData::~ColorMapCallbackData() {$/;"	f	class:ColorMapCallbackData	signature:()
~ColorMapCallbackData	ColorMapCallbackData.h	/^	~ColorMapCallbackData();$/;"	p	class:ColorMapCallbackData	access:public	signature:()
~ColorMapChangedCallbackData	ColorMapChangedCallbackData.cpp	/^ColorMapChangedCallbackData::~ColorMapChangedCallbackData() {$/;"	f	class:ColorMapChangedCallbackData	signature:()
~ColorMapChangedCallbackData	ColorMapChangedCallbackData.h	/^	~ColorMapChangedCallbackData();$/;"	p	class:ColorMapChangedCallbackData	access:public	signature:()
~Contours	Contours.cpp	/^Contours::~Contours(void) {$/;"	f	class:Contours	signature:(void)
~Contours	Contours.h	/^    virtual ~Contours(void);$/;"	p	class:Contours	access:public	signature:(void)
~ControlPoint	ControlPoint.cpp	/^ControlPoint::~ControlPoint() {$/;"	f	class:ControlPoint	signature:()
~ControlPoint	ControlPoint.h	/^	~ControlPoint();$/;"	p	class:ControlPoint	access:public	signature:()
~ControlPointChangedCallbackData	ControlPointChangedCallbackData.cpp	/^ControlPointChangedCallbackData::~ControlPointChangedCallbackData() {$/;"	f	class:ControlPointChangedCallbackData	signature:()
~ControlPointChangedCallbackData	ControlPointChangedCallbackData.h	/^	~ControlPointChangedCallbackData();$/;"	p	class:ControlPointChangedCallbackData	access:public	signature:()
~DataItem	DataItem.cpp	/^ExampleVTKReader::DataItem::~DataItem(void)$/;"	f	class:ExampleVTKReader::DataItem	signature:(void)
~DataItem	DataItem.h	/^  virtual ~DataItem(void);$/;"	p	struct:ExampleVTKReader::DataItem	access:public	signature:(void)
~ExampleVTKReader	ExampleVTKReader.cpp	/^ExampleVTKReader::~ExampleVTKReader(void)$/;"	f	class:ExampleVTKReader	signature:(void)
~ExampleVTKReader	ExampleVTKReader.h	/^  virtual ~ExampleVTKReader(void);$/;"	p	class:ExampleVTKReader	access:public	signature:(void)
~FlashlightLocator	FlashlightLocator.cpp	/^FlashlightLocator::~FlashlightLocator(void) {$/;"	f	class:FlashlightLocator	signature:(void)
~FlashlightLocator	FlashlightLocator.h	/^  ~FlashlightLocator(void);$/;"	p	class:FlashlightLocator	access:public	signature:(void)
~FreeSliceLocator	FreeSliceLocator.cpp	/^FreeSliceLocator::~FreeSliceLocator(void) {$/;"	f	class:FreeSliceLocator	signature:(void)
~FreeSliceLocator	FreeSliceLocator.h	/^  ~FreeSliceLocator(void);$/;"	p	class:FreeSliceLocator	access:public	signature:(void)
~Gaussian	Gaussian.cpp	/^Gaussian::~Gaussian(void) {$/;"	f	class:Gaussian	signature:(void)
~Gaussian	Gaussian.h	/^    ~Gaussian(void);$/;"	p	class:Gaussian	access:public	signature:(void)
~Isosurfaces	Isosurfaces.cpp	/^Isosurfaces::~Isosurfaces(void) {$/;"	f	class:Isosurfaces	signature:(void)
~Isosurfaces	Isosurfaces.h	/^    virtual ~Isosurfaces(void);$/;"	p	class:Isosurfaces	access:public	signature:(void)
~RGBAColor	RGBAColor.cpp	/^RGBAColor::~RGBAColor() {$/;"	f	class:RGBAColor	signature:()
~RGBAColor	RGBAColor.h	/^	virtual ~RGBAColor();$/;"	p	class:RGBAColor	access:public	signature:()
~ScalarWidget	ScalarWidget.cpp	/^ScalarWidget::~ScalarWidget(void) {$/;"	f	class:ScalarWidget	signature:(void)
~ScalarWidget	ScalarWidget.h	/^    virtual ~ScalarWidget(void);$/;"	p	class:ScalarWidget	access:public	signature:(void)
~ScalarWidgetCallbackData	ScalarWidgetCallbackData.cpp	/^ScalarWidgetCallbackData::~ScalarWidgetCallbackData(void) {$/;"	f	class:ScalarWidgetCallbackData	signature:(void)
~ScalarWidgetCallbackData	ScalarWidgetCallbackData.h	/^	~ScalarWidgetCallbackData(void);$/;"	p	class:ScalarWidgetCallbackData	access:public	signature:(void)
~ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.cpp	/^ScalarWidgetChangedCallbackData::~ScalarWidgetChangedCallbackData(void) {$/;"	f	class:ScalarWidgetChangedCallbackData	signature:(void)
~ScalarWidgetChangedCallbackData	ScalarWidgetChangedCallbackData.h	/^	~ScalarWidgetChangedCallbackData(void);$/;"	p	class:ScalarWidgetChangedCallbackData	access:public	signature:(void)
~ScalarWidgetControlPoint	ScalarWidgetControlPoint.cpp	/^ScalarWidgetControlPoint::~ScalarWidgetControlPoint(void) {$/;"	f	class:ScalarWidgetControlPoint	signature:(void)
~ScalarWidgetControlPoint	ScalarWidgetControlPoint.h	/^	~ScalarWidgetControlPoint(void);$/;"	p	class:ScalarWidgetControlPoint	access:public	signature:(void)
~ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.cpp	/^ScalarWidgetControlPointChangedCallbackData::~ScalarWidgetControlPointChangedCallbackData(void) {$/;"	f	class:ScalarWidgetControlPointChangedCallbackData	signature:(void)
~ScalarWidgetControlPointChangedCallbackData	ScalarWidgetControlPointChangedCallbackData.h	/^	~ScalarWidgetControlPointChangedCallbackData(void);$/;"	p	class:ScalarWidgetControlPointChangedCallbackData	access:public	signature:(void)
~ScalarWidgetStorage	ScalarWidgetStorage.cpp	/^ScalarWidgetStorage::~ScalarWidgetStorage(void) {$/;"	f	class:ScalarWidgetStorage	signature:(void)
~ScalarWidgetStorage	ScalarWidgetStorage.h	/^	~ScalarWidgetStorage(void);$/;"	p	class:ScalarWidgetStorage	access:public	signature:(void)
~Slices	Slices.cpp	/^Slices::~Slices(void) {$/;"	f	class:Slices	signature:(void)
~Slices	Slices.h	/^    virtual ~Slices(void);$/;"	p	class:Slices	access:public	signature:(void)
~Storage	Storage.cpp	/^Storage::~Storage(void) {$/;"	f	class:Storage	signature:(void)
~Storage	Storage.h	/^	~Storage(void);$/;"	p	class:Storage	access:public	signature:(void)
~SwatchesWidget	SwatchesWidget.cpp	/^SwatchesWidget::~SwatchesWidget(void) {$/;"	f	class:SwatchesWidget	signature:(void)
~SwatchesWidget	SwatchesWidget.h	/^	virtual ~SwatchesWidget(void);$/;"	p	class:SwatchesWidget	access:public	signature:(void)
~TransferFunction1D	TransferFunction1D.cpp	/^TransferFunction1D::~TransferFunction1D(void) {$/;"	f	class:TransferFunction1D	signature:(void)
~TransferFunction1D	TransferFunction1D.h	/^    virtual ~TransferFunction1D(void);$/;"	p	class:TransferFunction1D	access:public	signature:(void)
