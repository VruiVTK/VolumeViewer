CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

IF(POLICY CMP0020)
  CMAKE_POLICY(SET CMP0020 NEW)
ENDIF()

PROJECT(VolumeViewer)

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

INCLUDE(FindPkgConfig)

IF(NOT VRUI_PKGCONFIG_DIR)
  FIND_PATH(VRUI_PKGCONFIG_DIR Vrui.pc)
ENDIF()
SET(ENV{PKG_CONFIG_PATH} "$ENV{PKG_CONFIG_PATH}:${VRUI_PKGCONFIG_DIR}")

PKG_SEARCH_MODULE(VRUI REQUIRED Vrui>=3000000)
STRING(REPLACE "-framework;" "-framework " VRUI_LDFLAGS "${VRUI_LDFLAGS}")
ADD_DEFINITIONS(${VRUI_CFLAGS})

# Find VTK
FIND_PACKAGE(VTK REQUIRED)
INCLUDE(${VTK_USE_FILE})

IF (VTK_VERSION VERSION_LESS "6.2")
  MESSAGE(FATAL_ERROR "Require VTK version 6.2 or higher")
ENDIF ()

IF (${VTK_RENDERING_BACKEND} STREQUAL "OpenGL")
  FIND_PACKAGE (GLEW REQUIRED)
  IF (NOT GLEW_FOUND)
    MESSAGE (FATAL_ERROR "Glew required. Please set GLEW_DIR")
  ENDIF ()
  INCLUDE_DIRECTORIES (${GLEW_INCLUDE_DIR})
ENDIF ()

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
INCLUDE(InstallRequiredSystemLibraries)

SET(${PROJECT_NAME}_SRCS
  BaseLocator.cpp
  BaseLocator.h
  ClippingPlane.cpp
  ClippingPlane.h
  ClippingPlaneLocator.cpp
  ClippingPlaneLocator.h
  ColorMap.cpp
  ColorMap.h
  ColorMapCallbackData.cpp
  ColorMapCallbackData.h
  ColorMapChangedCallbackData.cpp
  ColorMapChangedCallbackData.h
  Contours.cpp
  Contours.h
  ControlPoint.cpp
  ControlPoint.h
  ControlPointChangedCallbackData.cpp
  ControlPointChangedCallbackData.h
  DataItem.cpp
  DataItem.h
  ExampleVTKReader.cpp
  ExampleVTKReader.h
  FlashlightLocator.cpp
  FlashlightLocator.h
  FreeSliceLocator.cpp
  FreeSliceLocator.h
  Gaussian.cpp
  Gaussian.h
  Isosurfaces.cpp
  Isosurfaces.h
  main.cpp
  RGBAColor.cpp
  RGBAColor.h
  ScalarWidget.cpp
  ScalarWidget.h
  ScalarWidgetCallbackData.cpp
  ScalarWidgetCallbackData.h
  ScalarWidgetChangedCallbackData.cpp
  ScalarWidgetChangedCallbackData.h
  ScalarWidgetControlPoint.cpp
  ScalarWidgetControlPoint.h
  ScalarWidgetControlPointChangedCallbackData.cpp
  ScalarWidgetControlPointChangedCallbackData.h
  ScalarWidgetStorage.cpp
  ScalarWidgetStorage.h
  Slices.cpp
  Slices.h
  Storage.cpp
  Storage.h
  SwatchesWidget.cpp
  SwatchesWidget.h
  TransferFunction1D.cpp
  TransferFunction1D.h
  )

ADD_EXECUTABLE(${PROJECT_NAME} ${${PROJECT_NAME}_SRCS})

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${VTK_LIBRARIES} "${VRUI_LDFLAGS}")

IF (${VTK_RENDERING_BACKEND} STREQUAL "OpenGL")
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${GLEW_LIBRARY})
ENDIF ()

INSTALL(TARGETS ${PROJECT_NAME}
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  )
